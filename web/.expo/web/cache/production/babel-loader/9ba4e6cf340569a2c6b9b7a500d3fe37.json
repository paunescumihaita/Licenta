{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _toConsumableArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _get2=_interopRequireDefault(require(\"@babel/runtime/helpers/get\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _hammerjs=_interopRequireDefault(require(\"@egjs/hammerjs\"));var _constants=require(\"./constants\");var _Errors=require(\"./Errors\");var _DraggingGestureHandler=_interopRequireDefault(require(\"./DraggingGestureHandler\"));var _utils=require(\"./utils\");function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=(0,_getPrototypeOf2.default)(Derived),result;if(hasNativeReflectConstruct){var NewTarget=(0,_getPrototypeOf2.default)(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return(0,_possibleConstructorReturn2.default)(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}var FlingGestureHandler=function(_DraggingGestureHandl){(0,_inherits2.default)(FlingGestureHandler,_DraggingGestureHandl);var _super=_createSuper(FlingGestureHandler);function FlingGestureHandler(){(0,_classCallCheck2.default)(this,FlingGestureHandler);return _super.apply(this,arguments);}(0,_createClass2.default)(FlingGestureHandler,[{key:\"name\",get:function get(){return'swipe';}},{key:\"NativeGestureClass\",get:function get(){return _hammerjs.default.Swipe;}},{key:\"onGestureActivated\",value:function onGestureActivated(event){this.sendEvent((0,_extends2.default)({},event,{eventType:_hammerjs.default.INPUT_MOVE,isFinal:false,isFirst:true}));this.isGestureRunning=false;this.hasGestureFailed=false;this.sendEvent((0,_extends2.default)({},event,{eventType:_hammerjs.default.INPUT_END,isFinal:true}));}},{key:\"onRawEvent\",value:function onRawEvent(ev){var _this=this;(0,_get2.default)((0,_getPrototypeOf2.default)(FlingGestureHandler.prototype),\"onRawEvent\",this).call(this,ev);if(this.hasGestureFailed){return;}if(ev.isFinal){setTimeout(function(){if(_this.isGestureRunning){_this.cancelEvent(ev);}});}else if(!this.hasGestureFailed&&!this.isGestureRunning){var gesture=this.hammer.get(this.name);if(gesture.options.enable(gesture,ev)){this.onStart(ev);this.sendEvent(ev);}}}},{key:\"getHammerConfig\",value:function getHammerConfig(){return{pointers:this.config.numberOfPointers,direction:this.getDirection()};}},{key:\"getTargetDirections\",value:function getTargetDirections(direction){var directions=[];if(direction&_constants.Direction.RIGHT){directions.push(_hammerjs.default.DIRECTION_RIGHT);}if(direction&_constants.Direction.LEFT){directions.push(_hammerjs.default.DIRECTION_LEFT);}if(direction&_constants.Direction.UP){directions.push(_hammerjs.default.DIRECTION_UP);}if(direction&_constants.Direction.DOWN){directions.push(_hammerjs.default.DIRECTION_DOWN);}return directions;}},{key:\"getDirection\",value:function getDirection(){var _this$getConfig=this.getConfig(),direction=_this$getConfig.direction;var directions=[];if(direction&_constants.Direction.RIGHT){directions.push(_hammerjs.default.DIRECTION_HORIZONTAL);}if(direction&_constants.Direction.LEFT){directions.push(_hammerjs.default.DIRECTION_HORIZONTAL);}if(direction&_constants.Direction.UP){directions.push(_hammerjs.default.DIRECTION_VERTICAL);}if(direction&_constants.Direction.DOWN){directions.push(_hammerjs.default.DIRECTION_VERTICAL);}directions=(0,_toConsumableArray2.default)(new Set(directions));if(directions.length===0)return _hammerjs.default.DIRECTION_NONE;if(directions.length===1)return directions[0];return _hammerjs.default.DIRECTION_ALL;}},{key:\"isGestureEnabledForEvent\",value:function isGestureEnabledForEvent(_ref,_recognizer,_ref2){var numberOfPointers=_ref.numberOfPointers;var pointerLength=_ref2.maxPointers;var validPointerCount=pointerLength===numberOfPointers;if(!validPointerCount&&this.isGestureRunning){return{failed:true};}return{success:validPointerCount};}},{key:\"updateGestureConfig\",value:function updateGestureConfig(_ref3){var _ref3$numberOfPointer=_ref3.numberOfPointers,numberOfPointers=_ref3$numberOfPointer===void 0?1:_ref3$numberOfPointer,direction=_ref3.direction,props=(0,_objectWithoutProperties2.default)(_ref3,[\"numberOfPointers\",\"direction\"]);if((0,_utils.isnan)(direction)||typeof direction!=='number'){throw new _Errors.GesturePropError('direction',direction,'number');}return(0,_get2.default)((0,_getPrototypeOf2.default)(FlingGestureHandler.prototype),\"updateGestureConfig\",this).call(this,(0,_extends2.default)({numberOfPointers:numberOfPointers,direction:direction},props));}}]);return FlingGestureHandler;}(_DraggingGestureHandler.default);var _default=FlingGestureHandler;exports.default=_default;","map":{"version":3,"sources":["FlingGestureHandler.ts"],"names":["name","NativeGestureClass","Hammer","onGestureActivated","eventType","isFinal","isFirst","onRawEvent","ev","setTimeout","gesture","getHammerConfig","pointers","direction","getTargetDirections","directions","Direction","getDirection","isGestureEnabledForEvent","numberOfPointers","maxPointers","pointerLength","validPointerCount","failed","success","updateGestureConfig","props","isnan"],"mappings":"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","sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\n\nimport { Direction } from './constants';\nimport { GesturePropError } from './Errors';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { isnan } from './utils';\nimport { HammerInputExt } from './GestureHandler';\n\nclass FlingGestureHandler extends DraggingGestureHandler {\n  get name() {\n    return 'swipe';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Swipe;\n  }\n\n  onGestureActivated(event: HammerInputExt) {\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_MOVE,\n      isFinal: false,\n      isFirst: true,\n    });\n    this.isGestureRunning = false;\n    this.hasGestureFailed = false;\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_END,\n      isFinal: true,\n    });\n  }\n\n  onRawEvent(ev: HammerInputExt) {\n    super.onRawEvent(ev);\n    if (this.hasGestureFailed) {\n      return;\n    }\n    // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n    if (ev.isFinal) {\n      setTimeout(() => {\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore FIXME(TS)\n      if (gesture.options.enable(gesture, ev)) {\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      // @ts-ignore FIXME(TS)\n      pointers: this.config.numberOfPointers,\n      direction: this.getDirection(),\n    };\n  }\n\n  getTargetDirections(direction: number) {\n    const directions = [];\n    if (direction & Direction.RIGHT) {\n      directions.push(Hammer.DIRECTION_RIGHT);\n    }\n    if (direction & Direction.LEFT) {\n      directions.push(Hammer.DIRECTION_LEFT);\n    }\n    if (direction & Direction.UP) {\n      directions.push(Hammer.DIRECTION_UP);\n    }\n    if (direction & Direction.DOWN) {\n      directions.push(Hammer.DIRECTION_DOWN);\n    }\n    // const hammerDirection = directions.reduce((a, b) => a | b, 0);\n    return directions;\n  }\n\n  getDirection() {\n    // @ts-ignore FIXME(TS)\n    const { direction } = this.getConfig();\n\n    let directions = [];\n    if (direction & Direction.RIGHT) {\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\n    }\n    if (direction & Direction.LEFT) {\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\n    }\n    if (direction & Direction.UP) {\n      directions.push(Hammer.DIRECTION_VERTICAL);\n    }\n    if (direction & Direction.DOWN) {\n      directions.push(Hammer.DIRECTION_VERTICAL);\n    }\n    directions = [...new Set(directions)];\n\n    if (directions.length === 0) return Hammer.DIRECTION_NONE;\n    if (directions.length === 1) return directions[0];\n    return Hammer.DIRECTION_ALL;\n  }\n\n  isGestureEnabledForEvent(\n    { numberOfPointers }: any,\n    _recognizer: any,\n    { maxPointers: pointerLength }: any\n  ) {\n    const validPointerCount = pointerLength === numberOfPointers;\n    if (!validPointerCount && this.isGestureRunning) {\n      return { failed: true };\n    }\n    return { success: validPointerCount };\n  }\n\n  updateGestureConfig({ numberOfPointers = 1, direction, ...props }: any) {\n    if (isnan(direction) || typeof direction !== 'number') {\n      throw new GesturePropError('direction', direction, 'number');\n    }\n    return super.updateGestureConfig({\n      numberOfPointers,\n      direction,\n      ...props,\n    });\n  }\n}\n\nexport default FlingGestureHandler;\n"]},"metadata":{},"sourceType":"script"}