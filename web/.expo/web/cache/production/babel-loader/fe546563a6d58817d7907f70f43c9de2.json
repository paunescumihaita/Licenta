{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _assertThisInitialized2=_interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));var _get3=_interopRequireDefault(require(\"@babel/runtime/helpers/get\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _hammerjs=_interopRequireDefault(require(\"@egjs/hammerjs\"));var _DiscreteGestureHandler=_interopRequireDefault(require(\"./DiscreteGestureHandler\"));var _utils=require(\"./utils\");function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=(0,_getPrototypeOf2.default)(Derived),result;if(hasNativeReflectConstruct){var NewTarget=(0,_getPrototypeOf2.default)(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return(0,_possibleConstructorReturn2.default)(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var TapGestureHandler=function(_DiscreteGestureHandl){(0,_inherits2.default)(TapGestureHandler,_DiscreteGestureHandl);var _super=_createSuper(TapGestureHandler);function TapGestureHandler(){var _this;(0,_classCallCheck2.default)(this,TapGestureHandler);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty((0,_assertThisInitialized2.default)(_this),\"_shouldFireEndEvent\",null);_defineProperty((0,_assertThisInitialized2.default)(_this),\"_timer\",void 0);_defineProperty((0,_assertThisInitialized2.default)(_this),\"_multiTapTimer\",void 0);_defineProperty((0,_assertThisInitialized2.default)(_this),\"onSuccessfulTap\",function(ev){if(_this._getPendingGestures().length){_this._shouldFireEndEvent=ev;return;}if(ev.eventType===_hammerjs.default.INPUT_END){_this.sendEvent((0,_extends2.default)({},ev,{eventType:_hammerjs.default.INPUT_MOVE}));}_this.sendEvent((0,_extends2.default)({},ev,{isFinal:true}));_this.onGestureEnded(ev);});return _this;}(0,_createClass2.default)(TapGestureHandler,[{key:\"name\",get:function get(){return'tap';}},{key:\"NativeGestureClass\",get:function get(){return _hammerjs.default.Tap;}},{key:\"maxDelayMs\",get:function get(){return(0,_utils.isnan)(this.config.maxDelayMs)?300:this.config.maxDelayMs;}},{key:\"simulateCancelEvent\",value:function simulateCancelEvent(inputData){if(this.isGestureRunning){this.cancelEvent(inputData);}}},{key:\"onGestureActivated\",value:function onGestureActivated(ev){if(this.isGestureRunning){this.onSuccessfulTap(ev);}}},{key:\"onRawEvent\",value:function onRawEvent(ev){var _this2=this;(0,_get3.default)((0,_getPrototypeOf2.default)(TapGestureHandler.prototype),\"onRawEvent\",this).call(this,ev);if(!this.hasGestureFailed&&!this.isGestureRunning&&!ev.isFinal){var gesture=this.hammer.get(this.name);if(gesture.options.enable(gesture,ev)){clearTimeout(this._multiTapTimer);this.onStart(ev);this.sendEvent(ev);}}if(ev.isFinal&&ev.maxPointers>1){setTimeout(function(){if(_this2.isGestureRunning){_this2.cancelEvent(ev);}});}if(this.hasGestureFailed){return;}if(ev.isFinal){if(ev.maxPointers>1){setTimeout(function(){if(_this2.isGestureRunning){_this2.cancelEvent(ev);}});}clearTimeout(this._timer);this._timer=setTimeout(function(){_this2.hasGestureFailed=true;_this2.cancelEvent(ev);},this.maxDelayMs);}else if(!this.hasGestureFailed&&!this.isGestureRunning){var _gesture2=this.hammer.get(this.name);if(_gesture2.options.enable(_gesture2,ev)){clearTimeout(this._multiTapTimer);this.onStart(ev);this.sendEvent(ev);}}}},{key:\"getHammerConfig\",value:function getHammerConfig(){return(0,_extends2.default)({},(0,_get3.default)((0,_getPrototypeOf2.default)(TapGestureHandler.prototype),\"getHammerConfig\",this).call(this),{event:this.name,taps:(0,_utils.isnan)(this.config.numberOfTaps)?1:this.config.numberOfTaps,interval:this.maxDelayMs,time:(0,_utils.isnan)(this.config.maxDurationMs)||this.config.maxDurationMs==null?250:this.config.maxDurationMs});}},{key:\"updateGestureConfig\",value:function updateGestureConfig(_ref){var _ref$shouldCancelWhen=_ref.shouldCancelWhenOutside,shouldCancelWhenOutside=_ref$shouldCancelWhen===void 0?true:_ref$shouldCancelWhen,_ref$maxDeltaX=_ref.maxDeltaX,maxDeltaX=_ref$maxDeltaX===void 0?Number.NaN:_ref$maxDeltaX,_ref$maxDeltaY=_ref.maxDeltaY,maxDeltaY=_ref$maxDeltaY===void 0?Number.NaN:_ref$maxDeltaY,_ref$numberOfTaps=_ref.numberOfTaps,numberOfTaps=_ref$numberOfTaps===void 0?1:_ref$numberOfTaps,_ref$minDurationMs=_ref.minDurationMs,minDurationMs=_ref$minDurationMs===void 0?525:_ref$minDurationMs,_ref$maxDelayMs=_ref.maxDelayMs,maxDelayMs=_ref$maxDelayMs===void 0?Number.NaN:_ref$maxDelayMs,_ref$maxDurationMs=_ref.maxDurationMs,maxDurationMs=_ref$maxDurationMs===void 0?Number.NaN:_ref$maxDurationMs,_ref$maxDist=_ref.maxDist,maxDist=_ref$maxDist===void 0?2:_ref$maxDist,_ref$minPointers=_ref.minPointers,minPointers=_ref$minPointers===void 0?1:_ref$minPointers,_ref$maxPointers=_ref.maxPointers,maxPointers=_ref$maxPointers===void 0?1:_ref$maxPointers,props=(0,_objectWithoutProperties2.default)(_ref,[\"shouldCancelWhenOutside\",\"maxDeltaX\",\"maxDeltaY\",\"numberOfTaps\",\"minDurationMs\",\"maxDelayMs\",\"maxDurationMs\",\"maxDist\",\"minPointers\",\"maxPointers\"]);return(0,_get3.default)((0,_getPrototypeOf2.default)(TapGestureHandler.prototype),\"updateGestureConfig\",this).call(this,(0,_extends2.default)({shouldCancelWhenOutside:shouldCancelWhenOutside,numberOfTaps:numberOfTaps,maxDeltaX:maxDeltaX,maxDeltaY:maxDeltaY,minDurationMs:minDurationMs,maxDelayMs:maxDelayMs,maxDist:maxDist,minPointers:minPointers,maxPointers:maxPointers},props));}},{key:\"onGestureEnded\",value:function onGestureEnded(){var _get2;clearTimeout(this._timer);for(var _len2=arguments.length,props=new Array(_len2),_key2=0;_key2<_len2;_key2++){props[_key2]=arguments[_key2];}(_get2=(0,_get3.default)((0,_getPrototypeOf2.default)(TapGestureHandler.prototype),\"onGestureEnded\",this)).call.apply(_get2,[this].concat(props));}},{key:\"onWaitingEnded\",value:function onWaitingEnded(_gesture){if(this._shouldFireEndEvent){this.onSuccessfulTap(this._shouldFireEndEvent);this._shouldFireEndEvent=null;}}}]);return TapGestureHandler;}(_DiscreteGestureHandler.default);var _default=TapGestureHandler;exports.default=_default;","map":{"version":3,"sources":["TapGestureHandler.ts"],"names":["name","NativeGestureClass","Hammer","maxDelayMs","isnan","simulateCancelEvent","onGestureActivated","ev","eventType","INPUT_MOVE","isFinal","onRawEvent","gesture","clearTimeout","setTimeout","getHammerConfig","event","taps","interval","time","maxDurationMs","updateGestureConfig","shouldCancelWhenOutside","maxDeltaX","Number","maxDeltaY","numberOfTaps","minDurationMs","maxDist","minPointers","maxPointers","props","onGestureEnded","onWaitingEnded"],"mappings":"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","sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { HammerInputExt } from './GestureHandler';\nimport { isnan } from './utils';\n\nclass TapGestureHandler extends DiscreteGestureHandler {\n  private _shouldFireEndEvent: HammerInputExt | null = null;\n  private _timer: any;\n  private _multiTapTimer: any; // TODO unused?\n  get name() {\n    return 'tap';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Tap;\n  }\n\n  get maxDelayMs() {\n    // @ts-ignore TODO(TS) trace down config\n    return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n  }\n\n  simulateCancelEvent(inputData: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.cancelEvent(inputData);\n    }\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.onSuccessfulTap(ev);\n    }\n  }\n\n  onSuccessfulTap = (ev: HammerInputExt) => {\n    if (this._getPendingGestures().length) {\n      this._shouldFireEndEvent = ev;\n      return;\n    }\n    if (ev.eventType === Hammer.INPUT_END) {\n      this.sendEvent({ ...ev, eventType: Hammer.INPUT_MOVE });\n    }\n    // When handler gets activated it will turn into State.END immediately.\n    this.sendEvent({ ...ev, isFinal: true });\n    this.onGestureEnded(ev);\n  };\n\n  onRawEvent(ev: HammerInput) {\n    super.onRawEvent(ev);\n\n    // Attempt to create a touch-down event by checking if a valid tap hasn't started yet, then validating the input.\n    if (\n      !this.hasGestureFailed &&\n      !this.isGestureRunning &&\n      // Prevent multi-pointer events from misfiring.\n      !ev.isFinal\n    ) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n    if (ev.isFinal && ev.maxPointers > 1) {\n      setTimeout(() => {\n        // Handle case where one finger presses slightly\n        // after the first finger on a multi-tap event\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    }\n\n    if (this.hasGestureFailed) {\n      return;\n    }\n    // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n    if (ev.isFinal) {\n      // Handle case where one finger presses slightly\n      // after the first finger on a multi-tap event\n      if (ev.maxPointers > 1) {\n        setTimeout(() => {\n          if (this.isGestureRunning) {\n            this.cancelEvent(ev);\n          }\n        });\n      }\n\n      // Clear last timer\n      clearTimeout(this._timer);\n      // Create time out for multi-taps.\n      this._timer = setTimeout(() => {\n        this.hasGestureFailed = true;\n        this.cancelEvent(ev);\n      }, this.maxDelayMs);\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      event: this.name,\n      // @ts-ignore TODO(TS) trace down config\n      taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n      interval: this.maxDelayMs,\n      time:\n        // @ts-ignore TODO(TS) trace down config\n        isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null\n          ? 250\n          : // @ts-ignore TODO(TS) trace down config\n            this.config.maxDurationMs,\n    };\n  }\n\n  updateGestureConfig({\n    shouldCancelWhenOutside = true,\n    maxDeltaX = Number.NaN,\n    maxDeltaY = Number.NaN,\n    numberOfTaps = 1,\n    minDurationMs = 525,\n    maxDelayMs = Number.NaN,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TODO possibly forgotten to use in updateGestureConfig?\n    maxDurationMs = Number.NaN,\n    maxDist = 2,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldCancelWhenOutside,\n      numberOfTaps,\n      maxDeltaX,\n      maxDeltaY,\n      minDurationMs,\n      maxDelayMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n\n  onGestureEnded(...props: any) {\n    clearTimeout(this._timer);\n    // @ts-ignore TODO(TS) check how onGestureEnded works\n    super.onGestureEnded(...props);\n  }\n\n  onWaitingEnded(_gesture: any) {\n    if (this._shouldFireEndEvent) {\n      this.onSuccessfulTap(this._shouldFireEndEvent);\n      this._shouldFireEndEvent = null;\n    }\n  }\n}\nexport default TapGestureHandler;\n"]},"metadata":{},"sourceType":"script"}