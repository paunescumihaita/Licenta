{"ast":null,"code":"var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=exports.Gestures=void 0;var _constants=require(\"./web/constants\");var _FlingGestureHandler=_interopRequireDefault(require(\"./web/FlingGestureHandler\"));var _LongPressGestureHandler=_interopRequireDefault(require(\"./web/LongPressGestureHandler\"));var _NativeViewGestureHandler=_interopRequireDefault(require(\"./web/NativeViewGestureHandler\"));var NodeManager=_interopRequireWildcard(require(\"./web/NodeManager\"));var _PanGestureHandler=_interopRequireDefault(require(\"./web/PanGestureHandler\"));var _PinchGestureHandler=_interopRequireDefault(require(\"./web/PinchGestureHandler\"));var _RotationGestureHandler=_interopRequireDefault(require(\"./web/RotationGestureHandler\"));var _TapGestureHandler=_interopRequireDefault(require(\"./web/TapGestureHandler\"));var Gestures={PanGestureHandler:_PanGestureHandler.default,RotationGestureHandler:_RotationGestureHandler.default,PinchGestureHandler:_PinchGestureHandler.default,TapGestureHandler:_TapGestureHandler.default,NativeViewGestureHandler:_NativeViewGestureHandler.default,LongPressGestureHandler:_LongPressGestureHandler.default,FlingGestureHandler:_FlingGestureHandler.default};exports.Gestures=Gestures;var _default={Direction:_constants.Direction,handleSetJSResponder:function handleSetJSResponder(tag,blockNativeResponder){console.warn('handleSetJSResponder: ',tag,blockNativeResponder);},handleClearJSResponder:function handleClearJSResponder(){console.warn('handleClearJSResponder: ');},createGestureHandler:function createGestureHandler(handlerName,handlerTag,config){if(!(handlerName in Gestures))throw new Error(\"react-native-gesture-handler: \".concat(handlerName,\" is not supported on web.\"));var GestureClass=Gestures[handlerName];NodeManager.createGestureHandler(handlerTag,new GestureClass());this.updateGestureHandler(handlerTag,config);},attachGestureHandler:function attachGestureHandler(handlerTag,newView,propsRef){NodeManager.getHandler(handlerTag).setView(newView,propsRef);},updateGestureHandler:function updateGestureHandler(handlerTag,newConfig){NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);},getGestureHandlerNode:function getGestureHandlerNode(handlerTag){return NodeManager.getHandler(handlerTag);},dropGestureHandler:function dropGestureHandler(handlerTag){NodeManager.dropGestureHandler(handlerTag);}};exports.default=_default;","map":{"version":3,"sources":["RNGestureHandlerModule.web.ts"],"names":["Gestures","PanGestureHandler","RotationGestureHandler","PinchGestureHandler","TapGestureHandler","NativeViewGestureHandler","LongPressGestureHandler","FlingGestureHandler","Direction","handleSetJSResponder","console","handleClearJSResponder","createGestureHandler","handlerName","GestureClass","NodeManager","attachGestureHandler","updateGestureHandler","getGestureHandlerNode","dropGestureHandler"],"mappings":"yQAAA,0CACA,sFACA,8FACA,gGACA,sEACA,kFACA,sFACA,4FACA,kFAEO,GAAMA,CAAAA,QAAQ,CAAG,CACtBC,iBADsB,CACtBA,0BADsB,CAEtBC,sBAFsB,CAEtBA,+BAFsB,CAGtBC,mBAHsB,CAGtBA,4BAHsB,CAItBC,iBAJsB,CAItBA,0BAJsB,CAKtBC,wBALsB,CAKtBA,iCALsB,CAMtBC,uBANsB,CAMtBA,gCANsB,CAOtBC,mBAPsB,CAOtBA,4BAPsB,CAAjB,C,uCAWQ,CACbC,SADa,CACbA,oBADa,CAEbC,oBAFa,+BAEO,GAFP,CAEO,oBAFP,CAEoD,CAC/DC,OAAO,CAAPA,IAAAA,CAAAA,wBAAAA,CAAAA,GAAAA,CAAAA,oBAAAA,EAHW,CAAA,CAKbC,sBALa,kCAKY,CACvBD,OAAO,CAAPA,IAAAA,CAAAA,0BAAAA,EANW,CAAA,CAQbE,oBARa,+BAQO,WARP,CAQO,UARP,CAQO,MARP,CAYX,CAEA,GAAI,EAAEC,WAAW,GAAjB,CAAA,QAAI,CAAJ,CACE,KAAM,IAAA,CAAA,KAAA,CAAA,iCAAA,MAAA,CAAA,WAAA,CAAN,2BAAM,CAAA,CAAN,CAGF,GAAMC,CAAAA,YAAY,CAAGd,QAAQ,CAA7B,WAA6B,CAA7B,CACAe,WAAW,CAAXA,oBAAAA,CAAAA,UAAAA,CAA6C,GAA7CA,CAAAA,YAA6C,EAA7CA,EACA,KAAA,oBAAA,CAAA,UAAA,CAAA,MAAA,EApBW,CAAA,CAsBbC,oBAtBa,+BAsBO,UAtBP,CAsBO,OAtBP,CAsBO,QAtBP,CA0BX,CACAD,WAAW,CAAXA,UAAAA,CAAAA,UAAAA,EAAAA,OAAAA,CAAAA,OAAAA,CAAAA,QAAAA,EA3BW,CAAA,CA6BbE,oBA7Ba,+BA6BO,UA7BP,CA6BO,SA7BP,CA6B4C,CACvDF,WAAW,CAAXA,UAAAA,CAAAA,UAAAA,EAAAA,mBAAAA,CAAAA,SAAAA,EA9BW,CAAA,CAgCbG,qBAhCa,gCAgCQ,UAhCR,CAgC6B,CACxC,MAAOH,CAAAA,WAAW,CAAXA,UAAAA,CAAP,UAAOA,CAAP,CAjCW,CAAA,CAmCbI,kBAnCa,6BAmCK,UAnCL,CAmC0B,CACrCJ,WAAW,CAAXA,kBAAAA,CAAAA,UAAAA,EACD,CArCY,C","sourcesContent":["import { Direction } from './web/constants';\nimport FlingGestureHandler from './web/FlingGestureHandler';\nimport LongPressGestureHandler from './web/LongPressGestureHandler';\nimport NativeViewGestureHandler from './web/NativeViewGestureHandler';\nimport * as NodeManager from './web/NodeManager';\nimport PanGestureHandler from './web/PanGestureHandler';\nimport PinchGestureHandler from './web/PinchGestureHandler';\nimport RotationGestureHandler from './web/RotationGestureHandler';\nimport TapGestureHandler from './web/TapGestureHandler';\n\nexport const Gestures = {\n  PanGestureHandler,\n  RotationGestureHandler,\n  PinchGestureHandler,\n  TapGestureHandler,\n  NativeViewGestureHandler,\n  LongPressGestureHandler,\n  FlingGestureHandler,\n  // ForceTouchGestureHandler,\n};\n\nexport default {\n  Direction,\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    //TODO(TS) extends config\n    if (!(handlerName in Gestures))\n      throw new Error(\n        `react-native-gesture-handler: ${handlerName} is not supported on web.`\n      );\n    const GestureClass = Gestures[handlerName];\n    NodeManager.createGestureHandler(handlerTag, new GestureClass());\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    newView: number,\n    propsRef: React.RefObject<unknown>\n  ) {\n    NodeManager.getHandler(handlerTag).setView(newView, propsRef);\n  },\n  updateGestureHandler(handlerTag: number, newConfig: any) {\n    NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    return NodeManager.getHandler(handlerTag);\n  },\n  dropGestureHandler(handlerTag: number) {\n    NodeManager.dropGestureHandler(handlerTag);\n  },\n};\n"]},"metadata":{},"sourceType":"script"}