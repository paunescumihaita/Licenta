{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=validateDeprecatedConfig;var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _extends3=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var shownWarnings=[];var validations=(0,_extends3.default)({transparentCard:{message:\"'transparentCard' is removed in favor of 'cardStyle: { backgroundColor: 'transparent' }' in 'navigationOptions'. Specify it in 'defaultNavigationOptions' to keep the same behaviour.\",compat:function compat(c,o){return c.transparentCard?(0,_extends3.default)({},o,{cardStyle:[{backgroundColor:'transparent'},o.cardStyle]}):o;}},headerLayoutPreset:{message:\"'headerLayoutPreset' is renamed to 'headerTitleAlign' and moved to 'navigationOptions'. Specify it in 'defaultNavigationOptions' to keep the same behaviour.\",compat:function compat(c,o){return(0,_extends3.default)({},o,{headerTitleAlign:c.headerLayoutPreset});}},headerTransitionPreset:{message:\"'headerTransitionPreset' is removed in favor of the new animation APIs\"},transitionConfig:{message:\"'transitionConfig' is removed in favor of the new animation APIs\"}},['cardShadowEnabled','cardOverlayEnabled','cardStyle','headerBackTitleVisible','onTransitionStart','onTransitionEnd'].reduce(function(acc,name){acc[name]={message:\"'\".concat(name,\"' is moved to 'navigationOptions'. Specify it in 'defaultNavigationOptions' to keep the same behaviour.\"),compat:function compat(c,o){return(0,_extends3.default)({},o,(0,_defineProperty2.default)({},name,function(){return c[name];}));}};return acc;},{}));function validateDeprecatedConfig(config,options){var result=options;Object.keys(validations).forEach(function(name){if(name in config){var _validations$name=validations[name],compat=_validations$name.compat,message=_validations$name.message;result=compat?compat(config,result):result;if(process.env.NODE_ENV!=='production'){if(shownWarnings.includes(message)){return;}console.warn(\"Deprecation in 'createStackNavigator':\\n\".concat(message));shownWarnings.push(message);}}});return result;}","map":{"version":3,"sources":["validateDeprecatedConfig.tsx"],"names":["shownWarnings","validations","transparentCard","message","compat","cardStyle","backgroundColor","o","headerLayoutPreset","headerTitleAlign","c","headerTransitionPreset","transitionConfig","acc","result","Object","name","process","console"],"mappings":"mWAcA,GAAMA,CAAAA,aAAuB,CAA7B,EAAA,CAEA,GAAMC,CAAAA,WAAuC,wBAC3CC,eAAe,CAAE,CACfC,OAAO,CADQ,uLAAA,CAEfC,MAAM,CAAE,gBAAA,CAAA,CAAA,CAAA,QACN,CAAA,CAAC,CAAD,eAAA,0BACI,CADJ,EAGMC,SAAS,CAAE,CACT,CAAEC,eAAe,CAAE,aAAnB,CADS,CAETC,CAAC,CAFQ,SAAA,CAHjB,GAQIA,CATE,EAFO,CAD0B,CAc3CC,kBAAkB,CAAE,CAClBL,OAAO,CADW,8JAAA,CAElBC,MAAM,CAAE,gBAAA,CAAA,CAAA,CAAA,iCAAW,CAAX,EAAmBK,gBAAgB,CAAEC,CAAC,CAACF,kBAAvC,IAFU,CAduB,CAkB3CG,sBAAsB,CAAE,CACtBR,OAAO,CAAA,wEADe,CAlBmB,CAqB3CS,gBAAgB,CAAE,CAChBT,OAAO,CAAA,kEADS,CArByB,EAwBxC,CAAA,mBAAA,CAAA,oBAAA,CAAA,WAAA,CAAA,wBAAA,CAAA,mBAAA,CAAA,iBAAA,EAAA,MAAA,CAOkC,SAAA,GAAA,CAAA,IAAA,CAAe,CAClDU,GAAG,CAAHA,IAAG,CAAHA,CAAY,CACVV,OAAO,CAAA,IAAA,MAAA,CAAA,IAAA,CADG,yGACH,CADG,CAEVC,MAAM,CAAE,gBAAA,CAAA,CAAA,CAAA,iCAAW,CAAX,iCAAmB,IAAnB,CAA2B,iBAAMM,CAAAA,CAAC,CAAA,IAAA,CAAP,EAA3B,IAFE,CAAZG,CAKA,MAAA,CAAA,GAAA,CAbC,CAAA,CAAA,EAAA,CAxBwC,CAA7C,CAyCe,QAAA,CAAA,wBAAA,CAAA,MAAA,CAAA,OAAA,CAGb,CACA,GAAIC,CAAAA,MAAM,CAAV,OAAA,CAEAC,MAAM,CAANA,IAAAA,CAAAA,WAAAA,EAAAA,OAAAA,CAAkCC,SAAAA,IAAD,CAAU,CACzC,GAAIA,IAAI,GAAR,CAAA,MAAA,CAAoB,uBACUf,WAAW,CAAvC,IAAuC,CADrB,CACZ,MADY,mBACZ,MADY,CACFE,OADE,mBACFA,OADE,CAGlBW,MAAM,CAAGV,MAAM,CAAGA,MAAM,CAAA,MAAA,CAAT,MAAS,CAAT,CAAfU,MAAAA,CAEA,GAAIG,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,GAAJ,YAAA,CAA2C,CACzC,GAAIjB,aAAa,CAAbA,QAAAA,CAAJ,OAAIA,CAAJ,CAAqC,CACnC,OACD,CAEDkB,OAAO,CAAPA,IAAAA,CAAAA,2CAAAA,MAAAA,CAAAA,OAAAA,CAAAA,EACAlB,aAAa,CAAbA,IAAAA,CAAAA,OAAAA,EACD,CACF,CAdHe,CAAAA,EAiBA,MAAA,CAAA,MAAA,CACD","sourcesContent":["import type { StyleProp, ViewStyle } from 'react-native';\nimport type {\n  StackNavigationOptions,\n  StackNavigationConfig,\n} from '../vendor/types';\n\ntype Validation = {\n  message: string;\n  compat?: (\n    c: Record<string, any>,\n    o: StackNavigationOptions\n  ) => StackNavigationOptions;\n};\n\nconst shownWarnings: string[] = [];\n\nconst validations: Record<string, Validation> = {\n  transparentCard: {\n    message: `'transparentCard' is removed in favor of 'cardStyle: { backgroundColor: 'transparent' }' in 'navigationOptions'. Specify it in 'defaultNavigationOptions' to keep the same behaviour.`,\n    compat: (c, o) =>\n      c.transparentCard\n        ? {\n            ...o,\n            cardStyle: [\n              { backgroundColor: 'transparent' },\n              o.cardStyle,\n            ] as StyleProp<ViewStyle>,\n          }\n        : o,\n  },\n  headerLayoutPreset: {\n    message: `'headerLayoutPreset' is renamed to 'headerTitleAlign' and moved to 'navigationOptions'. Specify it in 'defaultNavigationOptions' to keep the same behaviour.`,\n    compat: (c, o) => ({ ...o, headerTitleAlign: c.headerLayoutPreset }),\n  },\n  headerTransitionPreset: {\n    message: `'headerTransitionPreset' is removed in favor of the new animation APIs`,\n  },\n  transitionConfig: {\n    message: `'transitionConfig' is removed in favor of the new animation APIs`,\n  },\n  ...[\n    'cardShadowEnabled',\n    'cardOverlayEnabled',\n    'cardStyle',\n    'headerBackTitleVisible',\n    'onTransitionStart',\n    'onTransitionEnd',\n  ].reduce<Record<string, Validation>>((acc, name) => {\n    acc[name] = {\n      message: `'${name}' is moved to 'navigationOptions'. Specify it in 'defaultNavigationOptions' to keep the same behaviour.`,\n      compat: (c, o) => ({ ...o, [name]: () => c[name] }),\n    };\n\n    return acc;\n  }, {}),\n};\n\nexport default function validateDeprecatedConfig(\n  config: StackNavigationConfig,\n  options: StackNavigationOptions\n) {\n  let result = options;\n\n  Object.keys(validations).forEach((name) => {\n    if (name in config) {\n      const { compat, message } = validations[name];\n\n      result = compat ? compat(config, result) : result;\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (shownWarnings.includes(message)) {\n          return;\n        }\n\n        console.warn(`Deprecation in 'createStackNavigator':\\n${message}`);\n        shownWarnings.push(message);\n      }\n    }\n  });\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"script"}