{"ast":null,"code":"var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.SectionList=exports.FlatList=exports.ScrollView=void 0;var _extends3=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _reactNativeGestureHandler=require(\"react-native-gesture-handler\");var _createNavigationAwareScrollable=_interopRequireDefault(require(\"./createNavigationAwareScrollable\"));var _invariant=_interopRequireDefault(require(\"./utils/invariant\"));function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}var WrappedScrollView;exports.ScrollView=WrappedScrollView;if(_reactNative.Platform.OS==='android'){exports.ScrollView=WrappedScrollView=(0,_createNavigationAwareScrollable.default)(_reactNative.ScrollView);}else{exports.ScrollView=WrappedScrollView=(0,_createNavigationAwareScrollable.default)(_reactNativeGestureHandler.ScrollView);}function propsMaybeWithRefreshControl(props){var onRefresh=props.onRefresh;if(onRefresh){(0,_invariant.default)(typeof props.refreshing==='boolean','`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `'+JSON.stringify(props.refreshing)+'`');return(0,_extends3.default)({},props,{refreshControl:props.refreshControl==null?React.createElement(_reactNative.RefreshControl,{refreshing:props.refreshing,onRefresh:onRefresh,progressViewOffset:props.progressViewOffset}):props.refreshControl});}else{return props;}}var WrappedFlatList=React.forwardRef(function(props,ref){return React.createElement(_reactNative.FlatList,_extends({ref:ref},props,{renderScrollComponent:function renderScrollComponent(props){return React.createElement(WrappedScrollView,propsMaybeWithRefreshControl(props));}}));});exports.FlatList=WrappedFlatList;var WrappedSectionList=React.forwardRef(function(props,ref){return React.createElement(_reactNative.SectionList,_extends({ref:ref},props,{renderScrollComponent:function renderScrollComponent(props){return React.createElement(WrappedScrollView,propsMaybeWithRefreshControl(props));}}));});exports.SectionList=WrappedSectionList;","map":{"version":3,"sources":["Scrollables.js"],"names":["Platform","WrappedScrollView","createNavigationAwareScrollable","onRefresh","props","invariant","JSON","refreshControl","progressViewOffset","WrappedFlatList","ref","propsMaybeWithRefreshControl","WrappedSectionList"],"mappings":"gXAAA,oDACA,yCAOA,uEACA,0GACA,oE,uRAEA,GAAA,CAAA,iBAAA,C,qCACA,GAAIA,sBAAAA,EAAAA,GAAJ,SAAA,CAA+B,CAI7BC,mBAAAA,iBAAiB,CAAGC,6CAApBD,uBAAoBC,CAApBD,CAJF,CAAA,IAKO,CACLA,mBAAAA,iBAAiB,CAAGC,6CAApBD,qCAAoBC,CAApBD,CACD,CAED,QAAA,CAAA,4BAAA,CAAA,KAAA,CAA6C,CAC3C,GAAME,CAAAA,SAAS,CAAGC,KAAK,CAAvB,SAAA,CACA,GAAA,SAAA,CAAe,CACbC,uBACE,MAAOD,CAAAA,KAAK,CAAZ,UAAA,GADO,SAATC,CAEE,oFACEC,IAAI,CAAJA,SAAAA,CAAeF,KAAK,CADtB,UACEE,CADF,CAFFD,GAAAA,EAMA,+BAAO,KAAP,EAEEE,cAAc,CACZ,KAAK,CAAL,cAAA,EAAA,IAAA,CACE,KAAA,CAAA,aAAA,CAAA,2BAAA,CAAA,CACE,UAAU,CAAEH,KAAK,CADnB,UAAA,CAEE,SAAS,CAFX,SAAA,CAGE,kBAAkB,CAAEA,KAAK,CAACI,kBAH5B,CAAA,CADF,CAOEJ,KAAK,CAACG,cAVZ,GAPF,CAAA,IAoBO,CACL,MAAA,CAAA,KAAA,CACD,CACF,CAED,GAAME,CAAAA,eAAe,CAAG,KAAK,CAAL,UAAA,CAAiB,SAAA,KAAA,CAAA,GAAA,QACvC,CAAA,KAAA,CAAA,aAAA,CAAA,qBAAA,CAAA,QAAA,CAAA,CACE,GAAG,CAAEC,GADP,CAAA,CAAA,KAAA,CAAA,CAGE,qBAAqB,CAAGN,+BAAAA,KAAD,QACrB,CAAA,KAAA,CAAA,aAAA,CAAA,iBAAA,CAAuBO,4BAA4B,CAAnD,KAAmD,CAAnD,CADqB,EAHzB,CAAA,CAAA,CADuC,EAAjB,CAAxB,C,iCAUA,GAAMC,CAAAA,kBAAkB,CAAG,KAAK,CAAL,UAAA,CAAiB,SAAA,KAAA,CAAA,GAAA,QAC1C,CAAA,KAAA,CAAA,aAAA,CAAA,wBAAA,CAAA,QAAA,CAAA,CACE,GAAG,CAAEF,GADP,CAAA,CAAA,KAAA,CAAA,CAGE,qBAAqB,CAAGN,+BAAAA,KAAD,QACrB,CAAA,KAAA,CAAA,aAAA,CAAA,iBAAA,CAAuBO,4BAA4B,CAAnD,KAAmD,CAAnD,CADqB,EAHzB,CAAA,CAAA,CAD0C,EAAjB,CAA3B,C","sourcesContent":["import * as React from 'react';\nimport {\n  ScrollView,\n  Platform,\n  FlatList,\n  SectionList,\n  RefreshControl,\n} from 'react-native';\nimport { ScrollView as GHScrollView } from 'react-native-gesture-handler';\nimport createNavigationAwareScrollable from './createNavigationAwareScrollable';\nimport invariant from './utils/invariant';\n\nlet WrappedScrollView;\nif (Platform.OS === 'android') {\n  // @todo: use GHScrollView again when\n  // https://github.com/kmagiera/react-native-gesture-handler/issues/560 has\n  // been fixed.\n  WrappedScrollView = createNavigationAwareScrollable(ScrollView);\n} else {\n  WrappedScrollView = createNavigationAwareScrollable(GHScrollView);\n}\n\nfunction propsMaybeWithRefreshControl(props) {\n  const onRefresh = props.onRefresh;\n  if (onRefresh) {\n    invariant(\n      typeof props.refreshing === 'boolean',\n      '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' +\n        JSON.stringify(props.refreshing) +\n        '`'\n    );\n    return {\n      ...props,\n      refreshControl:\n        props.refreshControl == null ? (\n          <RefreshControl\n            refreshing={props.refreshing}\n            onRefresh={onRefresh}\n            progressViewOffset={props.progressViewOffset}\n          />\n        ) : (\n          props.refreshControl\n        ),\n    };\n  } else {\n    return props;\n  }\n}\n\nconst WrappedFlatList = React.forwardRef((props, ref) => (\n  <FlatList\n    ref={ref}\n    {...props}\n    renderScrollComponent={(props) => (\n      <WrappedScrollView {...propsMaybeWithRefreshControl(props)} />\n    )}\n  />\n));\n\nconst WrappedSectionList = React.forwardRef((props, ref) => (\n  <SectionList\n    ref={ref}\n    {...props}\n    renderScrollComponent={(props) => (\n      <WrappedScrollView {...propsMaybeWithRefreshControl(props)} />\n    )}\n  />\n));\n\nexport {\n  WrappedScrollView as ScrollView,\n  WrappedFlatList as FlatList,\n  WrappedSectionList as SectionList,\n};\n"]},"metadata":{},"sourceType":"script"}