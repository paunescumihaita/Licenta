{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});Object.defineProperty(exports,\"Directions\",{enumerable:true,get:function get(){return _Directions.Directions;}});Object.defineProperty(exports,\"State\",{enumerable:true,get:function get(){return _State.State;}});Object.defineProperty(exports,\"gestureHandlerRootHOC\",{enumerable:true,get:function get(){return _gestureHandlerRootHOC.default;}});Object.defineProperty(exports,\"GestureHandlerRootView\",{enumerable:true,get:function get(){return _GestureHandlerRootView.default;}});Object.defineProperty(exports,\"TapGestureHandler\",{enumerable:true,get:function get(){return _gestureHandlers.TapGestureHandler;}});Object.defineProperty(exports,\"ForceTouchGestureHandler\",{enumerable:true,get:function get(){return _gestureHandlers.ForceTouchGestureHandler;}});Object.defineProperty(exports,\"LongPressGestureHandler\",{enumerable:true,get:function get(){return _gestureHandlers.LongPressGestureHandler;}});Object.defineProperty(exports,\"PanGestureHandler\",{enumerable:true,get:function get(){return _gestureHandlers.PanGestureHandler;}});Object.defineProperty(exports,\"PinchGestureHandler\",{enumerable:true,get:function get(){return _gestureHandlers.PinchGestureHandler;}});Object.defineProperty(exports,\"RotationGestureHandler\",{enumerable:true,get:function get(){return _gestureHandlers.RotationGestureHandler;}});Object.defineProperty(exports,\"FlingGestureHandler\",{enumerable:true,get:function get(){return _gestureHandlers.FlingGestureHandler;}});Object.defineProperty(exports,\"createNativeWrapper\",{enumerable:true,get:function get(){return _createNativeWrapper.default;}});Object.defineProperty(exports,\"NativeViewGestureHandler\",{enumerable:true,get:function get(){return _NativeViewGestureHandler.NativeViewGestureHandler;}});Object.defineProperty(exports,\"RawButton\",{enumerable:true,get:function get(){return _GestureButtons.RawButton;}});Object.defineProperty(exports,\"BaseButton\",{enumerable:true,get:function get(){return _GestureButtons.BaseButton;}});Object.defineProperty(exports,\"RectButton\",{enumerable:true,get:function get(){return _GestureButtons.RectButton;}});Object.defineProperty(exports,\"BorderlessButton\",{enumerable:true,get:function get(){return _GestureButtons.BorderlessButton;}});Object.defineProperty(exports,\"TouchableHighlight\",{enumerable:true,get:function get(){return _touchables.TouchableHighlight;}});Object.defineProperty(exports,\"TouchableNativeFeedback\",{enumerable:true,get:function get(){return _touchables.TouchableNativeFeedback;}});Object.defineProperty(exports,\"TouchableOpacity\",{enumerable:true,get:function get(){return _touchables.TouchableOpacity;}});Object.defineProperty(exports,\"TouchableWithoutFeedback\",{enumerable:true,get:function get(){return _touchables.TouchableWithoutFeedback;}});Object.defineProperty(exports,\"ScrollView\",{enumerable:true,get:function get(){return _GestureComponents.ScrollView;}});Object.defineProperty(exports,\"Switch\",{enumerable:true,get:function get(){return _GestureComponents.Switch;}});Object.defineProperty(exports,\"TextInput\",{enumerable:true,get:function get(){return _GestureComponents.TextInput;}});Object.defineProperty(exports,\"DrawerLayoutAndroid\",{enumerable:true,get:function get(){return _GestureComponents.DrawerLayoutAndroid;}});Object.defineProperty(exports,\"FlatList\",{enumerable:true,get:function get(){return _GestureComponents.FlatList;}});Object.defineProperty(exports,\"Swipeable\",{enumerable:true,get:function get(){return _Swipeable.default;}});Object.defineProperty(exports,\"DrawerLayout\",{enumerable:true,get:function get(){return _DrawerLayout.default;}});var _Directions=require(\"./Directions\");var _State=require(\"./State\");var _gestureHandlerRootHOC=_interopRequireDefault(require(\"./gestureHandlerRootHOC\"));var _GestureHandlerRootView=_interopRequireDefault(require(\"./GestureHandlerRootView\"));var _gestureHandlers=require(\"./handlers/gestureHandlers\");var _createNativeWrapper=_interopRequireDefault(require(\"./handlers/createNativeWrapper\"));var _NativeViewGestureHandler=require(\"./handlers/NativeViewGestureHandler\");var _GestureButtons=require(\"./components/GestureButtons\");var _touchables=require(\"./components/touchables\");var _GestureComponents=require(\"./components/GestureComponents\");var _Swipeable=_interopRequireDefault(require(\"./components/Swipeable\"));var _DrawerLayout=_interopRequireDefault(require(\"./components/DrawerLayout\"));","map":{"version":3,"sources":["index.ts"],"names":[],"mappings":"0nHAAA,wCACA,8BACA,sFACA,wFAwBA,2DASA,2FAKA,6EAOA,2DAMA,mDAMA,iEA8CA,yEASA","sourcesContent":["export { Directions } from './Directions';\nexport { State } from './State';\nexport { default as gestureHandlerRootHOC } from './gestureHandlerRootHOC';\nexport { default as GestureHandlerRootView } from './GestureHandlerRootView';\nexport type {\n  // event types\n  GestureEvent,\n  HandlerStateChangeEvent,\n  // event payloads types\n  GestureEventPayload,\n  HandlerStateChangeEventPayload,\n  TapGestureHandlerEventPayload,\n  ForceTouchGestureHandlerEventPayload,\n  LongPressGestureHandlerEventPayload,\n  PanGestureHandlerEventPayload,\n  PinchGestureHandlerEventPayload,\n  RotationGestureHandlerEventPayload,\n  FlingGestureHandlerEventPayload,\n  // gesture handlers props types\n  TapGestureHandlerProps,\n  ForceTouchGestureHandlerProps,\n  LongPressGestureHandlerProps,\n  PanGestureHandlerProps,\n  PinchGestureHandlerProps,\n  RotationGestureHandlerProps,\n  FlingGestureHandlerProps,\n} from './handlers/gestureHandlers';\nexport {\n  TapGestureHandler,\n  ForceTouchGestureHandler,\n  LongPressGestureHandler,\n  PanGestureHandler,\n  PinchGestureHandler,\n  RotationGestureHandler,\n  FlingGestureHandler,\n} from './handlers/gestureHandlers';\nexport { default as createNativeWrapper } from './handlers/createNativeWrapper';\nexport type {\n  NativeViewGestureHandlerPayload,\n  NativeViewGestureHandlerProps,\n} from './handlers/NativeViewGestureHandler';\nexport { NativeViewGestureHandler } from './handlers/NativeViewGestureHandler';\nexport type {\n  RawButtonProps,\n  BaseButtonProps,\n  RectButtonProps,\n  BorderlessButtonProps,\n} from './components/GestureButtons';\nexport {\n  RawButton,\n  BaseButton,\n  RectButton,\n  BorderlessButton,\n} from './components/GestureButtons';\nexport {\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n} from './components/touchables';\nexport {\n  ScrollView,\n  Switch,\n  TextInput,\n  DrawerLayoutAndroid,\n  FlatList,\n} from './components/GestureComponents';\nexport type {\n  //events\n  GestureHandlerGestureEvent,\n  GestureHandlerStateChangeEvent,\n  //event payloads\n  GestureHandlerGestureEventNativeEvent,\n  GestureHandlerStateChangeNativeEvent,\n  NativeViewGestureHandlerGestureEvent,\n  NativeViewGestureHandlerStateChangeEvent,\n  TapGestureHandlerGestureEvent,\n  TapGestureHandlerStateChangeEvent,\n  ForceTouchGestureHandlerGestureEvent,\n  ForceTouchGestureHandlerStateChangeEvent,\n  LongPressGestureHandlerGestureEvent,\n  LongPressGestureHandlerStateChangeEvent,\n  PanGestureHandlerGestureEvent,\n  PanGestureHandlerStateChangeEvent,\n  PinchGestureHandlerGestureEvent,\n  PinchGestureHandlerStateChangeEvent,\n  RotationGestureHandlerGestureEvent,\n  RotationGestureHandlerStateChangeEvent,\n  FlingGestureHandlerGestureEvent,\n  FlingGestureHandlerStateChangeEvent,\n  // handlers props\n  NativeViewGestureHandlerProperties,\n  TapGestureHandlerProperties,\n  LongPressGestureHandlerProperties,\n  PanGestureHandlerProperties,\n  PinchGestureHandlerProperties,\n  RotationGestureHandlerProperties,\n  FlingGestureHandlerProperties,\n  ForceTouchGestureHandlerProperties,\n  // buttons props\n  RawButtonProperties,\n  BaseButtonProperties,\n  RectButtonProperties,\n  BorderlessButtonProperties,\n} from './handlers/gestureHandlerTypesCompat';\n\nexport { default as Swipeable } from './components/Swipeable';\nexport type {\n  DrawerLayoutProps,\n  DrawerPosition,\n  DrawerState,\n  DrawerType,\n  DrawerLockMode,\n  DrawerKeyboardDismissMode,\n} from './components/DrawerLayout';\nexport { default as DrawerLayout } from './components/DrawerLayout';\n"]},"metadata":{},"sourceType":"script"}