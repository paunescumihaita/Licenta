{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _dangerousStyleValue=_interopRequireDefault(require(\"./dangerousStyleValue\"));function setValueForStyles(node,styles){var style=node.style;for(var styleName in styles){if(!styles.hasOwnProperty(styleName)){continue;}var isCustomProperty=styleName.indexOf('--')===0;var styleValue=(0,_dangerousStyleValue.default)(styleName,styles[styleName],isCustomProperty);if(styleName==='float'){styleName='cssFloat';}if(isCustomProperty){style.setProperty(styleName,styleValue);}else{style[styleName]=styleValue;}}}var _default=setValueForStyles;exports.default=_default;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Aplicatie/Licenta/web/node_modules/react-native-web/dist/modules/setValueForStyles/index.js"],"names":["setValueForStyles","node","styles","style","styleName","hasOwnProperty","isCustomProperty","indexOf","styleValue","setProperty"],"mappings":"mKAWA,kFASA,QAASA,CAAAA,iBAAT,CAA2BC,IAA3B,CAAiCC,MAAjC,CAAyC,CACvC,GAAIC,CAAAA,KAAK,CAAGF,IAAI,CAACE,KAAjB,CAEA,IAAK,GAAIC,CAAAA,SAAT,GAAsBF,CAAAA,MAAtB,CAA8B,CAC5B,GAAI,CAACA,MAAM,CAACG,cAAP,CAAsBD,SAAtB,CAAL,CAAuC,CACrC,SACD,CAED,GAAIE,CAAAA,gBAAgB,CAAGF,SAAS,CAACG,OAAV,CAAkB,IAAlB,IAA4B,CAAnD,CACA,GAAIC,CAAAA,UAAU,CAAG,iCAAoBJ,SAApB,CAA+BF,MAAM,CAACE,SAAD,CAArC,CAAkDE,gBAAlD,CAAjB,CAEA,GAAIF,SAAS,GAAK,OAAlB,CAA2B,CACzBA,SAAS,CAAG,UAAZ,CACD,CAED,GAAIE,gBAAJ,CAAsB,CACpBH,KAAK,CAACM,WAAN,CAAkBL,SAAlB,CAA6BI,UAA7B,EACD,CAFD,IAEO,CACLL,KAAK,CAACC,SAAD,CAAL,CAAmBI,UAAnB,CACD,CACF,CACF,C,aAEcR,iB","sourcesContent":["/* eslint-disable */\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * From React 16.3.0\n * \n */\nimport dangerousStyleValue from './dangerousStyleValue';\n/**\n * Sets the value for multiple styles on a node.  If a value is specified as\n * '' (empty string), the corresponding style property will be unset.\n *\n * @param {DOMElement} node\n * @param {object} styles\n */\n\nfunction setValueForStyles(node, styles) {\n  var style = node.style;\n\n  for (var styleName in styles) {\n    if (!styles.hasOwnProperty(styleName)) {\n      continue;\n    }\n\n    var isCustomProperty = styleName.indexOf('--') === 0;\n    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);\n\n    if (styleName === 'float') {\n      styleName = 'cssFloat';\n    }\n\n    if (isCustomProperty) {\n      style.setProperty(styleName, styleValue);\n    } else {\n      style[styleName] = styleValue;\n    }\n  }\n}\n\nexport default setValueForStyles;"]},"metadata":{},"sourceType":"script"}