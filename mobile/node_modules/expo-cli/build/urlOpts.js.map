{"version":3,"sources":["../src/urlOpts.ts"],"names":["addOptions","program","option","optsAsync","projectRoot","options","opts","ProjectSettings","readAsync","host","lan","localhost","tunnel","filter","i","length","CommandError","hostType","offline","ConnectionStatus","setIsOffline","devClient","defaultTarget","Log","warn","chalk","bold","AbortCommandError","scheme","setAsync","printQRCode","url","qrcodeTerminal","generate","code","log","handleMobileOptsAsync","Promise","all","android","webOnly","Android","openWebProjectAsync","openProjectAsync","ios","Simulator","shouldPrompt","web","Webpack","openAsync"],"mappings":"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","sourcesContent":["import { getDefaultTarget } from '@expo/config';\nimport { Command } from 'commander';\nimport indentString from 'indent-string';\nimport qrcodeTerminal from 'qrcode-terminal';\nimport { Android, ConnectionStatus, ProjectSettings, Simulator, Webpack } from 'xdl';\n\nimport CommandError, { AbortCommandError } from './CommandError';\nimport Log from './log';\nimport { getDevClientSchemeAsync } from './schemes';\n\n// NOTE: if you update this, you should also update assertValidOptions in UrlUtils.ts\nexport type URLOptions = {\n  devClient?: boolean;\n  android?: boolean;\n  ios?: boolean;\n  web?: boolean;\n  scheme?: string;\n  host?: 'lan' | 'tunnel' | 'localhost';\n  tunnel?: boolean;\n  lan?: boolean;\n  localhost?: boolean;\n};\n\nfunction addOptions(program: Command) {\n  program\n    .option(\n      '--dev-client',\n      'Experimental: Starts the bundler for use with the expo-development-client'\n    )\n    .option('--scheme <scheme>', 'Custom URI protocol to use with a dev client')\n    .option('-a, --android', 'Opens your app in Expo Go on a connected Android device')\n    .option(\n      '-i, --ios',\n      'Opens your app in Expo Go in a currently running iOS simulator on your computer'\n    )\n    .option('-w, --web', 'Opens your app in a web browser')\n    .option(\n      '-m, --host [mode]',\n      'lan (default), tunnel, localhost. Type of host to use. \"tunnel\" allows you to view your link on other networks'\n    )\n    .option('--tunnel', 'Same as --host tunnel')\n    .option('--lan', 'Same as --host lan')\n    .option('--localhost', 'Same as --host localhost');\n}\n\nasync function optsAsync(projectRoot: string, options: any) {\n  const opts = await ProjectSettings.readAsync(projectRoot);\n\n  if ([options.host, options.lan, options.localhost, options.tunnel].filter(i => i).length > 1) {\n    throw new CommandError(\n      'BAD_ARGS',\n      'Specify at most one of --host, --tunnel, --lan, and --localhost'\n    );\n  }\n\n  opts.hostType = 'lan';\n\n  if (options.offline) {\n    // TODO: maybe let people know that we will force localhost with offline?\n    ConnectionStatus.setIsOffline(true);\n    opts.hostType = 'localhost';\n  }\n\n  if (options.host) {\n    opts.hostType = options.host;\n  } else if (options.tunnel) {\n    opts.hostType = 'tunnel';\n  } else if (options.lan) {\n    opts.hostType = 'lan';\n  } else if (options.localhost) {\n    opts.hostType = 'localhost';\n  }\n\n  // Prevent using --dev-client in a managed app.\n  if (options.devClient) {\n    const defaultTarget = getDefaultTarget(projectRoot);\n    if (defaultTarget !== 'bare') {\n      Log.warn(\n        `\\nOption ${Log.chalk.bold(\n          '--dev-client'\n        )} can only be used in bare workflow apps. Run ${Log.chalk.bold(\n          'expo eject'\n        )} and try again.\\n`\n      );\n      throw new AbortCommandError();\n    }\n  }\n\n  if (typeof options.scheme === 'string') {\n    // Use the custom scheme\n    opts.scheme = options.scheme ?? null;\n  } else if (options.devClient) {\n    // Attempt to find the scheme or warn the user how to setup a custom scheme\n    opts.scheme = await getDevClientSchemeAsync(projectRoot);\n  } else {\n    // Ensure this is reset when users don't use `--scheme` or `--dev-client`\n    opts.scheme = null;\n  }\n\n  await ProjectSettings.setAsync(projectRoot, opts);\n\n  return opts;\n}\n\nfunction printQRCode(url: string) {\n  qrcodeTerminal.generate(url, code => Log.log(`${indentString(code, 1)}\\n`));\n}\n\nasync function handleMobileOptsAsync(\n  projectRoot: string,\n  options: Pick<URLOptions, 'devClient' | 'ios' | 'android' | 'web'> & { webOnly?: boolean }\n) {\n  await Promise.all([\n    (async () => {\n      if (options.android) {\n        if (options.webOnly) {\n          await Android.openWebProjectAsync({ projectRoot });\n        } else {\n          await Android.openProjectAsync({ projectRoot, devClient: options.devClient ?? false });\n        }\n      }\n    })(),\n    (async () => {\n      if (options.ios) {\n        if (options.webOnly) {\n          await Simulator.openWebProjectAsync({ projectRoot, shouldPrompt: false });\n        } else {\n          await Simulator.openProjectAsync({\n            projectRoot,\n            devClient: options.devClient ?? false,\n            shouldPrompt: false,\n          });\n        }\n      }\n    })(),\n    (async () => {\n      if (options.web) {\n        await Webpack.openAsync(projectRoot);\n      }\n    })(),\n  ]);\n\n  return !!options.android || !!options.ios;\n}\n\nexport default {\n  addOptions,\n  handleMobileOptsAsync,\n  printQRCode,\n  optsAsync,\n};\n"],"file":"urlOpts.js"}