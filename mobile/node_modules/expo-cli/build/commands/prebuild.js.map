{"version":3,"sources":["../../src/commands/prebuild.ts"],"names":["actionAsync","projectRoot","platform","clean","skipDependencyUpdate","options","npm","packageManager","platforms","split","program","command","description","chalk","dim","longDescription","helpGroup","option","asyncActionProjectDir"],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEO,eAAeA,WAAf,CACLC,WADK,EAEL;AACEC,EAAAA,QADF;AAEEC,EAAAA,KAFF;AAGEC,EAAAA,oBAHF;AAIE,KAAGC;AAJL,CAFK,EAaL;AACA,MAAIA,OAAO,CAACC,GAAZ,EAAiB;AACfD,IAAAA,OAAO,CAACE,cAAR,GAAyB,KAAzB;AACD;;AAED,QAAMC,SAAS,GAAG,8CAAsBN,QAAtB,CAAlB;;AAEA,MAAIC,KAAJ,EAAW;AACT,QAAI,MAAM,2CAAV,EAAuC,OAD9B,CAET;;AACA,UAAM,4CAAkBF,WAAlB,EAA+BO,SAA/B,CAAN;AACD;;AAED,QAAM,oCAAcP,WAAd,EAA2B,EAC/B,GAAGI,OAD4B;AAE/BD,IAAAA,oBAAoB,EAAEA,oBAAoB,GAAGA,oBAAoB,CAACK,KAArB,CAA2B,GAA3B,CAAH,GAAqC,EAFhD;AAG/BD,IAAAA;AAH+B,GAA3B,CAAN;AAKD;;AAEc,kBAAUE,OAAV,EAA4B;AACzCA,EAAAA,OAAO,CACJC,OADH,CACW,iBADX,EAEGC,WAFH,CAGK,uFAAsFC,iBAAMC,GAAN,CACrF,+BAAU,wCAAV,CADqF,CAErF,EALN,EAOGC,eAPH,CAQI,kMARJ,EAUGC,SAVH,CAUa,OAVb,EAWGC,MAXH,CAWU,cAXV,EAW0B,6CAX1B,EAYGA,MAZH,CAYU,SAZV,EAYqB,uEAZrB,EAaGA,MAbH,CAaU,OAbV,EAamB,uEAbnB,EAcGA,MAdH,CAcU,2BAdV,EAcuC,oDAdvC,EAeGA,MAfH,CAgBI,yCAhBJ,EAiBI,8EAjBJ,EAmBGC,qBAnBH,CAmByBlB,WAnBzB;AAoBD","sourcesContent":["import chalk from 'chalk';\nimport { Command } from 'commander';\n\nimport { clearNativeFolder } from './eject/clearNativeFolder';\nimport { platformsFromPlatform } from './eject/platformOptions';\nimport { EjectAsyncOptions, prebuildAsync } from './eject/prebuildAsync';\nimport { learnMore } from './utils/TerminalLink';\nimport maybeBailOnGitStatusAsync from './utils/maybeBailOnGitStatusAsync';\n\nexport async function actionAsync(\n  projectRoot: string,\n  {\n    platform,\n    clean,\n    skipDependencyUpdate,\n    ...options\n  }: EjectAsyncOptions & {\n    npm?: boolean;\n    platform?: string;\n    clean?: boolean;\n    skipDependencyUpdate?: string;\n  }\n) {\n  if (options.npm) {\n    options.packageManager = 'npm';\n  }\n\n  const platforms = platformsFromPlatform(platform);\n\n  if (clean) {\n    if (await maybeBailOnGitStatusAsync()) return;\n    // Clear the native folders before syncing\n    await clearNativeFolder(projectRoot, platforms);\n  }\n\n  await prebuildAsync(projectRoot, {\n    ...options,\n    skipDependencyUpdate: skipDependencyUpdate ? skipDependencyUpdate.split(',') : [],\n    platforms,\n  } as EjectAsyncOptions);\n}\n\nexport default function (program: Command) {\n  program\n    .command('prebuild [path]')\n    .description(\n      `Experimental: Create native iOS and Android project files before building natively. ${chalk.dim(\n        learnMore('https://docs.expo.io/bare/customizing/')\n      )}`\n    )\n    .longDescription(\n      'Generate the native iOS and Android projects for your app before building them. The generated code should not be modified directly, instead config plugins should be used to make modifications.'\n    )\n    .helpGroup('eject')\n    .option('--no-install', 'Skip installing npm packages and CocoaPods.')\n    .option('--clean', 'Delete the native folders and regenerate them before applying changes')\n    .option('--npm', 'Use npm to install dependencies. (default when Yarn is not installed)')\n    .option('-p, --platform [platform]', 'Platforms to sync: ios, android, all. Default: all')\n    .option(\n      '--skip-dependency-update <dependencies>',\n      'Preserves versions of listed packages in package.json (comma separated list)'\n    )\n    .asyncActionProjectDir(actionAsync);\n}\n"],"file":"prebuild.js"}