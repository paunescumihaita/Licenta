"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _config() {
  const data = require("@expo/config");

  _config = function () {
    return data;
  };

  return data;
}

function _CommandError() {
  const data = _interopRequireDefault(require("../../CommandError"));

  _CommandError = function () {
    return data;
  };

  return data;
}

function _log() {
  const data = _interopRequireDefault(require("../../log"));

  _log = function () {
    return data;
  };

  return data;
}

function _configureProjectAsync() {
  const data = require("../eject/configureProjectAsync");

  _configureProjectAsync = function () {
    return data;
  };

  return data;
}

function _profileMethod() {
  const data = require("../utils/profileMethod");

  _profileMethod = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function actionAsync(projectRoot, options) {
  let config;

  if (options.type === 'prebuild') {
    config = await (0, _profileMethod().profileMethod)(_configureProjectAsync().getModdedConfigAsync)({
      projectRoot,
      platforms: ['ios', 'android']
    });
  } else if (options.type === 'public') {
    config = (0, _profileMethod().profileMethod)(_config().getConfig)(projectRoot, {
      skipSDKVersionRequirement: true,
      isPublicConfig: true
    });
  } else if (options.type) {
    throw new (_CommandError().default)(`Invalid option: --type ${options.type}. Valid options are: public, prebuild`);
  } else {
    config = (0, _profileMethod().profileMethod)(_config().getConfig)(projectRoot, {
      skipSDKVersionRequirement: true
    });
  }

  _log().default.log();

  (0, _configureProjectAsync().logConfig)(options.full ? config : config.exp);

  _log().default.log();
}

function _default(program) {
  program.command('config [path]').description('Show the project config').helpGroup('info').option('-t, --type <type>', 'Type of config to show. Options: public, prebuild').option('--full', 'Include all project config data').asyncActionProjectDir((0, _profileMethod().profileMethod)(actionAsync));
}
//# sourceMappingURL=config.js.map