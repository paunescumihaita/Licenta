{"version":3,"sources":["../../../src/commands/config/config.ts"],"names":["actionAsync","projectRoot","options","config","type","getModdedConfigAsync","platforms","getConfig","skipSDKVersionRequirement","isPublicConfig","CommandError","Log","log","full","exp","program","command","description","helpGroup","option","asyncActionProjectDir"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAOA,eAAeA,WAAf,CAA2BC,WAA3B,EAAgDC,OAAhD,EAAkE;AAChE,MAAIC,MAAJ;;AAEA,MAAID,OAAO,CAACE,IAAR,KAAiB,UAArB,EAAiC;AAC/BD,IAAAA,MAAM,GAAG,MAAM,oCAAcE,6CAAd,EAAoC;AACjDJ,MAAAA,WADiD;AAEjDK,MAAAA,SAAS,EAAE,CAAC,KAAD,EAAQ,SAAR;AAFsC,KAApC,CAAf;AAID,GALD,MAKO,IAAIJ,OAAO,CAACE,IAAR,KAAiB,QAArB,EAA+B;AACpCD,IAAAA,MAAM,GAAG,oCAAcI,mBAAd,EAAyBN,WAAzB,EAAsC;AAC7CO,MAAAA,yBAAyB,EAAE,IADkB;AAE7CC,MAAAA,cAAc,EAAE;AAF6B,KAAtC,CAAT;AAID,GALM,MAKA,IAAIP,OAAO,CAACE,IAAZ,EAAkB;AACvB,UAAM,KAAIM,uBAAJ,EACH,0BAAyBR,OAAO,CAACE,IAAK,uCADnC,CAAN;AAGD,GAJM,MAIA;AACLD,IAAAA,MAAM,GAAG,oCAAcI,mBAAd,EAAyBN,WAAzB,EAAsC;AAC7CO,MAAAA,yBAAyB,EAAE;AADkB,KAAtC,CAAT;AAGD;;AAEDG,iBAAIC,GAAJ;;AACA,0CAAUV,OAAO,CAACW,IAAR,GAAeV,MAAf,GAAwBA,MAAM,CAACW,GAAzC;;AACAH,iBAAIC,GAAJ;AACD;;AAEc,kBAAUG,OAAV,EAA4B;AACzCA,EAAAA,OAAO,CACJC,OADH,CACW,eADX,EAEGC,WAFH,CAEe,yBAFf,EAGGC,SAHH,CAGa,MAHb,EAIGC,MAJH,CAIU,mBAJV,EAI+B,mDAJ/B,EAKGA,MALH,CAKU,QALV,EAKoB,iCALpB,EAMGC,qBANH,CAMyB,oCAAcpB,WAAd,CANzB;AAOD","sourcesContent":["import { getConfig, ProjectConfig } from '@expo/config';\nimport { Command } from 'commander';\n\nimport CommandError from '../../CommandError';\nimport Log from '../../log';\nimport { getModdedConfigAsync, logConfig } from '../eject/configureProjectAsync';\nimport { profileMethod } from '../utils/profileMethod';\n\ntype Options = {\n  type?: string;\n  full: boolean;\n};\n\nasync function actionAsync(projectRoot: string, options: Options) {\n  let config: ProjectConfig;\n\n  if (options.type === 'prebuild') {\n    config = await profileMethod(getModdedConfigAsync)({\n      projectRoot,\n      platforms: ['ios', 'android'],\n    });\n  } else if (options.type === 'public') {\n    config = profileMethod(getConfig)(projectRoot, {\n      skipSDKVersionRequirement: true,\n      isPublicConfig: true,\n    });\n  } else if (options.type) {\n    throw new CommandError(\n      `Invalid option: --type ${options.type}. Valid options are: public, prebuild`\n    );\n  } else {\n    config = profileMethod(getConfig)(projectRoot, {\n      skipSDKVersionRequirement: true,\n    });\n  }\n\n  Log.log();\n  logConfig(options.full ? config : config.exp);\n  Log.log();\n}\n\nexport default function (program: Command) {\n  program\n    .command('config [path]')\n    .description('Show the project config')\n    .helpGroup('info')\n    .option('-t, --type <type>', 'Type of config to show. Options: public, prebuild')\n    .option('--full', 'Include all project config data')\n    .asyncActionProjectDir(profileMethod(actionAsync));\n}\n"],"file":"config.js"}