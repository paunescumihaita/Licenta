{"version":3,"sources":["../../../src/commands/utils/PublishUtils.ts"],"names":["VERSION","getPublishHistoryAsync","projectRoot","options","count","isNaN","Error","user","UserManager","ensureLoggedInAsync","exp","skipSDKVersionRequirement","api","ApiV2","clientForUser","postAsync","owner","slug","version","releaseChannel","platform","sdkVersion","setPublishToChannelAsync","publishId","_rollbackPublicationFromChannelForPlatformAsync","historyQueryResult","history","queryResult","length","secondMostRecent","nonInteractiveOptions","parent","_printAndConfirm","publicationId","revertProgress","start","succeed","rollbackPublicationFromChannelAsync","restOfTheOptions","platforms","completedPlatforms","push","e","Log","error","filter","includes","channel","partialOptions","detailOptions","detail","getPublicationDetailAsync","printPublicationDetailAsync","nonInteractive","confirm","message","result","raw","log","JSON","stringify","manifest","generalTableString","table","printTableJson","manifestTableString"],"mappings":"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","sourcesContent":["import { getConfig } from '@expo/config';\nimport { ApiV2, UserManager } from 'xdl';\n\nimport Log from '../../log';\nimport { getProjectOwner } from '../../projects';\nimport { confirmAsync } from '../../prompts';\nimport { ora } from '../../utils/ora';\nimport * as table from './cli-table';\n\nexport type HistoryOptions = {\n  releaseChannel?: string;\n  count?: number;\n  platform?: 'android' | 'ios';\n  raw?: boolean;\n  sdkVersion?: string;\n};\n\nexport type DetailOptions = {\n  publishId?: string;\n  raw?: boolean;\n};\n\nexport type SetOptions = { releaseChannel: string; publishId: string };\n\nexport type RollbackOptions = {\n  releaseChannel: string;\n  sdkVersion: string;\n  platform?: 'android' | 'ios';\n  parent?: { nonInteractive?: boolean };\n};\n\nexport type Publication = {\n  fullName: string;\n  channel: string;\n  channelId: string;\n  publicationId: string;\n  appVersion: string;\n  sdkVersion: string;\n  publishedTime: string;\n  platform: 'android' | 'ios';\n};\n\nexport type PublicationDetail = {\n  manifest: {\n    [key: string]: string;\n  };\n  publishedTime: string;\n  publishingUsername: string;\n  packageUsername: string;\n  packageName: string;\n  fullName: string;\n  hash: string;\n  sdkVersion: string;\n  s3Key: string;\n  s3Url: string;\n  abiVersion: string | null;\n  bundleUrl: string | null;\n  platform: string;\n  version: string;\n  revisionId: string;\n  channels: { [key: string]: string }[];\n  publicationId: string;\n};\n\nconst VERSION = 2;\n\nexport async function getPublishHistoryAsync(\n  projectRoot: string,\n  options: HistoryOptions\n): Promise<any> {\n  if (options.count && (isNaN(options.count) || options.count < 1 || options.count > 100)) {\n    throw new Error('-n must be a number between 1 and 100 inclusive');\n  }\n\n  // TODO(ville): handle the API result for not authenticated user instead of checking upfront\n  const user = await UserManager.ensureLoggedInAsync();\n  const { exp } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n\n  const api = ApiV2.clientForUser(user);\n  return await api.postAsync('publish/history', {\n    owner: getProjectOwner(user, exp),\n    slug: exp.slug,\n    version: VERSION,\n    releaseChannel: options.releaseChannel,\n    count: options.count,\n    platform: options.platform,\n    sdkVersion: options.sdkVersion,\n  });\n}\n\nexport async function setPublishToChannelAsync(\n  projectRoot: string,\n  options: SetOptions\n): Promise<any> {\n  const user = await UserManager.ensureLoggedInAsync();\n  const api = ApiV2.clientForUser(user);\n  const exp = getConfig(projectRoot, { skipSDKVersionRequirement: true }).exp;\n  return await api.postAsync('publish/set', {\n    releaseChannel: options.releaseChannel,\n    publishId: options.publishId,\n    slug: exp.slug,\n  });\n}\n\nasync function _rollbackPublicationFromChannelForPlatformAsync(\n  projectRoot: string,\n  platform: 'android' | 'ios',\n  options: Omit<RollbackOptions, 'platform'>\n) {\n  const { releaseChannel, sdkVersion } = options;\n  // get the 2 most recent things in the channel history\n  const historyQueryResult = await getPublishHistoryAsync(projectRoot, {\n    releaseChannel,\n    platform,\n    sdkVersion,\n    count: 2,\n  });\n\n  const history = historyQueryResult.queryResult as Publication[];\n  if (history.length === 0) {\n    throw new Error(\n      `There isn't anything published for release channel: ${releaseChannel}, sdk version: ${sdkVersion}, platform: ${platform}`\n    );\n  } else if (history.length === 1) {\n    throw new Error(\n      `There is only 1 publication for release channel: ${releaseChannel}, sdk version: ${sdkVersion}, platform: ${platform}. There won't be anything for users to receive if we rollback.`\n    );\n  }\n\n  // The second most recent publication in the history\n  const secondMostRecent = history[history.length - 1];\n\n  const nonInteractiveOptions = options.parent ? { parent: options.parent } : {};\n  // confirm that users will be receiving the secondMostRecent item in the Publish history\n  await _printAndConfirm(\n    projectRoot,\n    secondMostRecent.publicationId,\n    releaseChannel,\n    platform,\n    nonInteractiveOptions\n  );\n\n  // apply the revert publication to channel\n  const revertProgress = ora(\n    `${platform}: Applying a revert publication to channel ${releaseChannel}`\n  ).start();\n  await setPublishToChannelAsync(projectRoot, {\n    releaseChannel,\n    publishId: secondMostRecent.publicationId,\n  });\n  revertProgress.succeed(\n    `${platform}: Successfully applied revert publication. You can view it with \\`publish:history\\``\n  );\n}\n\nexport async function rollbackPublicationFromChannelAsync(\n  projectRoot: string,\n  options: RollbackOptions\n) {\n  const { platform, ...restOfTheOptions } = options;\n\n  if (platform) {\n    return await _rollbackPublicationFromChannelForPlatformAsync(\n      projectRoot,\n      platform,\n      restOfTheOptions\n    );\n  }\n\n  const platforms = ['android', 'ios'] as ('android' | 'ios')[];\n  const completedPlatforms = [] as ('android' | 'ios')[];\n  try {\n    for (const platform of platforms) {\n      await _rollbackPublicationFromChannelForPlatformAsync(\n        projectRoot,\n        platform,\n        restOfTheOptions\n      );\n      completedPlatforms.push(platform);\n    }\n  } catch (e) {\n    if (completedPlatforms.length > 0) {\n      Log.error(\n        `The platforms ${platforms.filter(\n          platform => !completedPlatforms.includes(platform)\n        )} have not been rolled back. You can complete the missing platforms by running \\`expo publish:rollback\\` with the --platform flag`\n      );\n    }\n    throw e;\n  }\n}\n\nasync function _printAndConfirm(\n  projectRoot: string,\n  publicationId: string,\n  channel: string,\n  platform: string,\n  partialOptions: { parent?: { nonInteractive?: boolean } }\n): Promise<void> {\n  const detailOptions = {\n    publishId: publicationId,\n  };\n  const detail = await getPublicationDetailAsync(projectRoot, detailOptions);\n  await printPublicationDetailAsync(detail, detailOptions);\n\n  if (partialOptions.parent && partialOptions.parent.nonInteractive) {\n    return;\n  }\n  const confirm = await confirmAsync({\n    message: `${platform}: Users on the '${channel}' channel will receive the above publication as a result of the rollback.`,\n  });\n\n  if (!confirm) {\n    throw new Error(`You can run 'publish:set' to send the desired publication to users`);\n  }\n}\n\nexport async function getPublicationDetailAsync(\n  projectRoot: string,\n  options: DetailOptions\n): Promise<PublicationDetail> {\n  // TODO(ville): handle the API result for not authenticated user instead of checking upfront\n  const user = await UserManager.ensureLoggedInAsync();\n  const { exp } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n\n  const api = ApiV2.clientForUser(user);\n  const result = await api.postAsync('publish/details', {\n    owner: getProjectOwner(user, exp),\n    publishId: options.publishId,\n    slug: exp.slug,\n  });\n\n  if (!result.queryResult) {\n    throw new Error('No records found matching your query.');\n  }\n\n  return result.queryResult;\n}\n\nexport async function printPublicationDetailAsync(\n  detail: PublicationDetail,\n  options: DetailOptions\n) {\n  if (options.raw) {\n    Log.log(JSON.stringify(detail));\n    return;\n  }\n\n  const manifest = detail.manifest;\n  delete detail.manifest;\n\n  // Print general release info\n  const generalTableString = table.printTableJson(detail, 'Release Description');\n  Log.log(generalTableString);\n\n  // Print manifest info\n  const manifestTableString = table.printTableJson(manifest, 'Manifest Details');\n  Log.log(manifestTableString);\n}\n"],"file":"PublishUtils.js"}