{"version":3,"sources":["../../../../src/commands/run/ios/resolveOptionsAsync.ts"],"names":["ignoredPaths","findXcodeProjectPaths","projectRoot","extension","absolute","cwd","ignore","resolveXcodeProject","paths","length","name","isWorkspace","CommandError","isMac","process","platform","getDefaultUserTerminal","REACT_TERMINAL","TERM_PROGRAM","TERM","env","resolveOptionsAsync","options","xcodeProject","device","isSimulator","port","bundler","configuration","shouldSkipInitialBundling","shouldStartBundler","terminal","scheme","path","basename","extname"],"mappings":"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","sourcesContent":["import { sync as globSync } from 'glob';\nimport * as path from 'path';\n\nimport CommandError from '../../../CommandError';\nimport { resolvePortAsync } from '../utils/resolvePortAsync';\nimport * as XcodeBuild from './XcodeBuild';\nimport { resolveDeviceAsync } from './resolveDeviceAsync';\n\nexport type XcodeConfiguration = 'Debug' | 'Release';\n\nexport type Options = {\n  device?: string | boolean;\n  port?: number;\n  scheme?: string;\n  configuration?: XcodeConfiguration;\n  bundler?: boolean;\n};\n\nexport type ProjectInfo = {\n  isWorkspace: boolean;\n  name: string;\n};\n\nconst ignoredPaths = ['**/@(Carthage|Pods|node_modules)/**'];\n\nfunction findXcodeProjectPaths(\n  projectRoot: string,\n  extension: 'xcworkspace' | 'xcodeproj'\n): string[] {\n  return globSync(`ios/*.${extension}`, {\n    absolute: true,\n    cwd: projectRoot,\n    ignore: ignoredPaths,\n  });\n}\n\nfunction resolveXcodeProject(projectRoot: string): ProjectInfo {\n  let paths = findXcodeProjectPaths(projectRoot, 'xcworkspace');\n  if (paths.length) {\n    return {\n      // Use full path instead of relative project root so that warnings and errors contain full paths as well, this helps with filtering.\n      // Also helps keep things consistent in monorepos.\n      name: paths[0],\n      // name: path.relative(projectRoot, paths[0]),\n      isWorkspace: true,\n    };\n  }\n  paths = findXcodeProjectPaths(projectRoot, 'xcodeproj');\n  if (paths.length) {\n    return { name: paths[0], isWorkspace: false };\n  }\n  throw new CommandError(`Xcode project not found in project: ${projectRoot}`);\n}\n\nconst isMac = process.platform === 'darwin';\n\nfunction getDefaultUserTerminal(): string | undefined {\n  const { REACT_TERMINAL, TERM_PROGRAM, TERM } = process.env;\n\n  if (REACT_TERMINAL) {\n    return REACT_TERMINAL;\n  }\n\n  if (isMac) {\n    return TERM_PROGRAM;\n  }\n\n  return TERM;\n}\n\nexport async function resolveOptionsAsync(\n  projectRoot: string,\n  options: Options\n): Promise<XcodeBuild.BuildProps> {\n  const xcodeProject = resolveXcodeProject(projectRoot);\n  const device = await resolveDeviceAsync(options.device);\n\n  const isSimulator = !('deviceType' in device);\n\n  let port = await resolvePortAsync(projectRoot, options.port);\n  // Skip bundling if the port is null\n  options.bundler = !!port;\n  if (!port) {\n    // any random number\n    port = 8081;\n  }\n\n  const configuration = options.configuration || 'Debug';\n  // This optimization skips resetting the Metro cache needlessly.\n  // The cache is reset in `../node_modules/react-native/scripts/react-native-xcode.sh` when the\n  // project is running in Debug and built onto a physical device. It seems that this is done because\n  // the script is run from Xcode and unaware of the CLI instance.\n  const shouldSkipInitialBundling = configuration === 'Debug' && !isSimulator;\n  return {\n    projectRoot,\n    isSimulator,\n    xcodeProject,\n    device,\n    configuration: options.configuration || 'Debug',\n    shouldStartBundler: options.bundler ?? false,\n    shouldSkipInitialBundling,\n    port,\n    terminal: getDefaultUserTerminal(),\n    scheme: options.scheme ?? path.basename(xcodeProject.name, path.extname(xcodeProject.name)),\n  };\n}\n"],"file":"resolveOptionsAsync.js"}