{"version":3,"sources":["../../../../src/commands/run/ios/runIos.ts"],"names":["isMac","process","platform","runIosActionAsync","projectRoot","options","Log","warn","chalk","cyan","fs","existsSync","path","join","install","platforms","props","isSimulator","IOSDeploy","assertInstalledAsync","buildOutput","XcodeBuild","buildAsync","binaryPath","getAppBinaryPath","shouldStartBundler","bundleIdentifier","getBundleIdentifierForBinaryAsync","logPrettyItem","bold","device","name","SimControl","installAsync","udid","dir","openInSimulatorAsync","installOnDeviceAsync","bundle","appDeltaDirectory","getAppDeltaDirectory","deviceName","nested","dim","builtInfoPlistPath","CFBundleIdentifier","pid","Simulator","streamLogsAsync","result","openBundleIdAsync","status","stdout","pidRegExp","RegExp","pidMatch","match","activateSimulatorWindowAsync","CommandError","stderr"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport fs from 'fs-extra';\nimport * as path from 'path';\nimport { SimControl, Simulator } from 'xdl';\n\nimport CommandError from '../../../CommandError';\nimport Log from '../../../log';\nimport { EjectAsyncOptions, prebuildAsync } from '../../eject/prebuildAsync';\nimport { profileMethod } from '../../utils/profileMethod';\nimport { parseBinaryPlistAsync } from '../utils/binaryPlist';\nimport * as IOSDeploy from './IOSDeploy';\nimport maybePromptToSyncPodsAsync from './Podfile';\nimport * as XcodeBuild from './XcodeBuild';\nimport { Options, resolveOptionsAsync } from './resolveOptionsAsync';\nimport { startBundlerAsync } from './startBundlerAsync';\n\nconst isMac = process.platform === 'darwin';\n\nexport async function runIosActionAsync(projectRoot: string, options: Options) {\n  if (!isMac) {\n    // TODO: Prompt to use EAS?\n\n    Log.warn(\n      `iOS apps can only be built on macOS devices. Use ${chalk.cyan`eas build -p ios`} to build in the cloud.`\n    );\n    return;\n  }\n\n  // If the project doesn't have native code, prebuild it...\n  if (!fs.existsSync(path.join(projectRoot, 'ios'))) {\n    await prebuildAsync(projectRoot, {\n      install: true,\n      platforms: ['ios'],\n    } as EjectAsyncOptions);\n  } else {\n    await maybePromptToSyncPodsAsync(projectRoot);\n    // TODO: Ensure the pods are in sync -- https://github.com/expo/expo/pull/11593\n  }\n\n  const props = await resolveOptionsAsync(projectRoot, options);\n  if (!props.isSimulator) {\n    // Assert as early as possible\n    await IOSDeploy.assertInstalledAsync();\n  }\n\n  const buildOutput = await profileMethod(XcodeBuild.buildAsync, 'XcodeBuild.buildAsync')(props);\n\n  const binaryPath = await profileMethod(\n    XcodeBuild.getAppBinaryPath,\n    'XcodeBuild.getAppBinaryPath'\n  )(buildOutput);\n\n  if (props.shouldStartBundler) {\n    await startBundlerAsync(projectRoot);\n  }\n  const bundleIdentifier = await profileMethod(getBundleIdentifierForBinaryAsync)(binaryPath);\n\n  if (props.isSimulator) {\n    XcodeBuild.logPrettyItem(`${chalk.bold`Installing`} on ${props.device.name}`);\n    await SimControl.installAsync({ udid: props.device.udid, dir: binaryPath });\n\n    await openInSimulatorAsync({\n      bundleIdentifier,\n      device: props.device,\n      shouldStartBundler: props.shouldStartBundler,\n    });\n  } else {\n    await IOSDeploy.installOnDeviceAsync({\n      bundle: binaryPath,\n      appDeltaDirectory: IOSDeploy.getAppDeltaDirectory(bundleIdentifier),\n      udid: props.device.udid,\n      deviceName: props.device.name,\n    });\n  }\n\n  if (props.shouldStartBundler) {\n    Log.nested(\n      `\\nLogs for your project will appear in the browser console. ${chalk.dim(\n        `Press Ctrl+C to exit.`\n      )}`\n    );\n  }\n}\n\nasync function getBundleIdentifierForBinaryAsync(binaryPath: string): Promise<string> {\n  const builtInfoPlistPath = path.join(binaryPath, 'Info.plist');\n  const { CFBundleIdentifier } = await parseBinaryPlistAsync(builtInfoPlistPath);\n  return CFBundleIdentifier;\n}\n\nasync function openInSimulatorAsync({\n  bundleIdentifier,\n  device,\n  shouldStartBundler,\n}: {\n  bundleIdentifier: string;\n  device: XcodeBuild.BuildProps['device'];\n  shouldStartBundler?: boolean;\n}) {\n  let pid: string | null = null;\n  XcodeBuild.logPrettyItem(\n    `${chalk.bold`Opening`} on ${device.name} ${chalk.dim(`(${bundleIdentifier})`)}`\n  );\n\n  if (shouldStartBundler) {\n    await Simulator.streamLogsAsync({\n      udid: device.udid,\n      bundleIdentifier,\n    });\n  }\n\n  const result = await SimControl.openBundleIdAsync({\n    udid: device.udid,\n    bundleIdentifier,\n  });\n\n  if (result.status === 0) {\n    if (result.stdout) {\n      const pidRegExp = new RegExp(`${bundleIdentifier}:\\\\s?(\\\\d+)`);\n      const pidMatch = result.stdout.match(pidRegExp);\n      pid = pidMatch?.[1] ?? null;\n    }\n    await Simulator.activateSimulatorWindowAsync();\n  } else {\n    throw new CommandError(\n      `Failed to launch the app on simulator ${device.name} (${device.udid}). Error in \"osascript\" command: ${result.stderr}`\n    );\n  }\n  return { pid };\n}\n"],"file":"runIos.js"}