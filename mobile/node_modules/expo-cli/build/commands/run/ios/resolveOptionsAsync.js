"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveOptionsAsync = resolveOptionsAsync;

function _glob() {
  const data = require("glob");

  _glob = function () {
    return data;
  };

  return data;
}

function path() {
  const data = _interopRequireWildcard(require("path"));

  path = function () {
    return data;
  };

  return data;
}

function _CommandError() {
  const data = _interopRequireDefault(require("../../../CommandError"));

  _CommandError = function () {
    return data;
  };

  return data;
}

function _resolvePortAsync() {
  const data = require("../utils/resolvePortAsync");

  _resolvePortAsync = function () {
    return data;
  };

  return data;
}

function _resolveDeviceAsync() {
  const data = require("./resolveDeviceAsync");

  _resolveDeviceAsync = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const ignoredPaths = ['**/@(Carthage|Pods|node_modules)/**'];

function findXcodeProjectPaths(projectRoot, extension) {
  return (0, _glob().sync)(`ios/*.${extension}`, {
    absolute: true,
    cwd: projectRoot,
    ignore: ignoredPaths
  });
}

function resolveXcodeProject(projectRoot) {
  let paths = findXcodeProjectPaths(projectRoot, 'xcworkspace');

  if (paths.length) {
    return {
      // Use full path instead of relative project root so that warnings and errors contain full paths as well, this helps with filtering.
      // Also helps keep things consistent in monorepos.
      name: paths[0],
      // name: path.relative(projectRoot, paths[0]),
      isWorkspace: true
    };
  }

  paths = findXcodeProjectPaths(projectRoot, 'xcodeproj');

  if (paths.length) {
    return {
      name: paths[0],
      isWorkspace: false
    };
  }

  throw new (_CommandError().default)(`Xcode project not found in project: ${projectRoot}`);
}

const isMac = process.platform === 'darwin';

function getDefaultUserTerminal() {
  const {
    REACT_TERMINAL,
    TERM_PROGRAM,
    TERM
  } = process.env;

  if (REACT_TERMINAL) {
    return REACT_TERMINAL;
  }

  if (isMac) {
    return TERM_PROGRAM;
  }

  return TERM;
}

async function resolveOptionsAsync(projectRoot, options) {
  var _options$bundler, _options$scheme;

  const xcodeProject = resolveXcodeProject(projectRoot);
  const device = await (0, _resolveDeviceAsync().resolveDeviceAsync)(options.device);
  const isSimulator = !('deviceType' in device);
  let port = await (0, _resolvePortAsync().resolvePortAsync)(projectRoot, options.port); // Skip bundling if the port is null

  options.bundler = !!port;

  if (!port) {
    // any random number
    port = 8081;
  }

  const configuration = options.configuration || 'Debug'; // This optimization skips resetting the Metro cache needlessly.
  // The cache is reset in `../node_modules/react-native/scripts/react-native-xcode.sh` when the
  // project is running in Debug and built onto a physical device. It seems that this is done because
  // the script is run from Xcode and unaware of the CLI instance.

  const shouldSkipInitialBundling = configuration === 'Debug' && !isSimulator;
  return {
    projectRoot,
    isSimulator,
    xcodeProject,
    device,
    configuration: options.configuration || 'Debug',
    shouldStartBundler: (_options$bundler = options.bundler) !== null && _options$bundler !== void 0 ? _options$bundler : false,
    shouldSkipInitialBundling,
    port,
    terminal: getDefaultUserTerminal(),
    scheme: (_options$scheme = options.scheme) !== null && _options$scheme !== void 0 ? _options$scheme : path().basename(xcodeProject.name, path().extname(xcodeProject.name))
  };
}
//# sourceMappingURL=resolveOptionsAsync.js.map