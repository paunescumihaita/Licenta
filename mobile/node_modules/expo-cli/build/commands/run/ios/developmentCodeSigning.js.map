{"version":3,"sources":["../../../../src/commands/run/ios/developmentCodeSigning.ts"],"names":["getLastDeveloperCodeSigningIdAsync","developmentCodeSigningId","UserSettings","readAsync","setLastDeveloperCodeSigningIdAsync","id","setAsync","catch","getCodeSigningInfoForPbxproj","projectRoot","project","IOSConfig","XcodeUtils","getPbxproj","nativeTarget","findFirstNativeTarget","developmentTeams","provisioningProfiles","getBuildConfigurationForId","buildConfigurationList","filter","item","buildSettings","PRODUCT_NAME","forEach","DEVELOPMENT_TEAM","PROVISIONING_PROFILE","push","setAutoCodeSigningInfoForPbxproj","appleTeamId","nativeTargetId","CODE_SIGN_IDENTITY","CODE_SIGN_STYLE","Object","entries","getProjectSection","isNotComment","attributes","TargetAttributes","DevelopmentTeam","ProvisioningStyle","fs","writeFileSync","filepath","writeSync","ensureDeviceIsCodeSignedForDeploymentAsync","length","Log","log","chalk","dim","Security","assertInstalledAsync","ids","findIdentitiesAsync","selectCertificateSigningIdentityAsync","codeSigningInfo","sortDefaultIdToBeginningAsync","identities","lastSelected","iterations","signingCertificateId","shift","addNewLineIfNone","newLine","CommandError","program","nonInteractive","resolveCertificateSigningInfoAsync","preferred","resolveIdentitiesAsync","index","message","choices","map","value","i","format","bold","title","appleTeamName","join","selected"],"mappings":"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","sourcesContent":["import { IOSConfig } from '@expo/config-plugins';\nimport chalk from 'chalk';\nimport program from 'commander';\nimport * as fs from 'fs-extra';\nimport { UserSettings } from 'xdl';\n\nimport CommandError from '../../../CommandError';\nimport Log from '../../../log';\nimport { selectAsync } from '../../../prompts';\nimport { learnMore } from '../../utils/TerminalLink';\nimport * as Security from '../utils/Security';\n\nasync function getLastDeveloperCodeSigningIdAsync() {\n  const { developmentCodeSigningId } = await UserSettings.readAsync();\n  return developmentCodeSigningId;\n}\n\nasync function setLastDeveloperCodeSigningIdAsync(id: string) {\n  await UserSettings.setAsync('developmentCodeSigningId', id).catch(() => {});\n}\n\n/**\n * Find the development team and provisioning profile that's currently in use by the Xcode project.\n *\n * @param projectRoot\n * @returns\n */\nexport function getCodeSigningInfoForPbxproj(projectRoot: string) {\n  const project = IOSConfig.XcodeUtils.getPbxproj(projectRoot);\n  const [, nativeTarget] = IOSConfig.XcodeUtils.findFirstNativeTarget(project);\n\n  const developmentTeams: string[] = [];\n  const provisioningProfiles: string[] = [];\n\n  IOSConfig.XcodeUtils.getBuildConfigurationForId(project, nativeTarget.buildConfigurationList)\n    .filter(\n      ([, item]: IOSConfig.XcodeUtils.ConfigurationSectionEntry) => item.buildSettings.PRODUCT_NAME\n    )\n    .forEach(([, item]: IOSConfig.XcodeUtils.ConfigurationSectionEntry) => {\n      const { DEVELOPMENT_TEAM, PROVISIONING_PROFILE } = item.buildSettings;\n      if (typeof DEVELOPMENT_TEAM === 'string') {\n        developmentTeams.push(DEVELOPMENT_TEAM);\n      }\n      if (typeof PROVISIONING_PROFILE === 'string') {\n        provisioningProfiles.push(PROVISIONING_PROFILE);\n      }\n    });\n\n  return { developmentTeams, provisioningProfiles };\n}\n\n/**\n * Set the development team and configure the Xcode project for automatic code signing,\n * this helps us resolve the code signing on subsequent runs and emulates Xcode behavior.\n *\n * @param projectRoot\n * @param props.appleTeamId\n */\nfunction setAutoCodeSigningInfoForPbxproj(\n  projectRoot: string,\n  { appleTeamId }: { appleTeamId: string }\n): void {\n  const project = IOSConfig.XcodeUtils.getPbxproj(projectRoot);\n  const [nativeTargetId, nativeTarget] = IOSConfig.XcodeUtils.findFirstNativeTarget(project);\n\n  IOSConfig.XcodeUtils.getBuildConfigurationForId(project, nativeTarget.buildConfigurationList)\n    .filter(\n      ([, item]: IOSConfig.XcodeUtils.ConfigurationSectionEntry) => item.buildSettings.PRODUCT_NAME\n    )\n    .forEach(([, item]: IOSConfig.XcodeUtils.ConfigurationSectionEntry) => {\n      item.buildSettings.DEVELOPMENT_TEAM = appleTeamId;\n      item.buildSettings.CODE_SIGN_IDENTITY = '\"Apple Development\"';\n      item.buildSettings.CODE_SIGN_STYLE = 'Automatic';\n    });\n\n  Object.entries(IOSConfig.XcodeUtils.getProjectSection(project))\n    .filter(IOSConfig.XcodeUtils.isNotComment)\n    .forEach(([, item]: IOSConfig.XcodeUtils.ProjectSectionEntry) => {\n      item.attributes.TargetAttributes[nativeTargetId].DevelopmentTeam = appleTeamId;\n      item.attributes.TargetAttributes[nativeTargetId].ProvisioningStyle = 'Automatic';\n    });\n\n  fs.writeFileSync(project.filepath, project.writeSync());\n}\n\nexport async function ensureDeviceIsCodeSignedForDeploymentAsync(\n  projectRoot: string\n): Promise<string | null> {\n  // Check if the app already has a development team defined.\n  const { developmentTeams, provisioningProfiles } = getCodeSigningInfoForPbxproj(projectRoot);\n  if (developmentTeams.length) {\n    Log.log(chalk.dim`\\u203A Auto signing app using team: ${developmentTeams[0]}`);\n    return null;\n  }\n\n  if (provisioningProfiles.length) {\n    // this indicates that the user has manual code signing setup (possibly for production).\n    return null;\n  }\n\n  // Only assert if the project needs to be signed.\n  await Security.assertInstalledAsync();\n\n  const ids = await Security.findIdentitiesAsync();\n\n  const id = await selectCertificateSigningIdentityAsync(ids);\n\n  Log.log(`\\u203A Signing and building iOS app with: ${id.codeSigningInfo}`);\n\n  setAutoCodeSigningInfoForPbxproj(projectRoot, {\n    appleTeamId: id.appleTeamId!,\n  });\n  return id.appleTeamId!;\n}\n\n/**\n * Sort the code signing items so the last selected item (user's default) is the first suggested.\n */\nasync function sortDefaultIdToBeginningAsync(\n  identities: Security.CertificateSigningInfo[]\n): Promise<[Security.CertificateSigningInfo[], string | undefined]> {\n  const lastSelected = await getLastDeveloperCodeSigningIdAsync();\n\n  if (lastSelected) {\n    let iterations = 0;\n    while (identities[0].signingCertificateId !== lastSelected && iterations < identities.length) {\n      identities.push(identities.shift()!);\n      iterations++;\n    }\n  }\n  return [identities, lastSelected];\n}\n\nasync function selectCertificateSigningIdentityAsync(ids: string[]) {\n  // The user has no valid code signing identities.\n  if (!ids.length) {\n    // TODO: We can probably do this too.\n    Log.addNewLineIfNone();\n    Log.log(\n      `\\u203A Your computer requires some additional setup before you can build onto physical iOS devices. ${learnMore(\n        'https://expo.fyi/setup-xcode-signing'\n      )}`\n    );\n    Log.newLine();\n    throw new CommandError('No code signing certificates are available to use.');\n  }\n\n  //  One ID available 🤝 Program is not interactive\n  //\n  //     using the the first available option\n  if (ids.length === 1 || program.nonInteractive) {\n    return Security.resolveCertificateSigningInfoAsync(ids[0]);\n  }\n\n  // Get identities and sort by the one that the user is most likely to choose.\n  const [identities, preferred] = await sortDefaultIdToBeginningAsync(\n    await Security.resolveIdentitiesAsync(ids)\n  );\n\n  const index = await selectAsync({\n    message: 'Development team for signing the app',\n    choices: identities.map((value, i) => {\n      const format =\n        value.signingCertificateId === preferred ? chalk.bold : (message: string) => message;\n      return {\n        // Formatted like: `650 Industries, Inc. (A1BCDEF234) - Apple Development: Evan Bacon (AA00AABB0A)`\n        title: format(\n          [value.appleTeamName, `(${value.appleTeamId}) -`, value.codeSigningInfo].join(' ')\n        ),\n        value: i,\n      };\n    }),\n  });\n\n  const selected = identities[index];\n\n  // Store the last used value and suggest it as the first value\n  // next time the user has to select a code signing identity.\n  await setLastDeveloperCodeSigningIdAsync(selected.signingCertificateId);\n\n  return selected;\n}\n"],"file":"developmentCodeSigning.js"}