{"version":3,"sources":["../../../../src/commands/run/ios/ExpoLogFormatter.ts"],"names":["ERROR","moduleNameFromPath","modulePath","startsWith","org","packageName","split","join","getNodeModuleName","filePath","CustomParser","Parser","constructor","formatter","parse","text","results","checkMetroError","isCollectingMetroError","metroError","formatMetroAssetCollectionError","length","match","trim","push","ExpoLogFormatter","Formatter","props","parser","errorContents","chalk","red","errors","shouldShowCompileWarning","lineNumber","columnNumber","Log","isDebug","formatCompile","fileName","moduleName","moduleNameTag","dim","undefined","bold","filter","Boolean","finish","log","warnings"],"mappings":"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","sourcesContent":["import { Formatter, Parser } from '@expo/xcpretty';\nimport { switchRegex } from '@expo/xcpretty/build/switchRegex';\nimport chalk from 'chalk';\n\nimport Log from '../../../log';\n\nconst ERROR = '❌ ';\n\nfunction moduleNameFromPath(modulePath: string) {\n  if (modulePath.startsWith('@')) {\n    const [org, packageName] = modulePath.split('/');\n    if (org && packageName) {\n      return [org, packageName].join('/');\n    }\n    return modulePath;\n  }\n  const [packageName] = modulePath.split('/');\n  return packageName ? packageName : modulePath;\n}\n\nfunction getNodeModuleName(filePath: string): string | null {\n  // '/Users/evanbacon/Documents/GitHub/lab/yolo5/node_modules/react-native-reanimated/ios/Nodes/REACallFuncNode.m'\n  const [, modulePath] = filePath.split('/node_modules/');\n  if (modulePath) {\n    return moduleNameFromPath(modulePath);\n  }\n  return null;\n}\n\nclass CustomParser extends Parser {\n  private isCollectingMetroError = false;\n  private metroError: string[] = [];\n\n  constructor(public formatter: ExpoLogFormatter) {\n    super(formatter);\n  }\n\n  parse(text: string): void | string {\n    const results = this.checkMetroError(text);\n    if (results) {\n      return results;\n    }\n    return super.parse(text);\n  }\n\n  // Error for the build script wrapper in expo-updates that catches metro bundler errors.\n  // This can be repro'd by importing a file that doesn't exist, then building.\n  // Metro will fail to generate the JS bundle, and throw an error that should be caught here.\n  checkMetroError(text: string) {\n    // In expo-updates, we wrap the bundler script and add regex around the error message so we can present it nicely to the user.\n    return switchRegex(text, [\n      [\n        /@build-script-error-begin/m,\n        () => {\n          this.isCollectingMetroError = true;\n        },\n      ],\n      [\n        /@build-script-error-end/m,\n        () => {\n          const results = this.metroError.join('\\n');\n          // Reset the metro collection error array (should never need this).\n          this.isCollectingMetroError = false;\n          this.metroError = [];\n          return this.formatter.formatMetroAssetCollectionError(results);\n        },\n      ],\n      [\n        null,\n        () => {\n          // Collect all the lines in the metro build error\n          if (this.isCollectingMetroError) {\n            let results = text;\n            if (!this.metroError.length) {\n              const match = text.match(\n                /Error loading assets JSON from Metro.*steps correctly.((.|\\n)*)/m\n              );\n              if (match && match[1]) {\n                results = match[1].trim();\n              }\n            }\n            this.metroError.push(results);\n          }\n        },\n      ],\n    ]);\n  }\n}\n\nexport class ExpoLogFormatter extends Formatter {\n  constructor(props: { projectRoot: string }) {\n    super(props);\n    this.parser = new CustomParser(this);\n  }\n\n  formatMetroAssetCollectionError(errorContents: string): string {\n    const results = `\\n${chalk.red(\n      ERROR +\n        // Provide proper attribution.\n        'Metro encountered an error:\\n' +\n        errorContents\n    )}\\n`;\n    this.errors.push(results);\n    return results;\n  }\n\n  shouldShowCompileWarning(filePath: string, lineNumber?: string, columnNumber?: string): boolean {\n    if (Log.isDebug) return true;\n    return !filePath.match(/node_modules/) && !filePath.match(/\\/ios\\/Pods\\//);\n  }\n\n  formatCompile(fileName: string, filePath: string): string {\n    const moduleName = getNodeModuleName(filePath);\n    const moduleNameTag = moduleName ? chalk.dim(`(${moduleName})`) : undefined;\n    return ['\\u203A', chalk.bold('Compiling'), fileName, moduleNameTag].filter(Boolean).join(' ');\n  }\n\n  finish() {\n    Log.log(`\\n\\u203A ${this.errors.length} error(s), and ${this.warnings.length} warning(s)\\n`);\n  }\n}\n"],"file":"ExpoLogFormatter.js"}