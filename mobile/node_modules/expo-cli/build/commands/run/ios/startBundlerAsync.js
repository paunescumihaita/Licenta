"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startBundlerAsync = startBundlerAsync;

function _xdl() {
  const data = require("xdl");

  _xdl = function () {
    return data;
  };

  return data;
}

function _schemes() {
  const data = require("../../../schemes");

  _schemes = function () {
    return data;
  };

  return data;
}

function TerminalUI() {
  const data = _interopRequireWildcard(require("../../start/TerminalUI"));

  TerminalUI = function () {
    return data;
  };

  return data;
}

function _installExitHooks() {
  const data = require("../../start/installExitHooks");

  _installExitHooks = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

async function startBundlerAsync(projectRoot) {
  // Add clean up hooks
  (0, _installExitHooks().installExitHooks)(projectRoot); // This basically means don't use the Client app.

  const devClient = true;

  try {
    await _xdl().ProjectSettings.setAsync(projectRoot, {
      devClient,
      scheme: await (0, _schemes().getDevClientSchemeAsync)(projectRoot)
    });
  } catch (_unused) {// TODO: add a scheme automatically.
  }

  await _xdl().Project.startAsync(projectRoot, {
    devClient
  });
  await TerminalUI().startAsync(projectRoot, {
    devClient
  });
}
//# sourceMappingURL=startBundlerAsync.js.map