{"version":3,"sources":["../../../../src/commands/run/android/runAndroid.ts"],"names":["resolveAndroidProjectPathAsync","projectRoot","AndroidConfig","Paths","getProjectPathOrThrowAsync","install","platforms","resolveOptionsAsync","options","variant","CommandError","device","filePath","getAndroidManifestAsync","androidManifest","Manifest","readAndroidManifestAsync","getMainActivityOrThrow","mainActivity","packageName","manifest","$","package","port","bundler","toLowerCase","apkDirectory","Android","getAPKDirectory","apkVariantDirectory","path","join","variantFolder","appName","runAndroidActionAsync","props","Log","log","androidProjectPath","apkFile","getInstallApkNameAsync","debug","binaryPath","installOnDeviceAsync","openAppAsync","nested","chalk","dim","availableCPUs","getDeviceABIsAsync","push","DeviceABI","universal","availableCPU","apkName","fs","existsSync"],"mappings":"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","sourcesContent":["import { AndroidConfig } from '@expo/config-plugins';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\nimport { Android } from 'xdl';\n\nimport CommandError from '../../../CommandError';\nimport Log from '../../../log';\nimport { prebuildAsync } from '../../eject/prebuildAsync';\nimport { startBundlerAsync } from '../ios/startBundlerAsync';\nimport { resolvePortAsync } from '../utils/resolvePortAsync';\nimport { resolveDeviceAsync } from './resolveDeviceAsync';\nimport { spawnGradleAsync } from './spawnGradleAsync';\n\ntype Options = {\n  variant: string;\n  device?: boolean | string;\n  port?: number;\n  bundler?: boolean;\n};\n\nexport type AndroidRunOptions = Omit<Options, 'device'> & {\n  apkVariantDirectory: string;\n  packageName: string;\n  mainActivity: string;\n  device: Android.Device;\n  variantFolder: string;\n  appName: string;\n};\n\nasync function resolveAndroidProjectPathAsync(projectRoot: string): Promise<string> {\n  try {\n    return await AndroidConfig.Paths.getProjectPathOrThrowAsync(projectRoot);\n  } catch {\n    // If the project doesn't have native code, prebuild it...\n    await prebuildAsync(projectRoot, {\n      install: true,\n      platforms: ['android'],\n    });\n    return await AndroidConfig.Paths.getProjectPathOrThrowAsync(projectRoot);\n  }\n}\n\nasync function resolveOptionsAsync(\n  projectRoot: string,\n  options: Options\n): Promise<AndroidRunOptions> {\n  if (typeof options.variant !== 'string') {\n    throw new CommandError('--variant must be a string');\n  }\n  const device = await resolveDeviceAsync(options.device);\n  if (!device) {\n    throw new CommandError('Cannot resolve an Android device');\n  }\n\n  const filePath = await AndroidConfig.Paths.getAndroidManifestAsync(projectRoot);\n  const androidManifest = await AndroidConfig.Manifest.readAndroidManifestAsync(filePath);\n\n  // Assert MainActivity defined.\n  await AndroidConfig.Manifest.getMainActivityOrThrow(androidManifest);\n  const mainActivity = 'MainActivity';\n  const packageName = androidManifest.manifest.$.package;\n\n  if (!packageName) {\n    throw new CommandError(`Could not find package name in AndroidManifest.xml at \"${filePath}\"`);\n  }\n\n  let port = await resolvePortAsync(projectRoot, options.port);\n  options.bundler = !!port;\n  if (!port) {\n    // Skip bundling if the port is null\n    // any random number\n    port = 8081;\n  }\n\n  const variant = options.variant.toLowerCase();\n  const apkDirectory = Android.getAPKDirectory(projectRoot);\n  const apkVariantDirectory = path.join(apkDirectory, variant);\n\n  return {\n    ...options,\n    port,\n    device,\n    mainActivity,\n    packageName,\n    apkVariantDirectory,\n    variantFolder: variant,\n    appName: 'app',\n  };\n}\n\nexport async function runAndroidActionAsync(projectRoot: string, options: Options) {\n  const props = await resolveOptionsAsync(projectRoot, options);\n\n  Log.log('\\u203A Building app...');\n\n  const androidProjectPath = await resolveAndroidProjectPathAsync(projectRoot);\n\n  await spawnGradleAsync({ androidProjectPath, variant: options.variant });\n\n  if (props.bundler) {\n    await startBundlerAsync(projectRoot);\n  }\n\n  const apkFile = await getInstallApkNameAsync(props.device, props);\n  Log.debug(`\\u203A Installing: ${apkFile}`);\n\n  const binaryPath = path.join(props.apkVariantDirectory, apkFile);\n  await Android.installOnDeviceAsync(props.device, { binaryPath });\n  // For now, just open the app with a matching package name\n  await Android.openAppAsync(props.device, props);\n\n  if (props.bundler) {\n    // TODO: unify logs\n    Log.nested(\n      `\\nLogs for your project will appear in the browser console. ${chalk.dim(\n        `Press Ctrl+C to exit.`\n      )}`\n    );\n  }\n}\n\nasync function getInstallApkNameAsync(\n  device: Android.Device,\n  {\n    appName,\n    variantFolder,\n    apkVariantDirectory,\n  }: Pick<AndroidRunOptions, 'appName' | 'variantFolder' | 'apkVariantDirectory'>\n) {\n  const availableCPUs = await Android.getDeviceABIsAsync(device);\n  availableCPUs.push(Android.DeviceABI.universal);\n\n  Log.debug('Supported ABIs: ' + availableCPUs.join(', '));\n  Log.debug('Searching for APK: ' + apkVariantDirectory);\n\n  // Check for cpu specific builds first\n  for (const availableCPU of availableCPUs) {\n    const apkName = `${appName}-${availableCPU}-${variantFolder}.apk`;\n    if (fs.existsSync(path.join(apkVariantDirectory, apkName))) {\n      return apkName;\n    }\n  }\n\n  // Otherwise use the default apk named after the variant: app-debug.apk\n  const apkName = `${appName}-${variantFolder}.apk`;\n  if (fs.existsSync(path.join(apkVariantDirectory, apkName))) {\n    return apkName;\n  }\n\n  throw new CommandError(`Failed to resolve APK build file in folder \"${apkVariantDirectory}\"`);\n}\n"],"file":"runAndroid.js"}