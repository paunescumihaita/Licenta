{"version":3,"sources":["../../../src/commands/eject/clearNativeFolder.ts"],"names":["directoryExistsAsync","file","fs","stat","catch","isDirectory","clearNativeFolder","projectRoot","folders","step","CreateApp","logNewSection","join","Promise","all","map","folderName","remove","path","succeed","error","fail","message","hasRequiredAndroidFilesAsync","AndroidConfig","Paths","getAppBuildGradleAsync","getProjectBuildGradleAsync","getAndroidManifestAsync","getMainApplicationAsync","isAndroidProjectValidAsync","hasRequiredIOSFilesAsync","IOSConfig","getAppDelegate","getAllXcodeProjectPaths","getAllInfoPlistPaths","getAllPBXProjectPaths","isIOSProjectValidAsync","promptToClearMalformedNativeProjectsAsync","isAndroidValid","isIOSValid","platforms","filter","Boolean","displayPlatforms","platform","chalk","cyan","length","program","nonInteractive","initial","Log","warn"],"mappings":"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","sourcesContent":["import { AndroidConfig, IOSConfig } from '@expo/config-plugins';\nimport chalk from 'chalk';\nimport program from 'commander';\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\n\nimport Log from '../../log';\nimport { confirmAsync } from '../../prompts';\nimport * as CreateApp from '../utils/CreateApp';\n\nexport async function directoryExistsAsync(file: string): Promise<boolean> {\n  return (await fs.stat(file).catch(() => null))?.isDirectory() ?? false;\n}\n\nexport async function clearNativeFolder(projectRoot: string, folders: string[]) {\n  const step = CreateApp.logNewSection(`Clearing ${folders.join(', ')}`);\n  try {\n    await Promise.all(folders.map(folderName => fs.remove(path.join(projectRoot, folderName))));\n    step.succeed(`Cleared ${folders.join(', ')} code`);\n  } catch (error) {\n    step.fail(`Failed to delete ${folders.join(', ')} code: ${error.message}`);\n    throw error;\n  }\n}\n\nexport async function hasRequiredAndroidFilesAsync(projectRoot: string) {\n  try {\n    await Promise.all([\n      AndroidConfig.Paths.getAppBuildGradleAsync(projectRoot),\n      AndroidConfig.Paths.getProjectBuildGradleAsync(projectRoot),\n      AndroidConfig.Paths.getAndroidManifestAsync(projectRoot),\n      AndroidConfig.Paths.getMainApplicationAsync(projectRoot),\n    ]);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nasync function isAndroidProjectValidAsync(projectRoot: string) {\n  // Only perform the check if the native folder is present.\n  if (!(await directoryExistsAsync(path.join(projectRoot, 'android')))) {\n    return true;\n  }\n  return hasRequiredAndroidFilesAsync(projectRoot);\n}\n\nexport async function hasRequiredIOSFilesAsync(projectRoot: string) {\n  try {\n    // If any of the following required files are missing, then the project is malformed.\n    await Promise.all([\n      IOSConfig.Paths.getAppDelegate(projectRoot),\n      IOSConfig.Paths.getAllXcodeProjectPaths(projectRoot),\n      IOSConfig.Paths.getAllInfoPlistPaths(projectRoot),\n      IOSConfig.Paths.getAllPBXProjectPaths(projectRoot),\n    ]);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nasync function isIOSProjectValidAsync(projectRoot: string) {\n  // Only perform the check if the native folder is present.\n  if (!(await directoryExistsAsync(path.join(projectRoot, 'ios')))) {\n    return true;\n  }\n  return hasRequiredIOSFilesAsync(projectRoot);\n}\n\nexport async function promptToClearMalformedNativeProjectsAsync(projectRoot: string) {\n  const [isAndroidValid, isIOSValid] = await Promise.all([\n    isAndroidProjectValidAsync(projectRoot),\n    isIOSProjectValidAsync(projectRoot),\n  ]);\n\n  if (isAndroidValid && isIOSValid) {\n    return;\n  }\n\n  const platforms = [!isAndroidValid && 'android', !isIOSValid && 'ios'].filter(\n    Boolean\n  ) as string[];\n\n  const displayPlatforms = platforms.map(platform => chalk.cyan(platform));\n  // Prompt which platforms to reset.\n  const message =\n    platforms.length > 1\n      ? `The ${displayPlatforms[0]} and ${displayPlatforms[1]} projects are malformed`\n      : `The ${displayPlatforms[0]} project is malformed`;\n\n  if (\n    // If the process is non-interactive, default to clearing the malformed native project.\n    // This would only happen on re-running eject.\n    program.nonInteractive ||\n    // Prompt to clear the native folders.\n    (await confirmAsync({\n      message: `${message}, would you like to clear the project files and reinitialize them?`,\n      initial: true,\n    }))\n  ) {\n    await clearNativeFolder(projectRoot, platforms);\n  } else {\n    // Warn the user that the process may fail.\n    Log.warn('Continuing with malformed native projects');\n  }\n}\n"],"file":"clearNativeFolder.js"}