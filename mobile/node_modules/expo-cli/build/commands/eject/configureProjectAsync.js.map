{"version":3,"sources":["../../../src/commands/eject/configureProjectAsync.ts"],"names":["expoManagedPlugins","expoManagedVersionedPlugins","withOptionalPlugins","config","plugins","reduce","prev","plugin","_isLegacyPlugin","fallback","withManagedPlugins","Set","concat","getModdedConfigAsync","projectRoot","platforms","bundleIdentifier","packageName","exp","rest","skipSDKVersionRequirement","isModdedConfig","expoUsername","process","env","EAS_BUILD_USERNAME","UserManager","getCurrentUsernameAsync","includes","ios","android","package","logConfig","isObjStr","str","test","Log","log","util","inspect","colors","compact","sorted","a","b","showHidden","depth","configureManagedProjectAsync","isDebug","debug"],"mappings":"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","sourcesContent":["import { ExpoConfig, getConfig, ProjectConfig } from '@expo/config';\nimport {\n  compileModsAsync,\n  ConfigPlugin,\n  ModPlatform,\n  StaticPlugin,\n  withExpoAndroidPlugins,\n  withExpoIOSPlugins,\n  withExpoVersionedSDKPlugins,\n  withStaticPlugin,\n} from '@expo/config-plugins';\nimport util from 'util';\nimport { UserManager } from 'xdl';\n\nimport Log from '../../log';\nimport { getOrPromptForBundleIdentifier, getOrPromptForPackage } from './ConfigValidation';\n\n// Expo managed packages that require extra update.\n// These get applied automatically to create parity with expo build in eas build.\nexport const expoManagedPlugins = [\n  'expo-app-auth',\n  'expo-av',\n  'expo-background-fetch',\n  'expo-barcode-scanner',\n  'expo-brightness',\n  'expo-calendar',\n  'expo-camera',\n  'expo-contacts',\n  'expo-image-picker',\n  'expo-file-system',\n  'expo-ads-facebook',\n  'expo-location',\n  'expo-media-library',\n  // 'expo-notifications',\n  'expo-screen-orientation',\n  'expo-sensors',\n  'expo-task-manager',\n  'expo-local-authentication',\n];\n\n// Plugins that need to be automatically applied, but also get applied by expo-cli if the versioned plugin isn't available.\n// These are split up because the user doesn't need to be prompted to setup these packages.\nconst expoManagedVersionedPlugins = [\n  // 'expo-splash-screen',\n  // 'expo-facebook',\n  // 'expo-branch',\n  // 'expo-updates',\n  // 'expo-ads-admob',\n  'expo-apple-authentication',\n  'expo-document-picker',\n  'expo-firebase-analytics',\n  'expo-firebase-core',\n  'expo-google-sign-in',\n  // 'expo-dev-menu',\n  // 'expo-dev-launcher',\n];\n\nconst withOptionalPlugins: ConfigPlugin<(StaticPlugin | string)[]> = (config, plugins) => {\n  return plugins.reduce((prev, plugin) => {\n    return withStaticPlugin(prev, {\n      // hide errors\n      _isLegacyPlugin: true,\n      plugin,\n      // If a plugin doesn't exist, do nothing.\n      fallback: config => config,\n    });\n  }, config);\n};\n\nfunction withManagedPlugins(config: ExpoConfig) {\n  return withOptionalPlugins(config, [\n    ...new Set(expoManagedVersionedPlugins.concat(expoManagedPlugins)),\n  ]);\n}\n\nexport async function getModdedConfigAsync({\n  projectRoot,\n  platforms,\n  bundleIdentifier,\n  packageName,\n}: {\n  projectRoot: string;\n  bundleIdentifier?: string;\n  packageName?: string;\n  platforms: ModPlatform[];\n}) {\n  // let config: ExpoConfig;\n  let { exp: config, ...rest } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n    isModdedConfig: true,\n  });\n\n  const expoUsername =\n    process.env.EAS_BUILD_USERNAME || (await UserManager.getCurrentUsernameAsync());\n  // Add all built-in plugins first because they should take\n  // priority over the unversioned plugins.\n  config = withExpoVersionedSDKPlugins(config, { expoUsername });\n  config = withManagedPlugins(config);\n\n  if (platforms.includes('ios')) {\n    config.ios!.bundleIdentifier =\n      bundleIdentifier ?? config.ios!.bundleIdentifier ?? 'UNDEFINED (invalid)';\n\n    // Add all built-in plugins\n    config = withExpoIOSPlugins(config, {\n      bundleIdentifier: config.ios!.bundleIdentifier,\n    });\n  }\n\n  if (platforms.includes('android')) {\n    config.android!.package = packageName ?? config.android?.package ?? 'UNDEFINED (invalid)';\n\n    // Add all built-in plugins\n    config = withExpoAndroidPlugins(config, {\n      package: config.android!.package,\n    });\n  }\n\n  return { exp: config, ...rest };\n}\n\nexport function logConfig(config: ExpoConfig | ProjectConfig) {\n  const isObjStr = (str: string): boolean => /^\\w+: {/g.test(str);\n  Log.log(\n    util.inspect(config, {\n      colors: true,\n      compact: false,\n      // Sort objects to the end so that smaller values aren't hidden between large objects.\n      sorted(a: string, b: string) {\n        if (isObjStr(a)) return 1;\n        if (isObjStr(b)) return -1;\n        return 0;\n      },\n      showHidden: false,\n      depth: null,\n    })\n  );\n}\n\nexport default async function configureManagedProjectAsync({\n  projectRoot,\n  platforms,\n}: {\n  projectRoot: string;\n  platforms: ModPlatform[];\n}) {\n  let bundleIdentifier: string | undefined;\n  if (platforms.includes('ios')) {\n    // Check bundle ID before reading the config because it may mutate the config if the user is prompted to define it.\n    bundleIdentifier = await getOrPromptForBundleIdentifier(projectRoot);\n  }\n  let packageName: string | undefined;\n  if (platforms.includes('android')) {\n    // Check package before reading the config because it may mutate the config if the user is prompted to define it.\n    packageName = await getOrPromptForPackage(projectRoot);\n  }\n\n  let { exp: config } = await getModdedConfigAsync({\n    projectRoot,\n    platforms,\n    packageName,\n    bundleIdentifier,\n  });\n\n  // compile all plugins and mods\n  config = await compileModsAsync(config, { projectRoot, platforms });\n\n  if (Log.isDebug) {\n    Log.debug();\n    Log.debug('Evaluated config:');\n    logConfig(config);\n    Log.debug();\n  }\n\n  return config;\n}\n"],"file":"configureProjectAsync.js"}