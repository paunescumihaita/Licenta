{"version":3,"sources":["../../../src/commands/export/exportAppAsync.ts"],"names":["ANONYMOUS_USERNAME","bundlePlatforms","exportAppAsync","projectRoot","publicUrl","assetUrl","outputDir","options","experimentalBundle","absoluteOutputDir","path","resolve","process","cwd","defaultTarget","target","publishOptions","Log","isDebug","newLine","log","assetPathToWrite","join","fs","ensureDir","bundlesPathToWrite","exp","pkg","hooks","Project","getPublishExpConfigAsync","bundles","createBundlesAsync","dev","isDev","useDevServer","Env","shouldUseDevServer","iosBundle","ios","code","androidBundle","android","iosBundleHash","crypto","createHash","update","digest","iosBundleUrl","iosJsPath","androidBundleHash","androidBundleUrl","androidJsPath","relativeBundlePaths","writeArtifactSafelyAsync","assets","ProjectAssets","exportAssetsAsync","hostedUrl","assetPath","fileMetadata","forEach","platform","asset","fileHashes","map","hash","ext","type","bundle","metadata","version","bundler","writeFileSync","JSON","stringify","dumpAssetmap","assetmap","iosSourceMap","androidSourceMap","dumpSourcemap","iosMapName","iosMapPath","androidMapName","androidMapPath","semver","lt","sdkVersion","truncateLastNLines","appendFile","debugHtml","validPostExportHooks","prepareHooks","assetUrlOverride","publishedTime","Date","toISOString","commitTime","releaseId","hashIds","HashIds","revisionId","encode","now","developer","tool","slug","XDLError","username","UserManager","getCurrentUsernameAsync","id","androidManifest","bundleUrl","dependencies","Object","keys","iosManifest","hookOptions","url","msg","info","hook","file","runHook","e","warn","stack","EmbeddedAssets","configureAsync","iosManifestUrl","androidManifestUrl","filePath","n","lines","readLastLines","read","to_vanquish","length","size","stat","truncate"],"mappings":"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","sourcesContent":["import { getDefaultTarget } from '@expo/config';\nimport assert from 'assert';\nimport crypto from 'crypto';\nimport fs from 'fs-extra';\nimport HashIds from 'hashids';\nimport path from 'path';\nimport readLastLines from 'read-last-lines';\nimport semver from 'semver';\nimport urljoin from 'url-join';\nimport { v1 as uuidv1, v4 as uuidv4 } from 'uuid';\nimport { EmbeddedAssets, Env, Project, ProjectAssets, UserManager, XDLError } from 'xdl';\n\nimport Log from '../../log';\n\nexport const ANONYMOUS_USERNAME = 'anonymous';\n\nconst bundlePlatforms: BundlePlatform[] = ['android', 'ios'];\n\ntype BundlePlatform = 'android' | 'ios';\n\ntype PlatformMetadata = { bundle: string; assets: { path: string; ext: string }[] };\n\ntype FileMetadata = {\n  [key in BundlePlatform]: PlatformMetadata;\n};\n\ntype Metadata = {\n  version: 0;\n  bundler: 'metro';\n  fileMetadata: FileMetadata;\n};\n\n/**\n * If the `eas` flag is true, the stucture of the outputDir will be:\n├── assets\n│   └── *\n├── bundles\n│   ├── android-01ee6e3ab3e8c16a4d926c91808d5320.js\n│   └── ios-ee8206cc754d3f7aa9123b7f909d94ea.js\n└── metadata.json\n\n * If the `eas` flag is not true, then this function is for self hosting \n * and the outputDir will have the files created in the project directory the following way:\n.\n├── android-index.json\n├── ios-index.json\n├── assets\n│   └── 1eccbc4c41d49fd81840aef3eaabe862\n└── bundles\n      ├── android-01ee6e3ab3e8c16a4d926c91808d5320.js\n      └── ios-ee8206cc754d3f7aa9123b7f909d94ea.js\n */\nexport async function exportAppAsync(\n  projectRoot: string,\n  publicUrl: string,\n  assetUrl: string,\n  outputDir: string,\n  options: {\n    isDev?: boolean;\n    dumpAssetmap?: boolean;\n    dumpSourcemap?: boolean;\n    publishOptions?: Project.PublishOptions;\n  } = {},\n  experimentalBundle: boolean\n): Promise<void> {\n  const absoluteOutputDir = path.resolve(process.cwd(), outputDir);\n  const defaultTarget = getDefaultTarget(projectRoot);\n  const target = options.publishOptions?.target ?? defaultTarget;\n\n  if (Log.isDebug) {\n    Log.newLine();\n    Log.log('Export Assets:');\n    Log.log(`- Asset target: ${target}`);\n    Log.newLine();\n  }\n\n  // build the bundles\n  // make output dirs if not exists\n  const assetPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'assets'));\n  await fs.ensureDir(assetPathToWrite);\n  const bundlesPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'bundles'));\n  await fs.ensureDir(bundlesPathToWrite);\n\n  const { exp, pkg, hooks } = await Project.getPublishExpConfigAsync(\n    projectRoot,\n    options.publishOptions || {}\n  );\n\n  const bundles = await Project.createBundlesAsync(projectRoot, options.publishOptions, {\n    dev: options.isDev,\n    useDevServer: Env.shouldUseDevServer(exp),\n  });\n  const iosBundle = bundles.ios.code;\n  const androidBundle = bundles.android.code;\n\n  const iosBundleHash = crypto.createHash('md5').update(iosBundle).digest('hex');\n  const iosBundleUrl = `ios-${iosBundleHash}.js`;\n  const iosJsPath = path.join(absoluteOutputDir, 'bundles', iosBundleUrl);\n\n  const androidBundleHash = crypto.createHash('md5').update(androidBundle).digest('hex');\n  const androidBundleUrl = `android-${androidBundleHash}.js`;\n  const androidJsPath = path.join(absoluteOutputDir, 'bundles', androidBundleUrl);\n\n  const relativeBundlePaths = {\n    android: path.join('bundles', androidBundleUrl),\n    ios: path.join('bundles', iosBundleUrl),\n  };\n\n  await Project.writeArtifactSafelyAsync(projectRoot, null, iosJsPath, iosBundle);\n  await Project.writeArtifactSafelyAsync(projectRoot, null, androidJsPath, androidBundle);\n\n  Log.log('Finished saving JS Bundles.');\n\n  const { assets } = await ProjectAssets.exportAssetsAsync({\n    projectRoot,\n    exp,\n    hostedUrl: publicUrl,\n    assetPath: 'assets',\n    outputDir: absoluteOutputDir,\n    bundles,\n    experimentalBundle,\n  });\n\n  if (experimentalBundle) {\n    // Build metadata.json\n    const fileMetadata: {\n      [key in BundlePlatform]: Partial<PlatformMetadata>;\n    } = { android: {}, ios: {} };\n    bundlePlatforms.forEach(platform => {\n      fileMetadata[platform].assets = [];\n      bundles[platform].assets.forEach((asset: { type: string; fileHashes: string[] }) => {\n        fileMetadata[platform].assets = [\n          ...fileMetadata[platform].assets!,\n          ...asset.fileHashes.map(hash => {\n            return { path: path.join('assets', hash), ext: asset.type };\n          }),\n        ];\n      });\n      fileMetadata[platform].bundle = relativeBundlePaths[platform];\n    });\n    const metadata: Metadata = {\n      version: 0,\n      bundler: 'metro',\n      fileMetadata: fileMetadata as FileMetadata,\n    };\n\n    fs.writeFileSync(path.resolve(outputDir, 'metadata.json'), JSON.stringify(metadata));\n  }\n\n  if (options.dumpAssetmap) {\n    Log.log('Dumping asset map.');\n\n    const assetmap: { [hash: string]: ProjectAssets.Asset } = {};\n\n    assets.forEach((asset: ProjectAssets.Asset) => {\n      assetmap[asset.hash] = asset;\n    });\n\n    await Project.writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(absoluteOutputDir, 'assetmap.json'),\n      JSON.stringify(assetmap)\n    );\n  }\n\n  const iosSourceMap = bundles.ios.map;\n  const androidSourceMap = bundles.android.map;\n\n  // build source maps\n  if (options.dumpSourcemap) {\n    // write the sourcemap files\n    const iosMapName = `ios-${iosBundleHash}.map`;\n    const iosMapPath = path.join(absoluteOutputDir, 'bundles', iosMapName);\n    await Project.writeArtifactSafelyAsync(projectRoot, null, iosMapPath, iosSourceMap);\n\n    const androidMapName = `android-${androidBundleHash}.map`;\n    const androidMapPath = path.join(absoluteOutputDir, 'bundles', androidMapName);\n    await Project.writeArtifactSafelyAsync(projectRoot, null, androidMapPath, androidSourceMap);\n\n    if (target === 'managed' && semver.lt(exp.sdkVersion, '40.0.0')) {\n      // Remove original mapping to incorrect sourcemap paths\n      // In SDK 40+ and bare projects, we no longer need to do this.\n      Log.log('Configuring source maps');\n      await truncateLastNLines(iosJsPath, 1);\n      await truncateLastNLines(androidJsPath, 1);\n    }\n\n    // Add correct mapping to sourcemap paths\n    await fs.appendFile(iosJsPath, `\\n//# sourceMappingURL=${iosMapName}`);\n    await fs.appendFile(androidJsPath, `\\n//# sourceMappingURL=${androidMapName}`);\n\n    // Make a debug html so user can debug their bundles\n    Log.log('Preparing additional debugging files');\n    const debugHtml = `\n      <script src=\"${urljoin('bundles', iosBundleUrl)}\"></script>\n      <script src=\"${urljoin('bundles', androidBundleUrl)}\"></script>\n      Open up this file in Chrome. In the Javascript developer console, navigate to the Source tab.\n      You can see a red coloured folder containing the original source code from your bundle.\n      `;\n\n    await Project.writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(absoluteOutputDir, 'debug.html'),\n      debugHtml\n    );\n  }\n\n  // Skip the hooks and manifest creation if building for EAS.\n  if (!experimentalBundle) {\n    const validPostExportHooks = Project.prepareHooks(hooks, 'postExport', projectRoot);\n\n    // Add assetUrl to manifest\n    exp.assetUrlOverride = assetUrl;\n\n    exp.publishedTime = new Date().toISOString();\n    exp.commitTime = new Date().toISOString();\n    exp.releaseId = uuidv4();\n\n    // generate revisionId and id the same way www does\n    const hashIds = new HashIds(uuidv1(), 10);\n    exp.revisionId = hashIds.encode(Date.now());\n\n    if (options.isDev) {\n      exp.developer = {\n        tool: 'exp',\n      };\n    }\n\n    if (!exp.slug) {\n      throw new XDLError('INVALID_MANIFEST', 'Must provide a slug field in the app.json manifest.');\n    }\n\n    let username = await UserManager.getCurrentUsernameAsync();\n\n    if (!username) {\n      username = ANONYMOUS_USERNAME;\n    }\n\n    exp.id = `@${username}/${exp.slug}`;\n\n    // save the android manifest\n    const androidManifest = {\n      ...exp,\n      bundleUrl: urljoin(publicUrl, 'bundles', androidBundleUrl),\n      platform: 'android',\n      dependencies: Object.keys(pkg.dependencies),\n    };\n\n    await Project.writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(absoluteOutputDir, 'android-index.json'),\n      JSON.stringify(androidManifest)\n    );\n\n    // save the ios manifest\n    const iosManifest = {\n      ...exp,\n      bundleUrl: urljoin(publicUrl, 'bundles', iosBundleUrl),\n      platform: 'ios',\n      dependencies: Object.keys(pkg.dependencies),\n    };\n\n    await Project.writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(absoluteOutputDir, 'ios-index.json'),\n      JSON.stringify(iosManifest)\n    );\n\n    assert(androidManifest!, 'should have been assigned');\n    assert(iosManifest!, 'should have been assigned');\n    const hookOptions = {\n      url: null,\n      exp,\n      iosBundle,\n      iosSourceMap,\n      iosManifest,\n      androidBundle,\n      androidSourceMap,\n      androidManifest,\n      projectRoot,\n      log: (msg: any) => {\n        Log.info(msg);\n        // logger.global.info({ quiet: true }, msg);\n      },\n    };\n\n    for (const hook of validPostExportHooks) {\n      Log.log(`Running postExport hook: ${hook.file}`);\n\n      try {\n        Project.runHook(hook, hookOptions);\n      } catch (e) {\n        Log.warn(`Warning: postExport hook '${hook.file}' failed: ${e.stack}`);\n      }\n    }\n\n    // configure embedded assets for expo-updates or ExpoKit\n    await EmbeddedAssets.configureAsync({\n      projectRoot,\n      pkg,\n      exp,\n      iosManifestUrl: urljoin(publicUrl, 'ios-index.json'),\n      iosManifest,\n      iosBundle,\n      iosSourceMap,\n      androidManifestUrl: urljoin(publicUrl, 'android-index.json'),\n      androidManifest,\n      androidBundle,\n      androidSourceMap,\n      target,\n    });\n  }\n}\n\n// truncate the last n lines in a file\nasync function truncateLastNLines(filePath: string, n: number) {\n  const lines = await readLastLines.read(filePath, n);\n  const to_vanquish = lines.length;\n  const { size } = await fs.stat(filePath);\n  await fs.truncate(filePath, size - to_vanquish);\n}\n"],"file":"exportAppAsync.js"}