{"version":3,"sources":["../../src/utils/ora.ts"],"names":["ora","options","inputOptions","text","disabled","program","nonInteractive","isEnabled","stream","process","stdout","stderr"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA;AACO,SAASA,GAAT,CAAaC,OAAb,EAA8D;AACnE,QAAMC,YAAY,GAAG,OAAOD,OAAP,KAAmB,QAAnB,GAA8B;AAAEE,IAAAA,IAAI,EAAEF;AAAR,GAA9B,GAAkDA,OAAO,IAAI,EAAlF;;AACA,QAAMG,QAAQ,GAAGC,qBAAQC,cAAzB;;AACA,SAAO,oBAAQ;AACb;AACAC,IAAAA,SAAS,EAAE,CAACH,QAFC;AAGb;AACAI,IAAAA,MAAM,EAAEJ,QAAQ,GAAGK,OAAO,CAACC,MAAX,GAAoBD,OAAO,CAACE,MAJ/B;AAKb,OAAGT;AALU,GAAR,CAAP;AAOD","sourcesContent":["import program from 'commander';\nimport oraReal from 'ora';\n\n// A custom ora spinner that sends the stream to stdout in CI, non-TTY, or expo's non-interactive flag instead of stderr (the default).\nexport function ora(options?: oraReal.Options | string): oraReal.Ora {\n  const inputOptions = typeof options === 'string' ? { text: options } : options || {};\n  const disabled = program.nonInteractive;\n  return oraReal({\n    // Ensure our non-interactive mode emulates CI mode.\n    isEnabled: !disabled,\n    // In non-interactive mode, send the stream to stdout so it prevents looking like an error.\n    stream: disabled ? process.stdout : process.stderr,\n    ...inputOptions,\n  });\n}\n"],"file":"ora.js"}