{"version":3,"file":"User.js","sourceRoot":"","sources":["../src/User.ts"],"names":[],"mappings":"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","sourcesContent":["import camelCase from 'lodash/camelCase';\nimport isEmpty from 'lodash/isEmpty';\nimport snakeCase from 'lodash/snakeCase';\n\nimport {\n  Analytics,\n  ApiV2 as ApiV2Client,\n  Config,\n  Logger,\n  Semaphore,\n  UserData,\n  UserSettings,\n  XDLError,\n} from './internal';\n\nexport type User = {\n  kind: 'user';\n  // required\n  username: string;\n  nickname: string;\n  userId: string;\n  picture: string;\n  // optional\n  email?: string;\n  emailVerified?: boolean;\n  givenName?: string;\n  familyName?: string;\n  userMetadata: {\n    onboarded: boolean;\n    legacy?: boolean;\n  };\n  // auth methods\n  currentConnection: ConnectionType;\n  sessionSecret?: string;\n  accessToken?: string;\n};\n\nexport type RobotUser = {\n  kind: 'robot';\n  // required\n  userId: string;\n  username: string; // backwards compatible to show in current UI -- based on given name or placeholder\n  // optional\n  givenName?: string;\n  // auth methods\n  currentConnection: ConnectionType;\n  sessionSecret?: never; // robot users only use accessToken -- this prevents some extraneous typecasting\n  accessToken?: string;\n};\n\nexport type LegacyUser = {\n  kind: 'legacyUser';\n  username: string;\n  userMetadata: {\n    legacy: boolean;\n    needsPasswordMigration: boolean;\n  };\n};\n\nexport type UserOrLegacyUser = User | LegacyUser;\n\nexport type ConnectionType =\n  | 'Access-Token-Authentication'\n  | 'Username-Password-Authentication'\n  | 'facebook'\n  | 'google-oauth2'\n  | 'github';\n\nexport type RegistrationData = {\n  username: string;\n  password: string;\n  email?: string;\n  givenName?: string;\n  familyName?: string;\n};\n\n// note: user-token isn't listed here because it's a non-persistent pre-authenticated method\nexport type LoginType = 'user-pass' | 'facebook' | 'google' | 'github';\n\nexport const ANONYMOUS_USERNAME = 'anonymous';\n\nexport class UserManagerInstance {\n  _currentUser: User | RobotUser | null = null;\n  _getSessionLock = new Semaphore();\n  _interactiveAuthenticationCallbackAsync?: () => Promise<User>;\n\n  static getGlobalInstance() {\n    if (!__globalInstance) {\n      __globalInstance = new UserManagerInstance();\n    }\n    return __globalInstance;\n  }\n\n  initialize() {\n    this._currentUser = null;\n    this._getSessionLock = new Semaphore();\n  }\n\n  /**\n   * Logs in a user for a given login type.\n   *\n   * Valid login types are:\n   *  - \"user-pass\": Username and password authentication\n   *\n   * If the login type is \"user-pass\", we directly make the request to www\n   * to login a user.\n   */\n  async loginAsync(\n    loginType: LoginType,\n    loginArgs?: { username: string; password: string; otp?: string }\n  ): Promise<User> {\n    if (loginType === 'user-pass') {\n      if (!loginArgs) {\n        throw new Error(`The 'user-pass' login type requires a username and password.`);\n      }\n      const apiAnonymous = ApiV2Client.clientForUser();\n      const loginResp = await apiAnonymous.postAsync('auth/loginAsync', {\n        username: loginArgs.username,\n        password: loginArgs.password,\n        otp: loginArgs.otp,\n      });\n      if (loginResp.error) {\n        throw new XDLError('INVALID_USERNAME_PASSWORD', loginResp['error_description']);\n      }\n      const user = await this._getProfileAsync({\n        currentConnection: 'Username-Password-Authentication',\n        sessionSecret: loginResp.sessionSecret,\n      });\n      return user as User;\n    } else {\n      throw new Error(`Invalid login type provided. Must be 'user-pass'.`);\n    }\n  }\n\n  async registerAsync(\n    userData: RegistrationData,\n    user: UserOrLegacyUser | null = null\n  ): Promise<User> {\n    let actor: UserOrLegacyUser | RobotUser | null = user;\n\n    if (!actor) {\n      actor = await this.getCurrentUserAsync();\n    }\n\n    if (actor) {\n      await this.logoutAsync();\n      actor = null;\n    }\n\n    try {\n      // Create or update the profile\n      let registeredUser = await this.createOrUpdateUserAsync({\n        connection: 'Username-Password-Authentication', // Always create/update username password\n        email: userData.email,\n        givenName: userData.givenName,\n        familyName: userData.familyName,\n        username: userData.username,\n        password: userData.password,\n      });\n\n      registeredUser = await this.loginAsync('user-pass', {\n        username: userData.username,\n        password: userData.password,\n      });\n\n      return registeredUser;\n    } catch (e) {\n      console.error(e);\n      throw new XDLError('REGISTRATION_ERROR', 'Error registering user: ' + e.message);\n    }\n  }\n\n  /**\n   * Ensure user is logged in and has a valid token.\n   *\n   * If there are any issues with the login, this method throws.\n   */\n  async ensureLoggedInAsync(): Promise<User | RobotUser> {\n    if (Config.offline) {\n      throw new XDLError('NETWORK_REQUIRED', \"Can't verify user without network access\");\n    }\n\n    let user = await this.getCurrentUserAsync({ silent: true });\n    if (!user && this._interactiveAuthenticationCallbackAsync) {\n      user = await this._interactiveAuthenticationCallbackAsync();\n    }\n    if (!user) {\n      throw new XDLError('NOT_LOGGED_IN', 'Not logged in');\n    }\n    return user;\n  }\n\n  setInteractiveAuthenticationCallback(callback: () => Promise<User>) {\n    this._interactiveAuthenticationCallbackAsync = callback;\n  }\n\n  async _readUserData(): Promise<UserData | null> {\n    let auth = await UserSettings.getAsync('auth', null);\n    if (isEmpty(auth)) {\n      // XXX(ville):\n      // We sometimes read an empty string from ~/.expo/state.json,\n      // even though it has valid credentials in it.\n      // We don't know why.\n      // An empty string can't be parsed as JSON, so an empty default object is returned.\n      // In this case, retrying usually helps.\n      auth = await UserSettings.getAsync('auth', null);\n    }\n    if (typeof auth === 'undefined') {\n      return null;\n    }\n    return auth;\n  }\n\n  /**\n   * Get the current user based on the available token.\n   * If there is no current token, returns null.\n   */\n  async getCurrentUserAsync(options?: { silent?: boolean }): Promise<User | RobotUser | null> {\n    await this._getSessionLock.acquire();\n\n    try {\n      const currentUser = this._currentUser;\n\n      // If user is cached and there is an accessToken or sessionSecret, return the user\n      if (currentUser && (currentUser.accessToken || currentUser.sessionSecret)) {\n        return currentUser;\n      }\n\n      if (Config.offline) {\n        return null;\n      }\n\n      const data = await this._readUserData();\n      const accessToken = UserSettings.accessToken();\n\n      // No token, no session, no current user. Need to login\n      if (!accessToken && !data?.sessionSecret) {\n        return null;\n      }\n\n      try {\n        if (accessToken) {\n          return await this._getProfileAsync({\n            accessToken,\n            currentConnection: 'Access-Token-Authentication',\n          });\n        }\n\n        return await this._getProfileAsync({\n          currentConnection: data?.currentConnection,\n          sessionSecret: data?.sessionSecret,\n        });\n      } catch (e) {\n        if (!(options && options.silent)) {\n          Logger.global.warn('Fetching the user profile failed');\n          Logger.global.warn(e);\n        }\n        if (e.code === 'UNAUTHORIZED_ERROR') {\n          return null;\n        }\n        throw e;\n      }\n    } finally {\n      this._getSessionLock.release();\n    }\n  }\n\n  /**\n   * Get the current user and check if it's a robot.\n   * If the user is not a robot, it will throw an error.\n   */\n  async getCurrentUserOnlyAsync(): Promise<User | null> {\n    const user = await this.getCurrentUserAsync();\n    if (user && user.kind !== 'user') {\n      throw new XDLError('ROBOT_ACCOUNT_ERROR', 'This action is not supported for robot users.');\n    }\n    return user;\n  }\n\n  /**\n   * Get the current user and check if it's a robot.\n   * If the user is not a robot, it will throw an error.\n   */\n  async getCurrentRobotUserOnlyAsync(): Promise<RobotUser | null> {\n    const user = await this.getCurrentUserAsync();\n    if (user && user.kind !== 'robot') {\n      throw new XDLError('USER_ACCOUNT_ERROR', 'This action is not supported for normal users.');\n    }\n    return user;\n  }\n\n  async getCurrentUsernameAsync(): Promise<string | null> {\n    const token = UserSettings.accessToken();\n    if (token) {\n      const user = await this.getCurrentUserAsync();\n      if (user?.username) {\n        return user.username;\n      }\n    }\n    const data = await this._readUserData();\n    if (data?.username) {\n      return data.username;\n    }\n    return null;\n  }\n\n  async getSessionAsync(): Promise<{ sessionSecret?: string; accessToken?: string } | null> {\n    const token = UserSettings.accessToken();\n    if (token) {\n      return { accessToken: token };\n    }\n    const data = await this._readUserData();\n    if (data?.sessionSecret) {\n      return { sessionSecret: data.sessionSecret };\n    }\n    return null;\n  }\n\n  /**\n   * Create or update a user.\n   */\n  async createOrUpdateUserAsync(userData: object): Promise<User | null> {\n    let currentUser = this._currentUser;\n    if (!currentUser) {\n      // attempt to get the current user\n      currentUser = await this.getCurrentUserAsync();\n    }\n\n    if (currentUser?.kind === 'robot') {\n      throw new XDLError('ROBOT_ACCOUNT_ERROR', 'This action is not available for robot users');\n    }\n\n    const api = ApiV2Client.clientForUser(currentUser);\n\n    const { user: updatedUser } = await api.postAsync('auth/createOrUpdateUser', {\n      userData: _prepareAuth0Profile(userData),\n    });\n\n    this._currentUser = {\n      ...this._currentUser,\n      ..._parseAuth0Profile(updatedUser),\n      kind: 'user',\n    } as User;\n\n    return this._currentUser;\n  }\n\n  /**\n   * Logout\n   */\n  async logoutAsync(): Promise<void> {\n    if (this._currentUser?.kind === 'robot') {\n      throw new XDLError('ROBOT_ACCOUNT_ERROR', 'This action is not available for robot users');\n    }\n\n    // Only send logout events events for users without access tokens\n    if (this._currentUser && !this._currentUser?.accessToken) {\n      Analytics.logEvent('Logout', {\n        userId: this._currentUser.userId,\n        username: this._currentUser.username,\n        currentConnection: this._currentUser.currentConnection,\n      });\n    }\n\n    this._currentUser = null;\n\n    // Delete saved auth info\n    await UserSettings.deleteKeyAsync('auth');\n  }\n\n  /**\n   * Forgot Password\n   */\n  async forgotPasswordAsync(usernameOrEmail: string): Promise<void> {\n    const apiAnonymous = ApiV2Client.clientForUser();\n    return apiAnonymous.postAsync('auth/forgotPasswordAsync', {\n      usernameOrEmail,\n    });\n  }\n\n  /**\n   * Get profile given token data. Errors if token is not valid or if no\n   * user profile is returned.\n   *\n   * This method is called by all public authentication methods of `UserManager`\n   * except `logoutAsync`. Therefore, we use this method as a way to:\n   *  - update the UserSettings store with the current token and user id\n   *  - update UserManager._currentUser\n   *  - Fire login analytics events\n   *\n   * Also updates UserManager._currentUser.\n   *\n   * @private\n   */\n  async _getProfileAsync({\n    currentConnection,\n    sessionSecret,\n    accessToken,\n  }: {\n    currentConnection?: ConnectionType;\n    sessionSecret?: string;\n    accessToken?: string;\n  }): Promise<User | RobotUser> {\n    let user;\n    const api = ApiV2Client.clientForUser({\n      sessionSecret,\n      accessToken,\n    });\n\n    user = await api.getAsync('auth/userInfo');\n\n    if (!user) {\n      throw new Error('Unable to fetch user.');\n    }\n\n    user = {\n      ..._parseAuth0Profile(user),\n      // We need to inherit the \"robot\" type only, the rest is considered \"user\" but returned as \"person\".\n      kind: user.user_type === 'robot' ? 'robot' : 'user',\n      currentConnection,\n      sessionSecret,\n      accessToken,\n    };\n\n    // Create a \"username\" to use in current terminal UI (e.g. expo whoami)\n    if (user.kind === 'robot') {\n      user.username = user.givenName ? `${user.givenName} (robot)` : 'robot';\n    }\n\n    // note: do not persist the authorization token, must be env-var only\n    if (!accessToken) {\n      await UserSettings.setAsync('auth', {\n        userId: user.userId,\n        username: user.username,\n        currentConnection,\n        sessionSecret,\n      });\n    }\n\n    // If no currentUser, or currentUser.id differs from profiles\n    // user id, that means we have a new login\n    if (\n      (!this._currentUser || this._currentUser.userId !== user.userId) &&\n      user.username &&\n      user.username !== ''\n    ) {\n      if (!accessToken) {\n        // Only send login events for users without access tokens\n        Analytics.logEvent('Login', {\n          userId: user.userId,\n          currentConnection: user.currentConnection,\n          username: user.username,\n        });\n      }\n\n      Analytics.setUserProperties(user.username, {\n        userId: user.userId,\n        currentConnection: user.currentConnection,\n        username: user.username,\n        userType: user.kind,\n      });\n    }\n\n    this._currentUser = user;\n\n    return user;\n  }\n}\n\nlet __globalInstance: UserManagerInstance | undefined;\nexport default UserManagerInstance.getGlobalInstance();\n\n/** Private Methods **/\nfunction _parseAuth0Profile(rawProfile: any) {\n  if (!rawProfile || typeof rawProfile !== 'object') {\n    return rawProfile;\n  }\n  return Object.keys(rawProfile).reduce((p, key) => {\n    p[camelCase(key)] = _parseAuth0Profile(rawProfile[key]);\n    return p;\n  }, {} as any);\n}\n\nfunction _prepareAuth0Profile(niceProfile: any) {\n  if (typeof niceProfile !== 'object') {\n    return niceProfile;\n  }\n\n  return Object.keys(niceProfile).reduce((p, key) => {\n    p[snakeCase(key)] = _prepareAuth0Profile(niceProfile[key]);\n    return p;\n  }, {} as any);\n}\n"]}