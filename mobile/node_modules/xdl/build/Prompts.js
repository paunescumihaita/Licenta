"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const prompts_1 = __importDefault(require("prompts"));
const listeners = [];
/**
 * Used to pause/resume interaction observers while prompting (made for TerminalUI).
 *
 * @param callback
 */
function addInteractionListener(callback) {
    listeners.push(callback);
}
exports.addInteractionListener = addInteractionListener;
function removeInteractionListener(callback) {
    const listenerIndex = listeners.findIndex(_callback => _callback === callback);
    if (listenerIndex === -1) {
        throw new Error('Logger.removeInteractionListener(): cannot remove an unregistered event listener.');
    }
    listeners.splice(listenerIndex, 1);
}
exports.removeInteractionListener = removeInteractionListener;
function pauseInteractions(options = {}) {
    for (const listener of listeners) {
        listener(Object.assign({ pause: true }, options));
    }
}
exports.pauseInteractions = pauseInteractions;
function resumeInteractions(options = {}) {
    for (const listener of listeners) {
        listener(Object.assign({ pause: false }, options));
    }
}
exports.resumeInteractions = resumeInteractions;
async function confirmAsync(options) {
    pauseInteractions();
    const { value } = await prompts_1.default(Object.assign({ type: 'confirm', name: 'value' }, options));
    resumeInteractions();
    return value;
}
exports.confirmAsync = confirmAsync;
//# sourceMappingURL=Prompts.js.map