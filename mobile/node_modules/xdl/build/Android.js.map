{"version":3,"file":"Android.js","sourceRoot":"","sources":["../src/Android.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig, getConfig, readExpRcAsync } from '@expo/config';\nimport { AndroidConfig } from '@expo/config-plugins';\nimport * as osascript from '@expo/osascript';\nimport spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport child_process, { execFileSync } from 'child_process';\nimport trim from 'lodash/trim';\nimport os from 'os';\nimport path from 'path';\nimport ProgressBar from 'progress';\nimport prompts from 'prompts';\nimport semver from 'semver';\n\nimport {\n  Analytics,\n  Binaries,\n  downloadApkAsync,\n  Env,\n  ImageUtils,\n  learnMore,\n  Logger,\n  NotificationCode,\n  ProjectSettings,\n  Prompts,\n  UrlUtils,\n  Versions,\n  Webpack,\n} from './internal';\n\nexport type Device = {\n  pid?: string;\n  name: string;\n  type: 'emulator' | 'device';\n  isBooted: boolean;\n  isAuthorized: boolean;\n};\n\nlet _lastUrl: string | null = null;\nlet _isAdbOwner: boolean | null = null;\n\nconst BEGINNING_OF_ADB_ERROR_MESSAGE = 'error: ';\nconst CANT_START_ACTIVITY_ERROR = 'Activity not started, unable to resolve Intent';\n\nconst INSTALL_WARNING_TIMEOUT = 60 * 1000;\n\nconst EMULATOR_MAX_WAIT_TIMEOUT = 60 * 1000 * 3;\n\nfunction whichEmulator(): string {\n  if (process.env.ANDROID_HOME) {\n    return `${process.env.ANDROID_HOME}/emulator/emulator`;\n  }\n  return 'emulator';\n}\n\nfunction whichADB(): string {\n  if (process.env.ANDROID_HOME) {\n    return `${process.env.ANDROID_HOME}/platform-tools/adb`;\n  }\n  return 'adb';\n}\n\n/**\n * Returns a list of emulator names.\n */\nasync function getEmulatorsAsync(): Promise<Device[]> {\n  try {\n    const { stdout } = await spawnAsync(whichEmulator(), ['-list-avds']);\n    return stdout\n      .split(os.EOL)\n      .filter(Boolean)\n      .map(name => ({\n        name,\n        type: 'emulator',\n        // unsure from this\n        isBooted: false,\n        isAuthorized: true,\n      }));\n  } catch {\n    return [];\n  }\n}\n\n/**\n * Return the Emulator name for an emulator ID, this can be used to determine if an emulator is booted.\n *\n * @param emulatorId a value like `emulator-5554` from `abd devices`\n */\nasync function getAbdNameForEmulatorIdAsync(emulatorId: string): Promise<string | null> {\n  return (\n    trim(await getAdbOutputAsync(['-s', emulatorId, 'emu', 'avd', 'name']))\n      .split(/\\r?\\n/)\n      .shift() ?? null\n  );\n}\n\nexport async function getAllAvailableDevicesAsync(): Promise<Device[]> {\n  const bootedDevices = await getAttachedDevicesAsync();\n\n  const data = await getEmulatorsAsync();\n  const connectedNames = bootedDevices.map(({ name }) => name);\n\n  const offlineEmulators = data\n    .filter(({ name }) => !connectedNames.includes(name))\n    .map(({ name, type }) => {\n      return {\n        name,\n        type,\n        isBooted: false,\n        // TODO: Are emulators always authorized?\n        isAuthorized: true,\n      };\n    });\n\n  const allDevices = bootedDevices.concat(offlineEmulators);\n\n  if (!allDevices.length) {\n    const genymotionMessage = `https://developer.android.com/studio/run/device.html#developer-device-options. If you are using Genymotion go to Settings -> ADB, select \"Use custom Android SDK tools\", and point it at your Android SDK directory.`;\n    throw new Error(\n      `No Android connected device found, and no emulators could be started automatically.\\nPlease connect a device or create an emulator (https://docs.expo.io/workflow/android-studio-emulator).\\nThen follow the instructions here to enable USB debugging:\\n${genymotionMessage}`\n    );\n  }\n\n  return allDevices;\n}\n\n/**\n * Returns true when a device's splash screen animation has stopped.\n * This can be used to detect when a device is fully booted and ready to use.\n *\n * @param pid\n */\nasync function isBootAnimationCompleteAsync(pid?: string): Promise<boolean> {\n  try {\n    const props = await getPropertyDataForDeviceAsync({ pid }, PROP_BOOT_ANIMATION_STATE);\n    return !!props[PROP_BOOT_ANIMATION_STATE].match(/stopped/);\n  } catch {\n    return false;\n  }\n}\n\nasync function startEmulatorAsync(device: Pick<Device, 'name'>): Promise<Device> {\n  Logger.global.info(`\\u203A Attempting to open emulator: ${device.name}`);\n\n  // Start a process to open an emulator\n  const emulatorProcess = child_process.spawn(\n    whichEmulator(),\n    [\n      `@${device.name}`,\n      // disable animation for faster boot -- this might make it harder to detect if it mounted properly tho\n      //'-no-boot-anim'\n      // '-google-maps-key' -- TODO: Use from config\n    ],\n    {\n      stdio: 'ignore',\n      detached: true,\n    }\n  );\n\n  emulatorProcess.unref();\n\n  return new Promise<Device>((resolve, reject) => {\n    const waitTimer = setInterval(async () => {\n      const bootedDevices = await getAttachedDevicesAsync();\n      const connected = bootedDevices.find(({ name }) => name === device.name);\n      if (connected) {\n        const isBooted = await isBootAnimationCompleteAsync(connected.pid);\n        if (isBooted) {\n          stopWaiting();\n          resolve(connected);\n        }\n      }\n    }, 1000);\n\n    // Reject command after timeout\n    const maxTimer = setTimeout(() => {\n      const manualCommand = `${whichEmulator()} @${device.name}`;\n      stopWaitingAndReject(\n        `It took too long to start the Android emulator: ${device.name}. You can try starting the emulator manually from the terminal with: ${manualCommand}`\n      );\n    }, EMULATOR_MAX_WAIT_TIMEOUT);\n\n    const stopWaiting = () => {\n      clearTimeout(maxTimer);\n      clearInterval(waitTimer);\n    };\n\n    const stopWaitingAndReject = (message: string) => {\n      stopWaiting();\n      reject(new Error(message));\n      clearInterval(waitTimer);\n    };\n\n    emulatorProcess.on('error', ({ message }) => stopWaitingAndReject(message));\n\n    emulatorProcess.on('exit', () => {\n      const manualCommand = `${whichEmulator()} @${device.name}`;\n      stopWaitingAndReject(\n        `The emulator (${device.name}) quit before it finished opening. You can try starting the emulator manually from the terminal with: ${manualCommand}`\n      );\n    });\n  });\n}\n\n// TODO: This is very expensive for some operations.\nexport async function getAttachedDevicesAsync(): Promise<Device[]> {\n  const output = await getAdbOutputAsync(['devices', '-l']);\n\n  const splitItems = output.trim().replace(/\\n$/, '').split(os.EOL);\n  // First line is `\"List of devices attached\"`, remove it\n  // @ts-ignore: todo\n  const attachedDevices: {\n    props: string[];\n    type: Device['type'];\n    isAuthorized: Device['isAuthorized'];\n  }[] = splitItems\n    .slice(1, splitItems.length)\n    .map(line => {\n      // unauthorized: ['FA8251A00719', 'unauthorized', 'usb:338690048X', 'transport_id:5']\n      // authorized: ['FA8251A00719', 'device', 'usb:336592896X', 'product:walleye', 'model:Pixel_2', 'device:walleye', 'transport_id:4']\n      // emulator: ['emulator-5554', 'offline', 'transport_id:1']\n      const props = line.split(' ').filter(Boolean);\n\n      const isAuthorized = props[1] !== 'unauthorized';\n      const type = line.includes('emulator') ? 'emulator' : 'device';\n      return { props, type, isAuthorized };\n    })\n    .filter(({ props: [pid] }) => !!pid);\n\n  const devicePromises = attachedDevices.map<Promise<Device>>(async props => {\n    const {\n      type,\n      props: [pid, ...deviceInfo],\n      isAuthorized,\n    } = props;\n\n    let name: string | null = null;\n\n    if (type === 'device') {\n      if (isAuthorized) {\n        // Possibly formatted like `model:Pixel_2`\n        // Transform to `Pixel_2`\n        const modelItem = deviceInfo.find(info => info.includes('model:'));\n        if (modelItem) {\n          name = modelItem.replace('model:', '');\n        }\n      }\n      // unauthorized devices don't have a name available to read\n      if (!name) {\n        // Device FA8251A00719\n        name = `Device ${pid}`;\n      }\n    } else {\n      // Given an emulator pid, get the emulator name which can be used to start the emulator later.\n      name = (await getAbdNameForEmulatorIdAsync(pid)) ?? '';\n    }\n\n    return {\n      pid,\n      name,\n      type,\n      isAuthorized,\n      isBooted: true,\n    };\n  });\n\n  return Promise.all(devicePromises);\n}\n\nexport function isPlatformSupported(): boolean {\n  return (\n    process.platform === 'darwin' || process.platform === 'win32' || process.platform === 'linux'\n  );\n}\n\nasync function adbAlreadyRunning(adb: string): Promise<boolean> {\n  try {\n    const result = await spawnAsync(adb, ['start-server']);\n    const lines = trim(result.stderr).split(/\\r?\\n/);\n    return lines.includes('* daemon started successfully') === false;\n  } catch (e) {\n    let errorMessage = trim(e.stderr || e.stdout);\n    if (errorMessage.startsWith(BEGINNING_OF_ADB_ERROR_MESSAGE)) {\n      errorMessage = errorMessage.substring(BEGINNING_OF_ADB_ERROR_MESSAGE.length);\n    }\n    throw new Error(errorMessage);\n  }\n}\n\nexport async function getAdbOutputAsync(args: string[]): Promise<string> {\n  await Binaries.addToPathAsync('adb');\n  const adb = whichADB();\n\n  if (_isAdbOwner === null) {\n    const alreadyRunning = await adbAlreadyRunning(adb);\n    _isAdbOwner = alreadyRunning === false;\n  }\n\n  if (Env.isDebug()) {\n    Logger.global.info([adb, ...args].join(' '));\n  }\n  try {\n    const result = await spawnAsync(adb, args);\n    return result.stdout;\n  } catch (e) {\n    // TODO: Support heap corruption for adb 29 (process exits with code -1073740940) (windows and linux)\n    let errorMessage = (e.stderr || e.stdout || e.message).trim();\n    if (errorMessage.startsWith(BEGINNING_OF_ADB_ERROR_MESSAGE)) {\n      errorMessage = errorMessage.substring(BEGINNING_OF_ADB_ERROR_MESSAGE.length);\n    }\n    throw new Error(errorMessage);\n  }\n}\n\nexport async function getAdbFileOutputAsync(args: string[], encoding?: 'latin1') {\n  await Binaries.addToPathAsync('adb');\n  const adb = whichADB();\n\n  if (_isAdbOwner === null) {\n    const alreadyRunning = await adbAlreadyRunning(adb);\n    _isAdbOwner = alreadyRunning === false;\n  }\n\n  try {\n    return await execFileSync(adb, args, {\n      encoding,\n    });\n  } catch (e) {\n    let errorMessage = (e.stderr || e.stdout || e.message).trim();\n    if (errorMessage.startsWith(BEGINNING_OF_ADB_ERROR_MESSAGE)) {\n      errorMessage = errorMessage.substring(BEGINNING_OF_ADB_ERROR_MESSAGE.length);\n    }\n    throw new Error(errorMessage);\n  }\n}\n\nasync function _isDeviceAuthorizedAsync(device: Device): Promise<boolean> {\n  // TODO: Get the latest version of the device in case isAuthorized changes.\n  return device.isAuthorized;\n}\n\nasync function isInstalledAsync(device: Device, androidPackage: string): Promise<boolean> {\n  const packages = await getAdbOutputAsync(\n    adbPidArgs(device.pid, 'shell', 'pm', 'list', 'packages', androidPackage)\n  );\n\n  const lines = packages.split(/\\r?\\n/);\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (line === `package:${androidPackage}`) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// Expo installed\nasync function _isExpoInstalledAsync(device: Device) {\n  return await isInstalledAsync(device, 'host.exp.exponent');\n}\n\nasync function ensureDevClientInstalledAsync(device: Device, applicationId: string): Promise<void> {\n  if (!(await isInstalledAsync(device, applicationId))) {\n    throw new Error(\n      `The development client (${applicationId}) for this project is not installed. ` +\n        `Please build and install the client on the simulator first.\\n${learnMore(\n          'https://docs.expo.io/clients/distribution-for-android/'\n        )}`\n    );\n  }\n}\n\nasync function getExpoVersionAsync(device: Device): Promise<string | null> {\n  const info = await getAdbOutputAsync(\n    adbPidArgs(device.pid, 'shell', 'dumpsys', 'package', 'host.exp.exponent')\n  );\n\n  const regex = /versionName=([0-9.]+)/;\n  const regexMatch = regex.exec(info);\n  if (!regexMatch || regexMatch.length < 2) {\n    return null;\n  }\n\n  return regexMatch[1];\n}\n\nasync function isClientOutdatedAsync(device: Device, sdkVersion?: string): Promise<boolean> {\n  const versions = await Versions.versionsAsync();\n  const clientForSdk = await getClientForSDK(sdkVersion);\n  const latestVersionForSdk = clientForSdk?.version ?? versions.androidVersion;\n  const installedVersion = await getExpoVersionAsync(device);\n  return !installedVersion || semver.lt(installedVersion, latestVersionForSdk);\n}\n\nexport async function installExpoAsync({\n  device,\n  url,\n  version,\n}: {\n  device: Device;\n  url?: string;\n  version?: string;\n}) {\n  const bar = new ProgressBar('Downloading the Expo Go app [:bar] :percent :etas', {\n    total: 100,\n    width: 64,\n  });\n\n  let warningTimer: NodeJS.Timeout;\n  const setWarningTimer = () => {\n    if (warningTimer) {\n      clearTimeout(warningTimer);\n    }\n    return setTimeout(() => {\n      Logger.global.info('');\n      Logger.global.info(\n        'This download is taking longer than expected. You can also try downloading the clients from the website at https://expo.io/tools'\n      );\n    }, INSTALL_WARNING_TIMEOUT);\n  };\n\n  Logger.notifications.info({ code: NotificationCode.START_LOADING });\n  warningTimer = setWarningTimer();\n  const path = await downloadApkAsync(url, progress => bar.tick(1, progress));\n  Logger.notifications.info({ code: NotificationCode.STOP_LOADING });\n\n  if (version) {\n    Logger.global.info(`Installing Expo Go ${version} on device`);\n  } else {\n    Logger.global.info(`Installing Expo Go on device`);\n  }\n  Logger.notifications.info({ code: NotificationCode.START_LOADING });\n  warningTimer = setWarningTimer();\n  const result = await installOnDeviceAsync(device, { binaryPath: path });\n  Logger.notifications.info({ code: NotificationCode.STOP_LOADING });\n\n  clearTimeout(warningTimer);\n  return result;\n}\n\nexport async function installOnDeviceAsync(\n  device: Pick<Device, 'pid'>,\n  { binaryPath }: { binaryPath: string }\n) {\n  return await getAdbOutputAsync(adbPidArgs(device.pid, 'install', '-r', '-d', binaryPath));\n}\n\nexport async function isDeviceBootedAsync({\n  name,\n}: { name?: string } = {}): Promise<Device | null> {\n  const devices = await getAttachedDevicesAsync();\n\n  if (!name) {\n    return devices[0] ?? null;\n  }\n\n  return devices.find(device => device.name === name) ?? null;\n}\n\nexport async function uninstallExpoAsync(device: Device): Promise<string | undefined> {\n  Logger.global.info('Uninstalling Expo Go from Android device.');\n\n  // we need to check if its installed, else we might bump into \"Failure [DELETE_FAILED_INTERNAL_ERROR]\"\n  const isInstalled = await _isExpoInstalledAsync(device);\n  if (!isInstalled) {\n    return;\n  }\n\n  try {\n    return await getAdbOutputAsync(adbPidArgs(device.pid, 'uninstall', 'host.exp.exponent'));\n  } catch (e) {\n    Logger.global.error(\n      'Could not uninstall Expo Go from your device, please uninstall Expo Go manually and try again.'\n    );\n    throw e;\n  }\n}\n\nexport async function upgradeExpoAsync(options?: {\n  url?: string;\n  version?: string;\n}): Promise<boolean> {\n  const { url, version } = options || {};\n\n  try {\n    const devices = await getAttachedDevicesAsync();\n    if (!devices.length) {\n      throw new Error('no devices connected');\n    }\n\n    const device = await attemptToStartEmulatorOrAssertAsync(devices[0]);\n    if (!device) {\n      return false;\n    }\n\n    await uninstallExpoAsync(device);\n    await installExpoAsync({ device, url, version });\n    if (_lastUrl) {\n      Logger.global.info(`Opening ${_lastUrl} in Expo.`);\n      await getAdbOutputAsync([\n        'shell',\n        'am',\n        'start',\n        '-a',\n        'android.intent.action.VIEW',\n        '-d',\n        _lastUrl,\n      ]);\n      _lastUrl = null;\n    }\n\n    return true;\n  } catch (e) {\n    Logger.global.error(e.message);\n    return false;\n  }\n}\n\nasync function _openUrlAsync({\n  pid,\n  url,\n  applicationId,\n}: {\n  pid: string;\n  url: string;\n  applicationId: string;\n}) {\n  // NOTE(brentvatne): temporary workaround! launch Expo Go first, then\n  // launch the project!\n  // https://github.com/expo/expo/issues/7772\n  // adb shell monkey -p host.exp.exponent -c android.intent.category.LAUNCHER 1\n  const openClient = await getAdbOutputAsync(\n    adbPidArgs(\n      pid,\n      'shell',\n      'monkey',\n      '-p',\n      applicationId,\n      '-c',\n      'android.intent.category.LAUNCHER',\n      '1'\n    )\n  );\n  if (openClient.includes(CANT_START_ACTIVITY_ERROR)) {\n    throw new Error(openClient.substring(openClient.indexOf('Error: ')));\n  }\n\n  const openProject = await getAdbOutputAsync(\n    adbPidArgs(pid, 'shell', 'am', 'start', '-a', 'android.intent.action.VIEW', '-d', url)\n  );\n  if (openProject.includes(CANT_START_ACTIVITY_ERROR)) {\n    throw new Error(openProject.substring(openProject.indexOf('Error: ')));\n  }\n\n  return openProject;\n}\n\nfunction getUnixPID(port: number | string) {\n  return execFileSync('lsof', [`-i:${port}`, '-P', '-t', '-sTCP:LISTEN'], {\n    encoding: 'utf8',\n    stdio: ['pipe', 'pipe', 'ignore'],\n  })\n    .split('\\n')[0]\n    .trim();\n}\n\nexport async function activateEmulatorWindowAsync(device: Pick<Device, 'type' | 'pid'>) {\n  if (\n    // only mac is supported for now.\n    process.platform !== 'darwin' ||\n    // can only focus emulators\n    device.type !== 'emulator'\n  ) {\n    return;\n  }\n\n  // Google Emulator ID: `emulator-5554` -> `5554`\n  const androidPid = device.pid!.match(/-(\\d+)/)?.[1];\n  if (!androidPid) {\n    return;\n  }\n  // Unix PID\n  const pid = getUnixPID(androidPid);\n\n  try {\n    await osascript.execAsync(`\n  tell application \"System Events\"\n    set frontmost of the first process whose unix id is ${pid} to true\n  end tell`);\n  } catch {\n    // noop -- this feature is very specific and subject to failure.\n  }\n}\n\nexport async function openAppAsync(\n  device: Pick<Device, 'pid' | 'type'>,\n  {\n    packageName,\n    mainActivity,\n  }: {\n    packageName: string;\n    mainActivity: string;\n  }\n) {\n  const targetActivityURI = mainActivity.includes('.')\n    ? mainActivity\n    : [packageName, mainActivity].filter(Boolean).join('/.');\n\n  const openProject = await getAdbOutputAsync(\n    adbPidArgs(\n      device.pid,\n      'shell',\n      'am',\n      'start',\n      // FLAG_ACTIVITY_SINGLE_TOP -- If set, the activity will not be launched if it is already running at the top of the history stack.\n      '-f',\n      '0x20000000',\n      '-n',\n      targetActivityURI\n    )\n  );\n\n  if (openProject.includes(CANT_START_ACTIVITY_ERROR)) {\n    throw new Error(openProject.substring(openProject.indexOf('Error: ')));\n  }\n\n  await activateEmulatorWindowAsync(device);\n\n  return openProject;\n}\n\nexport async function attemptToStartEmulatorOrAssertAsync(device: Device): Promise<Device | null> {\n  // TODO: Add a light-weight method for checking since a device could disconnect.\n\n  if (!(await isDeviceBootedAsync(device))) {\n    device = await startEmulatorAsync(device);\n  }\n\n  if (!(await _isDeviceAuthorizedAsync(device))) {\n    logUnauthorized(device);\n    return null;\n  }\n\n  return device;\n}\n\nfunction logUnauthorized(device: Device) {\n  Logger.global.warn(\n    `\\nThis computer is not authorized for developing on ${chalk.bold(device.name)}. ${chalk.dim(\n      learnMore('https://expo.fyi/authorize-android-device')\n    )}`\n  );\n}\n\n// Keep a list of simulator UDIDs so we can prevent asking multiple times if a user wants to upgrade.\n// This can prevent annoying interactions when they don't want to upgrade for whatever reason.\nconst hasPromptedToUpgrade: Record<string, boolean> = {};\n\nasync function openUrlAsync({\n  url,\n  device,\n  isDetached = false,\n  sdkVersion,\n  devClient = false,\n  exp,\n  projectRoot,\n}: {\n  url: string;\n  isDetached?: boolean;\n  device: Device;\n  sdkVersion?: string;\n  devClient?: boolean;\n  exp?: ExpoConfig;\n  projectRoot: string;\n}): Promise<void> {\n  try {\n    const bootedDevice = await attemptToStartEmulatorOrAssertAsync(device);\n    if (!bootedDevice) {\n      return;\n    }\n\n    await activateEmulatorWindowAsync(bootedDevice);\n\n    device = bootedDevice;\n\n    let installedExpo = false;\n    let clientApplicationId = 'host.exp.exponent';\n    if (devClient) {\n      const applicationId = await AndroidConfig.Package.getApplicationIdAsync(projectRoot);\n      if (!applicationId) {\n        // TODO(ville): possibly need to compare Gradle project with app.json/config.ts\n        // and show a helpful error message, if there's a mismatch.\n        throw new Error(\n          `Could not find applicationId in ${AndroidConfig.Paths.getAppBuildGradle(projectRoot)}`\n        );\n      } else {\n        clientApplicationId = applicationId;\n      }\n      await ensureDevClientInstalledAsync(device, clientApplicationId);\n    } else if (!isDetached) {\n      let shouldInstall = !(await _isExpoInstalledAsync(device));\n      const promptKey = device.pid ?? 'unknown';\n      if (\n        !shouldInstall &&\n        !hasPromptedToUpgrade[promptKey] &&\n        (await isClientOutdatedAsync(device, sdkVersion))\n      ) {\n        // Only prompt once per device, per run.\n        hasPromptedToUpgrade[promptKey] = true;\n        const confirm = await Prompts.confirmAsync({\n          initial: true,\n          message: `Expo Go on ${device.name} (${device.type}) is outdated, would you like to upgrade?`,\n        });\n        if (confirm) {\n          await uninstallExpoAsync(device);\n          shouldInstall = true;\n        }\n      }\n\n      if (shouldInstall) {\n        const androidClient = await getClientForSDK(sdkVersion);\n        await installExpoAsync({ device, ...androidClient });\n        installedExpo = true;\n      }\n\n      _lastUrl = url;\n      // _checkExpoUpToDateAsync(); // let this run in background\n    }\n\n    Logger.global.info(`Opening ${chalk.underline(url)} on ${chalk.bold(device.name)}`);\n\n    try {\n      await _openUrlAsync({ pid: device.pid!, url, applicationId: clientApplicationId });\n    } catch (e) {\n      if (isDetached) {\n        e.message = `Error running app. Have you installed the app already using Android Studio? Since you are detached you must build manually. ${e.message}`;\n      } else {\n        e.message = `Error running app. ${e.message}`;\n      }\n\n      throw e;\n    }\n\n    if (device.type === 'emulator') {\n      // TODO: Bring the emulator window to the front.\n    }\n\n    Analytics.logEvent('Open Url on Device', {\n      platform: 'android',\n      installedExpo,\n    });\n  } catch (e) {\n    e.message = `Error running adb: ${e.message}`;\n    throw e;\n  }\n}\n\nasync function getClientForSDK(sdkVersionString?: string) {\n  if (!sdkVersionString) {\n    return null;\n  }\n\n  const sdkVersion = (await Versions.sdkVersionsAsync())[sdkVersionString];\n  if (!sdkVersion) {\n    return null;\n  }\n\n  return {\n    url: sdkVersion.androidClientUrl,\n    version: sdkVersion.androidClientVersion,\n  };\n}\n\nexport async function openProjectAsync({\n  projectRoot,\n  shouldPrompt,\n  devClient = false,\n  device,\n}: {\n  projectRoot: string;\n  shouldPrompt?: boolean;\n  devClient?: boolean;\n  device?: Device;\n}): Promise<{ success: true; url: string } | { success: false; error: string }> {\n  try {\n    await startAdbReverseAsync(projectRoot);\n\n    const projectUrl = await UrlUtils.constructDeepLinkAsync(projectRoot);\n    const { exp } = getConfig(projectRoot, {\n      skipSDKVersionRequirement: true,\n    });\n\n    if (device) {\n      const booted = await attemptToStartEmulatorOrAssertAsync(device);\n      if (!booted) {\n        return { success: false, error: 'escaped' };\n      }\n      device = booted;\n    } else {\n      const devices = await getAllAvailableDevicesAsync();\n      let booted: Device | null = devices[0];\n      if (shouldPrompt) {\n        booted = await promptForDeviceAsync(devices);\n      }\n      if (!booted) {\n        return { success: false, error: 'escaped' };\n      }\n      device = booted;\n    }\n\n    await openUrlAsync({\n      url: projectUrl,\n      device,\n      isDetached: !!exp.isDetached,\n      sdkVersion: exp.sdkVersion,\n      devClient,\n      exp,\n      projectRoot,\n    });\n    return { success: true, url: projectUrl };\n  } catch (e) {\n    Logger.global.error(`Couldn't start project on Android: ${e.message}`);\n    return { success: false, error: e };\n  }\n}\n\nexport async function openWebProjectAsync({\n  projectRoot,\n  shouldPrompt,\n}: {\n  projectRoot: string;\n  shouldPrompt?: boolean;\n}): Promise<{ success: true; url: string } | { success: false; error: string }> {\n  try {\n    await startAdbReverseAsync(projectRoot);\n\n    const projectUrl = await Webpack.getUrlAsync(projectRoot);\n    if (projectUrl === null) {\n      return {\n        success: false,\n        error: `The web project has not been started yet`,\n      };\n    }\n    const devices = await getAllAvailableDevicesAsync();\n    let device: Device | null = devices[0];\n    if (shouldPrompt) {\n      device = await promptForDeviceAsync(devices);\n    }\n    if (!device) {\n      return { success: false, error: 'escaped' };\n    }\n\n    await openUrlAsync({ url: projectUrl, device, isDetached: true, projectRoot });\n    return { success: true, url: projectUrl };\n  } catch (e) {\n    Logger.global.error(`Couldn't open the web project on Android: ${e.message}`);\n    return { success: false, error: e };\n  }\n}\n\n// Adb reverse\nexport async function startAdbReverseAsync(projectRoot: string): Promise<boolean> {\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  const expRc = await readExpRcAsync(projectRoot);\n  const userDefinedAdbReversePorts = expRc.extraAdbReversePorts || [];\n\n  const adbReversePorts = [\n    packagerInfo.packagerPort,\n    packagerInfo.expoServerPort,\n    ...userDefinedAdbReversePorts,\n  ].filter(Boolean);\n\n  const devices = await getAttachedDevicesAsync();\n  for (const device of devices) {\n    for (const port of adbReversePorts) {\n      if (!(await adbReverse({ device, port }))) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nexport async function stopAdbReverseAsync(projectRoot: string): Promise<void> {\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  const expRc = await readExpRcAsync(projectRoot);\n  const userDefinedAdbReversePorts = expRc.extraAdbReversePorts || [];\n\n  const adbReversePorts = [\n    packagerInfo.packagerPort,\n    packagerInfo.expoServerPort,\n    ...userDefinedAdbReversePorts,\n  ].filter(Boolean);\n\n  const devices = await getAttachedDevicesAsync();\n  for (const device of devices) {\n    for (const port of adbReversePorts) {\n      await adbReverseRemove({ device, port });\n    }\n  }\n}\n\nasync function adbReverse({ device, port }: { device: Device; port: number }): Promise<boolean> {\n  if (!(await _isDeviceAuthorizedAsync(device))) {\n    return false;\n  }\n\n  try {\n    await getAdbOutputAsync(adbPidArgs(device.pid, 'reverse', `tcp:${port}`, `tcp:${port}`));\n    return true;\n  } catch (e) {\n    Logger.global.warn(`Couldn't adb reverse: ${e.message}`);\n    return false;\n  }\n}\n\nasync function adbReverseRemove({\n  device,\n  port,\n}: {\n  device: Device;\n  port: number;\n}): Promise<boolean> {\n  if (!(await _isDeviceAuthorizedAsync(device))) {\n    return false;\n  }\n\n  try {\n    await getAdbOutputAsync(adbPidArgs(device.pid, 'reverse', '--remove', `tcp:${port}`));\n    return true;\n  } catch (e) {\n    // Don't send this to warn because we call this preemptively sometimes\n    Logger.global.debug(`Couldn't adb reverse remove: ${e.message}`);\n    return false;\n  }\n}\n\nfunction adbPidArgs(pid: Device['pid'], ...options: string[]): string[] {\n  const args = [];\n  if (pid) {\n    args.push('-s', pid);\n  }\n  return args.concat(options);\n}\n\ntype DPIConstraint = {\n  dpi: 'mdpi' | 'hdpi' | 'xhdpi' | 'xxhdpi' | 'xxxhdpi';\n  sizeMultiplier: number;\n};\n\nconst splashScreenDPIConstraints: readonly DPIConstraint[] = [\n  {\n    dpi: 'mdpi',\n    sizeMultiplier: 1,\n  },\n  {\n    dpi: 'hdpi',\n    sizeMultiplier: 1.5,\n  },\n  {\n    dpi: 'xhdpi',\n    sizeMultiplier: 2,\n  },\n  {\n    dpi: 'xxhdpi',\n    sizeMultiplier: 3,\n  },\n  {\n    dpi: 'xxxhdpi',\n    sizeMultiplier: 4,\n  },\n];\n\n/**\n * Checks whether `resizeMode` is set to `native` and if `true` analyzes provided images for splashscreen\n * providing `Logger` feedback upon problems.\n * @param projectRoot - directory of the expo project\n * @since SDK33\n */\nexport async function checkSplashScreenImages(projectRoot: string): Promise<void> {\n  const { exp } = getConfig(projectRoot);\n\n  // return before SDK33\n  if (!Versions.gteSdkVersion(exp, '33.0.0')) {\n    return;\n  }\n\n  const splashScreenMode = exp.android?.splash?.resizeMode ?? exp.splash?.resizeMode ?? 'contain';\n\n  // only mode `native` is handled by this check\n  if (splashScreenMode === 'contain' || splashScreenMode === 'cover') {\n    return;\n  }\n\n  const generalSplashImagePath = exp.splash?.image;\n  if (!generalSplashImagePath) {\n    Logger.global.warn(\n      `Couldn't read '${chalk.italic('splash.image')}' from ${chalk.italic(\n        'app.json'\n      )}. Provide asset that would serve as baseline splash image.`\n    );\n    return;\n  }\n  const generalSplashImage = await ImageUtils.getImageDimensionsAsync(\n    projectRoot,\n    generalSplashImagePath\n  );\n  if (!generalSplashImage) {\n    Logger.global.warn(\n      `Couldn't read dimensions of provided splash image '${chalk.italic(\n        generalSplashImagePath\n      )}'. Does the file exist?`\n    );\n    return;\n  }\n\n  const androidSplash = exp.android?.splash;\n  const androidSplashImages = [];\n  for (const { dpi, sizeMultiplier } of splashScreenDPIConstraints) {\n    const imageRelativePath = androidSplash?.[dpi];\n    if (imageRelativePath) {\n      const splashImage = await ImageUtils.getImageDimensionsAsync(projectRoot, imageRelativePath);\n      if (!splashImage) {\n        Logger.global.warn(\n          `Couldn't read dimensions of provided splash image '${chalk.italic(\n            imageRelativePath\n          )}'. Does the file exist?`\n        );\n        continue;\n      }\n      const { width, height } = splashImage;\n      const expectedWidth = sizeMultiplier * generalSplashImage.width;\n      const expectedHeight = sizeMultiplier * generalSplashImage.height;\n      androidSplashImages.push({\n        dpi,\n        width,\n        height,\n        expectedWidth,\n        expectedHeight,\n        sizeMatches: width === expectedWidth && height === expectedHeight,\n      });\n    }\n  }\n\n  if (androidSplashImages.length === 0) {\n    Logger.global\n      .warn(`Splash resizeMode is set to 'native', but you haven't provided any images for different DPIs.\nBe aware that your splash image will be used as xxxhdpi asset and its ${chalk.bold(\n      'actual size will be different'\n    )} depending on device's DPI.\nSee https://docs.expo.io/guides/splash-screens/#splash-screen-api-limitations-on-android for more information`);\n    return;\n  }\n\n  if (androidSplashImages.some(({ sizeMatches }) => !sizeMatches)) {\n    Logger.global\n      .warn(`Splash resizeMode is set to 'native' and you've provided different images for different DPIs,\nbut their sizes mismatch expected ones: [dpi: provided (expected)] ${androidSplashImages\n      .map(\n        ({ dpi, width, height, expectedWidth, expectedHeight }) =>\n          `${dpi}: ${width}x${height} (${expectedWidth}x${expectedHeight})`\n      )\n      .join(', ')}\nSee https://docs.expo.io/guides/splash-screens/#splash-screen-api-limitations-on-android for more information`);\n  }\n}\n\nexport async function maybeStopAdbDaemonAsync() {\n  if (_isAdbOwner !== true) {\n    return false;\n  }\n\n  try {\n    await getAdbOutputAsync(['kill-server']);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction nameStyleForDevice(device: Device) {\n  const isActive = device.isBooted;\n  if (!isActive) {\n    // Use no style changes for a disconnected device that is available to be opened.\n    return (text: string) => text;\n  }\n  // A device that is connected and ready to be used should be bolded to match iOS.\n  if (device.isAuthorized) {\n    return chalk.bold;\n  }\n  // Devices that are unauthorized and connected cannot be used, but they are connected so gray them out.\n  return (text: string) => chalk.bold(chalk.gray(text));\n}\n\nexport async function promptForDeviceAsync(devices: Device[]): Promise<Device | null> {\n  // TODO: provide an option to add or download more simulators\n\n  // Pause interactions on the TerminalUI\n  Prompts.pauseInteractions();\n\n  const { value } = await prompts({\n    type: 'autocomplete',\n    name: 'value',\n    limit: 11,\n    message: 'Select a device/emulator',\n    choices: devices.map(item => {\n      const format = nameStyleForDevice(item);\n      const type = item.isAuthorized ? item.type : 'unauthorized';\n      return {\n        title: `${format(item.name)} ${chalk.dim(`(${type})`)}`,\n        value: item.name,\n      };\n    }),\n    suggest: (input: any, choices: any) => {\n      const regex = new RegExp(input, 'i');\n      return choices.filter((choice: any) => regex.test(choice.title));\n    },\n  });\n\n  // Resume interactions on the TerminalUI\n  Prompts.resumeInteractions();\n\n  const device = value ? devices.find(({ name }) => name === value)! : null;\n\n  if (device?.isAuthorized === false) {\n    logUnauthorized(device);\n    return null;\n  }\n\n  return device;\n}\n\nexport enum DeviceABI {\n  // The arch specific android target platforms are soft-deprecated.\n  // Instead of using TargetPlatform as a combination arch + platform\n  // the code will be updated to carry arch information in [DarwinArch]\n  // and [AndroidArch].\n  arm = 'arm',\n  arm64 = 'arm64',\n  x64 = 'x64',\n  x86 = 'x86',\n  armeabiV7a = 'armeabi-v7a',\n  armeabi = 'armeabi',\n  universal = 'universal',\n}\n\ntype DeviceProperties = Record<string, string>;\nconst deviceProperties: Record<string, DeviceProperties> = {};\n\nconst PROP_SDK_VERSION = 'ro.build.version.release';\n// Can sometimes be null\nconst PROP_API_VERSION = 'ro.build.version.sdk';\n// http://developer.android.com/ndk/guides/abis.html\nconst PROP_CPU_NAME = 'ro.product.cpu.abi';\nconst PROP_CPU_ABILIST_NAME = 'ro.product.cpu.abilist';\nconst PROP_BOOT_ANIMATION_STATE = 'init.svc.bootanim';\n\nconst LOWEST_SUPPORTED_EXPO_API_VERSION = 21;\n\n/**\n * @returns string like '11' (i.e. Android 11)\n */\nexport async function getDeviceSDKVersionAsync(\n  device: Pick<Device, 'name' | 'pid'>\n): Promise<string> {\n  return await getPropertyForDeviceAsync(device, PROP_SDK_VERSION);\n}\n\n/**\n * @returns number like `30` (i.e. API 30)\n */\nexport async function getDeviceAPIVersionAsync(\n  device: Pick<Device, 'name' | 'pid'>\n): Promise<number> {\n  const sdkVersion =\n    (await getPropertyForDeviceAsync(device, PROP_API_VERSION)) ??\n    LOWEST_SUPPORTED_EXPO_API_VERSION;\n  return parseInt(sdkVersion, 10);\n}\n\n/**\n *\n * @returns app/android/app/build/outputs/apk\n */\nexport function getAPKDirectory(projectRoot: string): string {\n  return path.join(projectRoot, 'android', 'app', 'build', 'outputs', 'apk');\n}\n\nexport async function getDeviceABIsAsync(\n  device: Pick<Device, 'name' | 'pid'>\n): Promise<DeviceABI[]> {\n  const cpuAbilist = await getPropertyForDeviceAsync(device, PROP_CPU_ABILIST_NAME);\n\n  if (cpuAbilist) {\n    return cpuAbilist.trim().split(',') as DeviceABI[];\n  }\n\n  const abi = (await getPropertyForDeviceAsync(device, PROP_CPU_NAME)) as DeviceABI;\n  return [abi];\n}\n\nexport async function getPropertyForDeviceAsync(\n  device: Pick<Device, 'name' | 'pid'>,\n  name: string,\n  shouldRefresh?: boolean\n): Promise<string> {\n  if (shouldRefresh) {\n    delete deviceProperties[device.name];\n  }\n\n  if (deviceProperties[device.name] == null) {\n    try {\n      deviceProperties[device.name] = await getPropertyDataForDeviceAsync(device);\n    } catch (error) {\n      // TODO: Ensure error has message and not stderr\n      Logger.global.error(\n        `Failed to get properties for device \"${device.name}\" (${device.pid}): ${error.message}`\n      );\n    }\n  }\n  return deviceProperties[device.name][name];\n}\n\nasync function getPropertyDataForDeviceAsync(\n  device: Pick<Device, 'pid'>,\n  prop?: string\n): Promise<DeviceProperties> {\n  // @ts-ignore\n  const propCommand = adbPidArgs(...[device.pid, 'shell', 'getprop', prop].filter(Boolean));\n  try {\n    // Prevent reading as UTF8.\n    const results = (await getAdbFileOutputAsync(propCommand, 'latin1')).toString('latin1');\n    // Like:\n    // [wifi.direct.interface]: [p2p-dev-wlan0]\n    // [wifi.interface]: [wlan0]\n\n    if (prop) {\n      return {\n        [prop]: results,\n      };\n    }\n    return parseAdbDeviceProperties(results);\n  } catch (error) {\n    // TODO: Ensure error has message and not stderr\n    throw new Error(`Failed to get properties for device (${device.pid}): ${error.message}`);\n  }\n}\n\nexport function parseAdbDeviceProperties(devicePropertiesString: string) {\n  const properties: DeviceProperties = {};\n  const propertyExp = /\\[(.*?)\\]: \\[(.*?)\\]/gm;\n  for (const match of devicePropertiesString.matchAll(propertyExp)) {\n    properties[match[1]] = match[2];\n  }\n  return properties;\n}\n"]}