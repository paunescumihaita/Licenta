"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const internal_1 = require("./internal");
exports.startExpoServerAsync = internal_1.startExpoServerAsync;
exports.startReactNativeServerAsync = internal_1.startReactNativeServerAsync;
exports.startTunnelsAsync = internal_1.startTunnelsAsync;
exports.stopReactNativeServerAsync = internal_1.stopReactNativeServerAsync;
exports.stopTunnelsAsync = internal_1.stopTunnelsAsync;
/**
 * @deprecated Use `ProjectSettings.setPackagerInfoAsync`
 * @param projectRoot
 * @param options
 */
async function setOptionsAsync(projectRoot, options) {
    internal_1.assertValidProjectRoot(projectRoot); // Check to make sure all options are valid
    if (options.packagerPort != null && !Number.isInteger(options.packagerPort)) {
        throw new internal_1.XDLError('INVALID_OPTIONS', 'packagerPort must be an integer');
    }
    await internal_1.ProjectSettings.setPackagerInfoAsync(projectRoot, options);
}
exports.setOptionsAsync = setOptionsAsync;
/**
 * @deprecated `ProjectSettings.getCurrentStatusAsync`
 * @param projectRoot
 */
async function currentStatus(projectRoot) {
    return internal_1.ProjectSettings.getCurrentStatusAsync(projectRoot);
}
exports.currentStatus = currentStatus;
var internal_2 = require("./internal");
exports.broadcastMessage = internal_2.broadcastMessage;
exports.createBundlesAsync = internal_2.createBundlesAsync;
exports.getPublishExpConfigAsync = internal_2.getPublishExpConfigAsync;
exports.prepareHooks = internal_2.prepareHooks;
exports.publishAsync = internal_2.publishAsync;
exports.runHook = internal_2.runHook;
exports.startAsync = internal_2.startAsync;
exports.stopAsync = internal_2.stopAsync;
exports.writeArtifactSafelyAsync = internal_2.writeArtifactSafelyAsync;
//# sourceMappingURL=Project.js.map