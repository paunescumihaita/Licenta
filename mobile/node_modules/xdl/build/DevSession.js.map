{"version":3,"file":"DevSession.js","sourceRoot":"","sources":["../src/DevSession.ts"],"names":[],"mappings":";;;;;AAAA,4CAAoB;AAEpB,yCAAmG;AAEnG,MAAM,qBAAqB,GAAG,EAAE,CAAC;AAEjC,IAAI,YAAY,GAAG,IAAI,CAAC;AAExB,4EAA4E;AACrE,KAAK,UAAU,YAAY,CAChC,WAAmB,EACnB,GAAQ,EACR,QAA0B,EAC1B,cAAuB,KAAK;IAE5B,IAAI,WAAW,EAAE;QACf,YAAY,GAAG,IAAI,CAAC;KACrB;IAED,IAAI,CAAC,iBAAM,CAAC,OAAO,IAAI,YAAY,EAAE;QACnC,6EAA6E;QAC7E,MAAM,WAAW,GAAG,MAAM,sBAAW,CAAC,eAAe,EAAE,CAAC;QAExD,IAAI,CAAC,WAAW,EAAE;YAChB,4DAA4D;YAC5D,qFAAqF;YACrF,OAAO;SACR;QAED,IAAI;YACF,IAAI,GAAG,CAAC;YACR,IAAI,QAAQ,KAAK,QAAQ,EAAE;gBACzB,GAAG,GAAG,MAAM,mBAAQ,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC;aAC1D;iBAAM,IAAI,QAAQ,KAAK,KAAK,EAAE;gBAC7B,GAAG,GAAG,MAAM,mBAAQ,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC;aAC3D;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,yBAAyB,QAAQ,EAAE,CAAC,CAAC;aACtD;YAED,MAAM,SAAS,GAAG,gBAAW,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;YACzD,MAAM,SAAS,CAAC,SAAS,CAAC,mCAAmC,EAAE;gBAC7D,IAAI,EAAE;oBACJ,OAAO,EAAE;wBACP,WAAW,EAAE,GAAG,GAAG,CAAC,IAAI,OAAO,YAAE,CAAC,QAAQ,EAAE,EAAE;wBAC9C,QAAQ,EAAE,YAAE,CAAC,QAAQ,EAAE;wBACvB,QAAQ;wBACR,MAAM,EAAE;4BACN,oFAAoF;4BACpF,WAAW,EAAE,GAAG,CAAC,WAAW;4BAC5B,IAAI,EAAE,GAAG,CAAC,IAAI;4BACd,IAAI,EAAE,GAAG,CAAC,IAAI;4BACd,YAAY,EAAE,GAAG,CAAC,YAAY;yBAC/B;wBACD,GAAG;wBACH,MAAM,EAAE,SAAS;qBAClB;iBACF;aACF,CAAC,CAAC;SACJ;QAAC,OAAO,CAAC,EAAE;YACV,iBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,+BAA+B,CAAC,EAAE,CAAC,CAAC;SAC5D;QAED,UAAU,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,WAAW,EAAE,GAAG,EAAE,QAAQ,CAAC,EAAE,qBAAqB,GAAG,IAAI,CAAC,CAAC;KAC1F;AACH,CAAC;AAvDD,oCAuDC;AAED,SAAgB,WAAW;IACzB,YAAY,GAAG,KAAK,CAAC;AACvB,CAAC;AAFD,kCAEC","sourcesContent":["import os from 'os';\n\nimport { ApiV2 as ApiV2Client, Config, Logger as logger, UrlUtils, UserManager } from './internal';\n\nconst UPDATE_FREQUENCY_SECS = 20;\n\nlet keepUpdating = true;\n\n// TODO notify www when a project is started, and every N seconds afterwards\nexport async function startSession(\n  projectRoot: string,\n  exp: any,\n  platform: 'native' | 'web',\n  forceUpdate: boolean = false\n): Promise<void> {\n  if (forceUpdate) {\n    keepUpdating = true;\n  }\n\n  if (!Config.offline && keepUpdating) {\n    // TODO(anp) if the user has configured device ids, then notify for those too\n    const authSession = await UserManager.getSessionAsync();\n\n    if (!authSession) {\n      // NOTE(brentvatne) let's just bail out in this case for now\n      // throw new Error('development sessions can only be initiated for logged in users');\n      return;\n    }\n\n    try {\n      let url;\n      if (platform === 'native') {\n        url = await UrlUtils.constructDeepLinkAsync(projectRoot);\n      } else if (platform === 'web') {\n        url = await UrlUtils.constructWebAppUrlAsync(projectRoot);\n      } else {\n        throw new Error(`Unsupported platform: ${platform}`);\n      }\n\n      const apiClient = ApiV2Client.clientForUser(authSession);\n      await apiClient.postAsync('development-sessions/notify-alive', {\n        data: {\n          session: {\n            description: `${exp.name} on ${os.hostname()}`,\n            hostname: os.hostname(),\n            platform,\n            config: {\n              // TODO: if icons are specified, upload a url for them too so people can distinguish\n              description: exp.description,\n              name: exp.name,\n              slug: exp.slug,\n              primaryColor: exp.primaryColor,\n            },\n            url,\n            source: 'desktop',\n          },\n        },\n      });\n    } catch (e) {\n      logger.global.debug(e, `Error updating dev session: ${e}`);\n    }\n\n    setTimeout(() => startSession(projectRoot, exp, platform), UPDATE_FREQUENCY_SECS * 1000);\n  }\n}\n\nexport function stopSession() {\n  keepUpdating = false;\n}\n"]}