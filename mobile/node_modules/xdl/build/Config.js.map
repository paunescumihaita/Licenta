{"version":3,"file":"Config.js","sourceRoot":"","sources":["../src/Config.ts"],"names":[],"mappings":";;;;;AAAA,oDAA4B;AAE5B,yCAAiC;AAyBjC,MAAM,SAAS,GAAwC;IACrD,KAAK,EAAE;QACL,MAAM,EAAE,MAAM;QACd,IAAI,EAAE,WAAW;QACjB,IAAI,EAAE,IAAI;KACX;IACD,OAAO,EAAE;QACP,MAAM,EAAE,gBAAM,CAAC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC;QAC5C,IAAI,EAAE,kBAAkB;QACxB,IAAI,EAAE,gBAAM,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,IAAI,IAAI;KACxC;IACD,UAAU,EAAE;QACV,MAAM,EAAE,gBAAM,CAAC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC;QAC5C,IAAI,EAAE,gBAAM,CAAC,MAAM,CAAC,UAAU,EAAE,UAAU,CAAC;QAC3C,IAAI,EAAE,gBAAM,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,IAAI,IAAI;KACxC;CACF,CAAC;AAEF,MAAM,eAAe,GAAwC;IAC3D,KAAK,EAAE;QACL,MAAM,EAAE,MAAM;QACd,IAAI,EAAE,WAAW;QACjB,IAAI,EAAE,IAAI;KACX;IACD,OAAO,EAAE;QACP,MAAM,EAAE,OAAO;QACf,IAAI,EAAE,wBAAwB;QAC9B,IAAI,EAAE,GAAG;KACV;IACD,UAAU,EAAE;QACV,MAAM,EAAE,OAAO;QACf,IAAI,EAAE,gBAAgB;QACtB,IAAI,EAAE,GAAG;KACV;CACF,CAAC;AAEF,IAAI,GAAG,GAAc,SAAS,CAAC,UAAU,CAAC;AAC1C,IAAI,SAAS,GAAc,eAAe,CAAC,UAAU,CAAC;AACtD,IAAI,cAAG,CAAC,OAAO,EAAE,EAAE;IACjB,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC;IACtB,SAAS,GAAG,eAAe,CAAC,KAAK,CAAC;CACnC;KAAM,IAAI,cAAG,CAAC,SAAS,EAAE,EAAE;IAC1B,GAAG,GAAG,SAAS,CAAC,OAAO,CAAC;IACxB,SAAS,GAAG,eAAe,CAAC,OAAO,CAAC;CACrC;AAED,MAAM,MAAM,GAAc;IACxB,GAAG;IACH,SAAS;IACT,KAAK,EAAE;QACL,SAAS,EAAE,6CAA6C;QACxD,iBAAiB,EAAE,uBAAuB;QAC1C,MAAM,EAAE,YAAY;KACrB;IACD,aAAa,EAAE,IAAI;IACnB,UAAU,EAAE;QACV,0BAA0B,EAAE,IAAI;KACjC;IACD,OAAO,EAAE,uBAAuB;IAChC,OAAO,EAAE,KAAK;CACf,CAAC;AAEF,kBAAe,MAAM,CAAC","sourcesContent":["import getenv from 'getenv';\n\nimport { Env } from './internal';\n\ninterface ApiConfig {\n  scheme: string;\n  host: string;\n  port: number | null;\n}\ninterface XDLConfig {\n  turtleApi: ApiConfig;\n  api: ApiConfig;\n  ngrok: {\n    authToken: string;\n    authTokenPublicId: string;\n    domain: string;\n  };\n  developerTool: string | null;\n  validation: {\n    reactNativeVersionWarnings: boolean;\n  };\n  helpUrl: string;\n  offline: boolean;\n}\n\ntype Environment = 'local' | 'staging' | 'production';\n\nconst apiConfig: { [env in Environment]: ApiConfig } = {\n  local: {\n    scheme: 'http',\n    host: 'localhost',\n    port: 3000,\n  },\n  staging: {\n    scheme: getenv.string('XDL_SCHEME', 'https'),\n    host: 'staging.exp.host',\n    port: getenv.int('XDL_PORT', 0) || null,\n  },\n  production: {\n    scheme: getenv.string('XDL_SCHEME', 'https'),\n    host: getenv.string('XDL_HOST', 'exp.host'),\n    port: getenv.int('XDL_PORT', 0) || null,\n  },\n};\n\nconst turtleApiConfig: { [env in Environment]: ApiConfig } = {\n  local: {\n    scheme: 'http',\n    host: 'localhost',\n    port: 3006,\n  },\n  staging: {\n    scheme: 'https',\n    host: 'staging.turtle.expo.io',\n    port: 443,\n  },\n  production: {\n    scheme: 'https',\n    host: 'turtle.expo.io',\n    port: 443,\n  },\n};\n\nlet api: ApiConfig = apiConfig.production;\nlet turtleApi: ApiConfig = turtleApiConfig.production;\nif (Env.isLocal()) {\n  api = apiConfig.local;\n  turtleApi = turtleApiConfig.local;\n} else if (Env.isStaging()) {\n  api = apiConfig.staging;\n  turtleApi = turtleApiConfig.staging;\n}\n\nconst config: XDLConfig = {\n  api,\n  turtleApi,\n  ngrok: {\n    authToken: '5W1bR67GNbWcXqmxZzBG1_56GezNeaX6sSRvn8npeQ8',\n    authTokenPublicId: '5W1bR67GNbWcXqmxZzBG1',\n    domain: 'exp.direct',\n  },\n  developerTool: null,\n  validation: {\n    reactNativeVersionWarnings: true,\n  },\n  helpUrl: 'https://docs.expo.io/',\n  offline: false,\n};\n\nexport default config;\n"]}