{"version":3,"file":"UrlUtils.js","sourceRoot":"","sources":["../src/UrlUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport joi from '@hapi/joi';\nimport assert from 'assert';\nimport os from 'os';\nimport QueryString from 'querystring';\nimport resolveFrom from 'resolve-from';\nimport url from 'url';\n\nimport { Config, ip, ProjectSettings, ProjectUtils, Versions, XDLError } from './internal';\n\ninterface URLOptions extends Omit<ProjectSettings.ProjectSettings, 'urlRandomness'> {\n  urlType: null | 'exp' | 'http' | 'no-protocol' | 'redirect' | 'custom';\n}\n\ninterface MetroQueryOptions {\n  dev?: boolean;\n  strict?: boolean;\n  minify?: boolean;\n}\n\nexport async function constructBundleUrlAsync(\n  projectRoot: string,\n  opts: Partial<URLOptions>,\n  requestHostname?: string\n) {\n  return await constructUrlAsync(projectRoot, opts, true, requestHostname);\n}\n\nexport async function constructDeepLinkAsync(\n  projectRoot: string,\n  opts?: Partial<URLOptions>,\n  requestHostname?: string\n) {\n  const { devClient } = await ProjectSettings.getPackagerOptsAsync(projectRoot);\n\n  if (devClient) {\n    return constructDevClientUrlAsync(projectRoot, opts, requestHostname);\n  } else {\n    return constructManifestUrlAsync(projectRoot, opts, requestHostname);\n  }\n}\n\nexport async function constructManifestUrlAsync(\n  projectRoot: string,\n  opts?: Partial<URLOptions>,\n  requestHostname?: string\n) {\n  return await constructUrlAsync(projectRoot, opts ?? null, false, requestHostname);\n}\n\nexport async function constructDevClientUrlAsync(\n  projectRoot: string,\n  opts?: Partial<URLOptions>,\n  requestHostname?: string\n) {\n  const { scheme } = await ProjectSettings.getPackagerOptsAsync(projectRoot);\n  if (!scheme || typeof scheme !== 'string') {\n    throw new XDLError('NO_DEV_CLIENT_SCHEME', 'No scheme specified for development client');\n  }\n  const protocol = resolveProtocol(projectRoot, { scheme, urlType: 'custom' });\n  const manifestUrl = await constructManifestUrlAsync(\n    projectRoot,\n    { ...opts, urlType: 'http' },\n    requestHostname\n  );\n  return `${protocol}://expo-development-client/?url=${encodeURIComponent(manifestUrl)}`;\n}\n\n// gets the base manifest URL and removes the scheme\nexport async function constructHostUriAsync(\n  projectRoot: string,\n  requestHostname?: string\n): Promise<string> {\n  const urlString = await constructUrlAsync(projectRoot, null, false, requestHostname);\n  // we need to use node's legacy urlObject api since the newer one doesn't like empty protocols\n  const urlObj = url.parse(urlString);\n  urlObj.protocol = '';\n  urlObj.slashes = false;\n  return url.format(urlObj);\n}\n\nexport async function constructLogUrlAsync(\n  projectRoot: string,\n  requestHostname?: string\n): Promise<string> {\n  const baseUrl = await constructUrlAsync(projectRoot, { urlType: 'http' }, false, requestHostname);\n  return `${baseUrl}/logs`;\n}\n\nexport async function constructUrlWithExtensionAsync(\n  projectRoot: string,\n  entryPoint: string,\n  ext: string,\n  requestHostname?: string,\n  metroQueryOptions?: MetroQueryOptions\n) {\n  const defaultOpts = {\n    dev: false,\n    minify: true,\n  };\n  metroQueryOptions = metroQueryOptions || defaultOpts;\n  let bundleUrl = await constructBundleUrlAsync(\n    projectRoot,\n    {\n      hostType: 'localhost',\n      urlType: 'http',\n    },\n    requestHostname\n  );\n\n  const mainModulePath = stripJSExtension(entryPoint);\n  bundleUrl += `/${mainModulePath}.${ext}`;\n\n  const queryParams = constructBundleQueryParams(projectRoot, metroQueryOptions);\n  return `${bundleUrl}?${queryParams}`;\n}\n\nexport async function constructPublishUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string,\n  metroQueryOptions?: MetroQueryOptions\n): Promise<string> {\n  return await constructUrlWithExtensionAsync(\n    projectRoot,\n    entryPoint,\n    'bundle',\n    requestHostname,\n    metroQueryOptions\n  );\n}\n\nexport async function constructSourceMapUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string\n): Promise<string> {\n  return await constructUrlWithExtensionAsync(projectRoot, entryPoint, 'map', requestHostname);\n}\n\nexport async function constructAssetsUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string\n): Promise<string> {\n  return await constructUrlWithExtensionAsync(projectRoot, entryPoint, 'assets', requestHostname);\n}\n\nexport async function constructDebuggerHostAsync(\n  projectRoot: string,\n  requestHostname?: string\n): Promise<string> {\n  return await constructUrlAsync(\n    projectRoot,\n    {\n      urlType: 'no-protocol',\n    },\n    true,\n    requestHostname\n  );\n}\n\nexport function constructBundleQueryParams(projectRoot: string, opts: MetroQueryOptions): string {\n  const { exp } = getConfig(projectRoot);\n  return constructBundleQueryParamsWithConfig(projectRoot, opts, exp);\n}\n\nexport function constructBundleQueryParamsWithConfig(\n  projectRoot: string,\n  opts: MetroQueryOptions,\n  exp: Pick<ExpoConfig, 'sdkVersion'>\n): string {\n  const queryParams: Record<string, boolean | string> = {\n    dev: !!opts.dev,\n    hot: false,\n  };\n\n  if ('strict' in opts) {\n    queryParams.strict = !!opts.strict;\n  }\n\n  if ('minify' in opts) {\n    // TODO: Maybe default this to true if dev is false\n    queryParams.minify = !!opts.minify;\n  }\n\n  // No special requirements after SDK 33 (Jun 5 2019)\n  if (Versions.gteSdkVersion(exp, '33.0.0')) {\n    return QueryString.stringify(queryParams);\n  }\n\n  // TODO: Remove this ...\n\n  // SDK11 to SDK32 require us to inject hashAssetFiles through the params, but this is not\n  // needed with SDK33+\n  const supportsAssetPlugins = Versions.gteSdkVersion(exp, '11.0.0');\n  const usesAssetPluginsQueryParam = supportsAssetPlugins && Versions.lteSdkVersion(exp, '32.0.0');\n  if (usesAssetPluginsQueryParam) {\n    // Use an absolute path here so that we can not worry about symlinks/relative requires\n    const pluginModule = resolveFrom(projectRoot, 'expo/tools/hashAssetFiles');\n    queryParams.assetPlugin = encodeURIComponent(pluginModule);\n  } else if (!supportsAssetPlugins) {\n    // Only sdk-10.1.0+ supports the assetPlugin parameter. We use only the\n    // major version in the sdkVersion field, so check for 11.0.0 to be sure.\n    queryParams.includeAssetFileHashes = true;\n  }\n\n  return QueryString.stringify(queryParams);\n}\n\nexport async function constructWebAppUrlAsync(\n  projectRoot: string,\n  options: { hostType?: 'localhost' | 'lan' | 'tunnel' } = {}\n): Promise<string | null> {\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.webpackServerPort) {\n    return null;\n  }\n\n  const { https, hostType } = await ProjectSettings.readAsync(projectRoot);\n  const host = (options.hostType ?? hostType) === 'localhost' ? 'localhost' : ip.address();\n\n  let urlType = 'http';\n  if (https === true) {\n    urlType = 'https';\n  }\n\n  return `${urlType}://${host}:${packagerInfo.webpackServerPort}`;\n}\n\nfunction assertValidOptions(opts: Partial<URLOptions>): URLOptions {\n  const schema = joi.object().keys({\n    devClient: joi.boolean().optional(),\n    scheme: joi.string().optional().allow(null),\n    // Replaced by `scheme`\n    urlType: joi.any().valid('exp', 'http', 'redirect', 'no-protocol').allow(null),\n    lanType: joi.any().valid('ip', 'hostname'),\n    hostType: joi.any().valid('localhost', 'lan', 'tunnel'),\n    dev: joi.boolean(),\n    strict: joi.boolean(),\n    minify: joi.boolean(),\n    https: joi.boolean().optional(),\n    urlRandomness: joi.string().optional().allow(null),\n  });\n\n  const { error } = schema.validate(opts);\n  if (error) {\n    throw new XDLError('INVALID_OPTIONS', error.toString());\n  }\n\n  return opts as URLOptions;\n}\n\nasync function ensureOptionsAsync(\n  projectRoot: string,\n  opts: Partial<URLOptions> | null\n): Promise<URLOptions> {\n  if (opts) {\n    assertValidOptions(opts);\n  }\n\n  const defaultOpts = await ProjectSettings.getPackagerOptsAsync(projectRoot);\n  if (!opts) {\n    return { urlType: null, ...defaultOpts };\n  }\n  const optionsWithDefaults = { ...defaultOpts, ...opts };\n  return assertValidOptions(optionsWithDefaults);\n}\n\nfunction resolveProtocol(\n  projectRoot: string,\n  { urlType, ...options }: Pick<URLOptions, 'urlType' | 'scheme'>\n): string | null {\n  if (urlType === 'http') {\n    return 'http';\n  } else if (urlType === 'no-protocol') {\n    return null;\n  } else if (urlType === 'custom') {\n    return options.scheme;\n  }\n  let protocol = 'exp';\n\n  const { exp } = getConfig(projectRoot);\n\n  // We only use these values from the config\n  const { scheme, detach, sdkVersion } = exp;\n\n  if (detach) {\n    // Normalize schemes and filter invalid schemes.\n    const schemes = (Array.isArray(scheme) ? scheme : [scheme]).filter(\n      (scheme: any) => typeof scheme === 'string' && !!scheme\n    );\n    // Get the first valid scheme.\n    const firstScheme = schemes[0];\n    if (firstScheme && Versions.gteSdkVersion({ sdkVersion }, '27.0.0')) {\n      protocol = firstScheme;\n    } else if (detach.scheme) {\n      // must keep this fallback in place for older projects\n      // and those detached with an older version of xdl\n      protocol = detach.scheme;\n    }\n  }\n\n  return protocol;\n}\n\nexport async function constructUrlAsync(\n  projectRoot: string,\n  incomingOpts: Partial<URLOptions> | null,\n  isPackager: boolean,\n  requestHostname?: string\n): Promise<string> {\n  const opts = await ensureOptionsAsync(projectRoot, incomingOpts);\n\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n\n  let protocol = resolveProtocol(projectRoot, opts);\n\n  let hostname;\n  let port;\n\n  const proxyURL = isPackager\n    ? process.env.EXPO_PACKAGER_PROXY_URL\n    : process.env.EXPO_MANIFEST_PROXY_URL;\n  if (proxyURL) {\n    const parsedProxyURL = url.parse(proxyURL);\n    hostname = parsedProxyURL.hostname;\n    port = parsedProxyURL.port;\n    if (parsedProxyURL.protocol === 'https:') {\n      if (protocol === 'http') {\n        protocol = 'https';\n      }\n      if (!port) {\n        port = '443';\n      }\n    }\n  } else if (opts.hostType === 'localhost' || requestHostname === 'localhost') {\n    hostname = '127.0.0.1';\n    port = isPackager ? packagerInfo.packagerPort : packagerInfo.expoServerPort;\n  } else if (opts.hostType === 'lan' || Config.offline) {\n    if (process.env.EXPO_PACKAGER_HOSTNAME) {\n      hostname = process.env.EXPO_PACKAGER_HOSTNAME.trim();\n    } else if (process.env.REACT_NATIVE_PACKAGER_HOSTNAME) {\n      hostname = process.env.REACT_NATIVE_PACKAGER_HOSTNAME.trim();\n    } else if (opts.lanType === 'ip') {\n      if (requestHostname) {\n        hostname = requestHostname;\n      } else {\n        hostname = ip.address();\n      }\n    } else {\n      // Some old versions of OSX work with hostname but not local ip address.\n      hostname = os.hostname();\n    }\n    port = isPackager ? packagerInfo.packagerPort : packagerInfo.expoServerPort;\n  } else {\n    const ngrokUrl = isPackager ? packagerInfo.packagerNgrokUrl : packagerInfo.expoServerNgrokUrl;\n    if (!ngrokUrl || typeof ngrokUrl !== 'string') {\n      // TODO: if you start with --tunnel flag then this warning will always\n      // show up right before the tunnel starts...\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        'Tunnel URL not found (it might not be ready yet), falling back to LAN URL.',\n        'tunnel-url-not-found'\n      );\n      return constructUrlAsync(\n        projectRoot,\n        { ...opts, hostType: 'lan' },\n        isPackager,\n        requestHostname\n      );\n    } else {\n      ProjectUtils.clearNotification(projectRoot, 'tunnel-url-not-found');\n      const pnu = url.parse(ngrokUrl);\n      hostname = pnu.hostname;\n      port = pnu.port;\n    }\n  }\n\n  const url_ = joinURLComponents({ protocol, hostname, port });\n\n  if (opts.urlType === 'redirect') {\n    return createRedirectURL(url_);\n  }\n\n  return url_;\n}\n\nfunction createRedirectURL(url: string): string {\n  return `https://exp.host/--/to-exp/${encodeURIComponent(url)}`;\n}\n\nfunction joinURLComponents({\n  protocol,\n  hostname,\n  port,\n}: {\n  protocol?: string | null;\n  hostname?: string | null;\n  port?: string | number | null;\n}): string {\n  assert(hostname, 'hostname cannot be inferred.');\n  // Android HMR breaks without this port 80\n  const validPort = port ?? '80';\n  const validProtocol = protocol ? `${protocol}://` : '';\n\n  return `${validProtocol}${hostname}:${validPort}`;\n}\n\nexport function stripJSExtension(entryPoint: string): string {\n  return entryPoint.replace(/\\.js$/, '');\n}\n\nexport function randomIdentifier(length: number = 6): string {\n  const alphabet = '23456789qwertyuipasdfghjkzxcvbnm';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    const j = Math.floor(Math.random() * alphabet.length);\n    const c = alphabet.substr(j, 1);\n    result += c;\n  }\n  return result;\n}\n\nexport function sevenDigitIdentifier(): string {\n  return `${randomIdentifier(3)}-${randomIdentifier(4)}`;\n}\n\nexport function randomIdentifierForUser(username: string): string {\n  return `${username}-${randomIdentifier(3)}-${randomIdentifier(2)}`;\n}\n\nexport function someRandomness(): string {\n  return [randomIdentifier(2), randomIdentifier(3)].join('-');\n}\n\nexport function domainify(s: string): string {\n  return s\n    .toLowerCase()\n    .replace(/[^a-z0-9-]/g, '-')\n    .replace(/^-+/, '')\n    .replace(/-+$/, '');\n}\n\nexport function isHttps(urlString: string): boolean {\n  return isURL(urlString, { protocols: ['https'] });\n}\n\nexport function isURL(\n  urlString: string,\n  { protocols, requireProtocol }: { protocols?: string[]; requireProtocol?: boolean }\n) {\n  try {\n    // eslint-disable-next-line\n    new url.URL(urlString);\n    const parsed = url.parse(urlString);\n    if (!parsed.protocol && !requireProtocol) {\n      return true;\n    }\n    return protocols\n      ? parsed.protocol\n        ? protocols.map(x => `${x.toLowerCase()}:`).includes(parsed.protocol)\n        : false\n      : true;\n  } catch (err) {\n    return false;\n  }\n}\n"]}