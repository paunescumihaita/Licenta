{"version":3,"file":"choosePortAsync.js","sourceRoot":"","sources":["../../src/utils/choosePortAsync.ts"],"names":[],"mappings":";;;;;AAAA,kDAA0B;AAC1B,oEAA2C;AAC3C,sDAA6B;AAE7B,uDAA+B;AAC/B,wCAA0C;AAC1C,2DAAwD;AAEjD,KAAK,UAAU,eAAe,CACnC,WAAmB,EACnB,WAAmB,EACnB,IAAa;IAEb,IAAI;QACF,MAAM,IAAI,GAAG,MAAM,wBAAa,CAAC,WAAW,EAAE,EAAE,SAAS,EAAE,CAAC,IAAI,aAAJ,IAAI,cAAJ,IAAI,GAAI,IAAI,CAAC,EAAE,CAAC,CAAC;QAC7E,IAAI,IAAI,KAAK,WAAW,EAAE;YACxB,OAAO,IAAI,CAAC;SACb;QAED,MAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,KAAK,OAAO,IAAI,WAAW,GAAG,IAAI,IAAI,CAAC,iBAAM,EAAE,CAAC;QAErF,IAAI,OAAO,GAAG,YAAY;YACxB,CAAC,CAAC,qEAAqE;YACvE,CAAC,CAAC,QAAQ,eAAK,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;QAEzC,MAAM,cAAc,GAAG,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,qCAAiB,CAAC,WAAW,CAAC,CAAC;QAE5E,IAAI,cAAc,EAAE;YAClB,MAAM,MAAM,GAAG,eAAK,CAAC,IAAI,CAAC,QAAQ,cAAc,CAAC,GAAG,GAAG,CAAC,CAAC;YACzD,IAAI,cAAc,CAAC,SAAS,KAAK,WAAW,EAAE;gBAC5C,OAAO,IAAI,qCAAqC,CAAC;aAClD;iBAAM;gBACL,OAAO,IAAI,YAAY,eAAK,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,oBAAoB,CAAC;aAC/E;YACD,OAAO,IAAI,IAAI,GAAG,eAAK,CAAC,IAAI,CAAC,KAAK,cAAc,CAAC,SAAS,IAAI,MAAM,EAAE,CAAC,CAAC;SACzE;QAED,gBAAM,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,OAAO,EAAE,CAAC,CAAC;QACxC,MAAM,MAAM,GAAG,MAAM,sBAAY,CAAC;YAChC,OAAO,EAAE,YAAY,IAAI,WAAW;YACpC,OAAO,EAAE,IAAI;SACd,CAAC,CAAC;QACH,OAAO,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;KAC7B;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,KAAK,CAAC,IAAI,KAAK,SAAS,EAAE;YAC5B,MAAM,KAAK,CAAC;SACb;aAAM,IAAI,KAAK,CAAC,IAAI,KAAK,iBAAiB,EAAE;YAC3C,gBAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAClC,OAAO,IAAI,CAAC;SACb;QACD,MAAM,KAAK,CAAC;KACb;AACH,CAAC;AA5CD,0CA4CC","sourcesContent":["import chalk from 'chalk';\nimport freeportAsync from 'freeport-async';\nimport isRoot from 'is-root';\n\nimport Logger from '../Logger';\nimport { confirmAsync } from '../Prompts';\nimport { getRunningProcess } from './getRunningProcess';\n\nexport async function choosePortAsync(\n  projectRoot: string,\n  defaultPort: number,\n  host?: string\n): Promise<number | null> {\n  try {\n    const port = await freeportAsync(defaultPort, { hostnames: [host ?? null] });\n    if (port === defaultPort) {\n      return port;\n    }\n\n    const isRestricted = process.platform !== 'win32' && defaultPort < 1024 && !isRoot();\n\n    let message = isRestricted\n      ? `Admin permissions are required to run a server on a port below 1024`\n      : `Port ${chalk.bold(defaultPort)} is`;\n\n    const runningProcess = isRestricted ? null : getRunningProcess(defaultPort);\n\n    if (runningProcess) {\n      const pidTag = chalk.gray(`(pid ${runningProcess.pid})`);\n      if (runningProcess.directory === projectRoot) {\n        message += ` running this app in another window`;\n      } else {\n        message += ` running ${chalk.cyan(runningProcess.command)} in another window`;\n      }\n      message += '\\n' + chalk.gray(`  ${runningProcess.directory} ${pidTag}`);\n    }\n\n    Logger.global.info(`\\u203A ${message}`);\n    const change = await confirmAsync({\n      message: `Use port ${port} instead?`,\n      initial: true,\n    });\n    return change ? port : null;\n  } catch (error) {\n    if (error.code === 'ABORTED') {\n      throw error;\n    } else if (error.code === 'NON_INTERACTIVE') {\n      Logger.global.warn(error.message);\n      return null;\n    }\n    throw error;\n  }\n}\n"]}