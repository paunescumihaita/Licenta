"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const path = __importStar(require("path"));
const defaultOptions = {
    encoding: 'utf8',
    stdio: ['pipe', 'pipe', 'ignore'],
};
function getPID(port) {
    return child_process_1.execFileSync('lsof', [`-i:${port}`, '-P', '-t', '-sTCP:LISTEN'], defaultOptions)
        .split('\n')[0]
        .trim();
}
function getPackageName(packageRoot) {
    const packageJson = path.join(packageRoot.trim(), 'package.json');
    try {
        return require(packageJson).name || null;
    }
    catch (_a) {
        return null;
    }
}
function getProcessCommand(pid, procDirectory) {
    const results = child_process_1.execSync(`ps -o command -p ${pid} | sed -n 2p`, defaultOptions)
        .replace(/\n$/, '')
        .trim();
    const name = getPackageName(procDirectory);
    return name ? name : results;
}
function getDirectoryOfProcessById(processId) {
    return child_process_1.execSync('lsof -p ' + processId + ' | awk \'$4=="cwd" {for (i=9; i<=NF; i++) printf "%s ", $i}\'', defaultOptions).trim();
}
function getRunningProcess(port) {
    try {
        // 63828
        const pid = getPID(port);
        // /Users/evanbacon/Documents/GitHub/lab/myapp
        const directory = getDirectoryOfProcessById(pid);
        // /Users/evanbacon/Documents/GitHub/lab/myapp/package.json
        const command = getProcessCommand(pid, directory);
        // TODO: Have a better message for reusing another process.
        return { pid, directory, command };
    }
    catch (_a) {
        return null;
    }
}
exports.getRunningProcess = getRunningProcess;
//# sourceMappingURL=getRunningProcess.js.map