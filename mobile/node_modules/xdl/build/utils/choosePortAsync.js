"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const freeport_async_1 = __importDefault(require("freeport-async"));
const is_root_1 = __importDefault(require("is-root"));
const Logger_1 = __importDefault(require("../Logger"));
const Prompts_1 = require("../Prompts");
const getRunningProcess_1 = require("./getRunningProcess");
async function choosePortAsync(projectRoot, defaultPort, host) {
    try {
        const port = await freeport_async_1.default(defaultPort, { hostnames: [host !== null && host !== void 0 ? host : null] });
        if (port === defaultPort) {
            return port;
        }
        const isRestricted = process.platform !== 'win32' && defaultPort < 1024 && !is_root_1.default();
        let message = isRestricted
            ? `Admin permissions are required to run a server on a port below 1024`
            : `Port ${chalk_1.default.bold(defaultPort)} is`;
        const runningProcess = isRestricted ? null : getRunningProcess_1.getRunningProcess(defaultPort);
        if (runningProcess) {
            const pidTag = chalk_1.default.gray(`(pid ${runningProcess.pid})`);
            if (runningProcess.directory === projectRoot) {
                message += ` running this app in another window`;
            }
            else {
                message += ` running ${chalk_1.default.cyan(runningProcess.command)} in another window`;
            }
            message += '\n' + chalk_1.default.gray(`  ${runningProcess.directory} ${pidTag}`);
        }
        Logger_1.default.global.info(`\u203A ${message}`);
        const change = await Prompts_1.confirmAsync({
            message: `Use port ${port} instead?`,
            initial: true,
        });
        return change ? port : null;
    }
    catch (error) {
        if (error.code === 'ABORTED') {
            throw error;
        }
        else if (error.code === 'NON_INTERACTIVE') {
            Logger_1.default.global.warn(error.message);
            return null;
        }
        throw error;
    }
}
exports.choosePortAsync = choosePortAsync;
//# sourceMappingURL=choosePortAsync.js.map