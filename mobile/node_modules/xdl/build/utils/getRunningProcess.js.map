{"version":3,"file":"getRunningProcess.js","sourceRoot":"","sources":["../../src/utils/getRunningProcess.ts"],"names":[],"mappings":";;;;;;;;;AAAA,iDAA0F;AAC1F,2CAA6B;AAE7B,MAAM,cAAc,GAAsC;IACxD,QAAQ,EAAE,MAAM;IAChB,KAAK,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC;CAClC,CAAC;AAEF,SAAS,MAAM,CAAC,IAAY;IAC1B,OAAO,4BAAY,CAAC,MAAM,EAAE,CAAC,MAAM,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,cAAc,CAAC,EAAE,cAAc,CAAC;SACpF,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACd,IAAI,EAAE,CAAC;AACZ,CAAC;AAED,SAAS,cAAc,CAAC,WAAmB;IACzC,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,cAAc,CAAC,CAAC;IAClE,IAAI;QACF,OAAO,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;KAC1C;IAAC,WAAM;QACN,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AAED,SAAS,iBAAiB,CAAC,GAAW,EAAE,aAAqB;IAC3D,MAAM,OAAO,GAAG,wBAAQ,CAAC,oBAAoB,GAAG,cAAc,EAAE,cAAc,CAAC;SAC5E,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;SAClB,IAAI,EAAE,CAAC;IAEV,MAAM,IAAI,GAAG,cAAc,CAAC,aAAa,CAAC,CAAC;IAC3C,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC;AAC/B,CAAC;AAED,SAAS,yBAAyB,CAAC,SAAiB;IAClD,OAAO,wBAAQ,CACb,UAAU,GAAG,SAAS,GAAG,+DAA+D,EACxF,cAAc,CACf,CAAC,IAAI,EAAE,CAAC;AACX,CAAC;AAED,SAAgB,iBAAiB,CAC/B,IAAY;IAEZ,IAAI;QACF,QAAQ;QACR,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;QACzB,8CAA8C;QAC9C,MAAM,SAAS,GAAG,yBAAyB,CAAC,GAAG,CAAC,CAAC;QACjD,2DAA2D;QAC3D,MAAM,OAAO,GAAG,iBAAiB,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;QAClD,2DAA2D;QAC3D,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC;KACpC;IAAC,WAAM;QACN,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AAfD,8CAeC","sourcesContent":["import { execFileSync, execSync, ExecSyncOptionsWithStringEncoding } from 'child_process';\nimport * as path from 'path';\n\nconst defaultOptions: ExecSyncOptionsWithStringEncoding = {\n  encoding: 'utf8',\n  stdio: ['pipe', 'pipe', 'ignore'],\n};\n\nfunction getPID(port: number) {\n  return execFileSync('lsof', [`-i:${port}`, '-P', '-t', '-sTCP:LISTEN'], defaultOptions)\n    .split('\\n')[0]\n    .trim();\n}\n\nfunction getPackageName(packageRoot: string): string | null {\n  const packageJson = path.join(packageRoot.trim(), 'package.json');\n  try {\n    return require(packageJson).name || null;\n  } catch {\n    return null;\n  }\n}\n\nfunction getProcessCommand(pid: string, procDirectory: string): string {\n  const results = execSync(`ps -o command -p ${pid} | sed -n 2p`, defaultOptions)\n    .replace(/\\n$/, '')\n    .trim();\n\n  const name = getPackageName(procDirectory);\n  return name ? name : results;\n}\n\nfunction getDirectoryOfProcessById(processId: string): string {\n  return execSync(\n    'lsof -p ' + processId + ' | awk \\'$4==\"cwd\" {for (i=9; i<=NF; i++) printf \"%s \", $i}\\'',\n    defaultOptions\n  ).trim();\n}\n\nexport function getRunningProcess(\n  port: number\n): { pid: string; directory: string; command: string } | null {\n  try {\n    // 63828\n    const pid = getPID(port);\n    // /Users/evanbacon/Documents/GitHub/lab/myapp\n    const directory = getDirectoryOfProcessById(pid);\n    // /Users/evanbacon/Documents/GitHub/lab/myapp/package.json\n    const command = getProcessCommand(pid, directory);\n    // TODO: Have a better message for reusing another process.\n    return { pid, directory, command };\n  } catch {\n    return null;\n  }\n}\n"]}