{"version":3,"file":"ThirdParty.js","sourceRoot":"","sources":["../src/ThirdParty.ts"],"names":[],"mappings":";;;;;AAAA,kDAAkD;AAElD,yCAAgD;AAEzC,KAAK,UAAU,WAAW,CAC/B,SAAiB,EACjB,EAAE,QAAQ,GAAG,KAAK,KAA+C,EAAE;IAEnE,MAAM,GAAG,GAAuB;QAC9B,GAAG,EAAE,SAAS;QACd,MAAM,EAAE,KAAK;QACb,OAAO,EAAE,EAAE,MAAM,EAAE,wCAAwC,EAAE;KAC9D,CAAC;IAEF,IAAI,GAAG,CAAC;IACR,IAAI;QACF,MAAM,IAAI,GAAG,MAAM,eAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACtC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;KACjB;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,mBAAQ,CAChB,kBAAkB,EAClB,iCAAiC,SAAS,IAAI,GAAG,CAAC,CAAC,QAAQ,EAAE,CAC9D,CAAC;KACH;IACD,GAAG,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;IAC7C,IAAI,GAAG,CAAC,QAAQ,KAAK,QAAQ,IAAI,QAAQ,KAAK,KAAK,EAAE;QACnD,MAAM,IAAI,mBAAQ,CAChB,kBAAkB,EAClB,iBAAiB,SAAS,+BAA+B,QAAQ,WAAW,CAC7E,CAAC;KACH;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AA5BD,kCA4BC;AAED,0DAA0D;AAC1D,6CAA6C;AAC7C,KAAK,UAAU,gBAAgB,CAAC,UAAe,EAAE,SAAiB;IAChE,2DAA2D;IAC3D,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;QAC9B,OAAO,UAAU,CAAC;KACnB;IAED,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,mBAAQ,CAAC,aAAa,EAAE,CAAC;IACvD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC1C,MAAM,iBAAiB,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,UAAU,GAAG,iBAAiB,CAAC,UAAU,CAAC;QAChD,IAAI,CAAC,UAAU,EAAE;YACf,SAAS;SACV;QACD,MAAM,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;QAC3C,IAAI,CAAC,UAAU,EAAE;YACf,SAAS;SACV;QAED,MAAM,YAAY,GAAG,UAAU,CAAC,YAAY,IAAI,KAAK,CAAC;QACtD,IAAI,CAAC,YAAY,EAAE;YACjB,OAAO,iBAAiB,CAAC;SAC1B;KACF;IACD,MAAM,iBAAiB,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACnD,MAAM,IAAI,mBAAQ,CAChB,kBAAkB,EAClB,mCAAmC,SAAS,mDAAmD,IAAI,CAAC,SAAS,CAC3G,iBAAiB,CAClB,EAAE,CACJ,CAAC;AACJ,CAAC","sourcesContent":["import axios, { AxiosRequestConfig } from 'axios';\n\nimport { Versions, XDLError } from './internal';\n\nexport async function getManifest(\n  publicUrl: string,\n  { platform = 'all' }: { platform?: 'android' | 'ios' | 'all' } = {}\n) {\n  const req: AxiosRequestConfig = {\n    url: publicUrl,\n    method: 'get',\n    headers: { Accept: 'application/expo+json,application/json' },\n  };\n\n  let exp;\n  try {\n    const resp = await axios.request(req);\n    exp = resp.data;\n  } catch (e) {\n    throw new XDLError(\n      'INVALID_MANIFEST',\n      `Unable to fetch manifest from ${publicUrl}. ` + e.toString()\n    );\n  }\n  exp = await _extractManifest(exp, publicUrl);\n  if (exp.platform !== platform && platform !== 'all') {\n    throw new XDLError(\n      'INVALID_MANIFEST',\n      `Manifest from ${publicUrl} is not compatible with the ${platform} platform`\n    );\n  }\n  return exp;\n}\n\n// Third party publicUrls can return an array of manifests\n// We need to choose the first compatible one\nasync function _extractManifest(expOrArray: any, publicUrl: string) {\n  // if its not an array, assume it was a single manifest obj\n  if (!Array.isArray(expOrArray)) {\n    return expOrArray;\n  }\n\n  const { sdkVersions } = await Versions.versionsAsync();\n  for (let i = 0; i < expOrArray.length; i++) {\n    const manifestCandidate = expOrArray[i];\n    const sdkVersion = manifestCandidate.sdkVersion;\n    if (!sdkVersion) {\n      continue;\n    }\n    const versionObj = sdkVersions[sdkVersion];\n    if (!versionObj) {\n      continue;\n    }\n\n    const isDeprecated = versionObj.isDeprecated || false;\n    if (!isDeprecated) {\n      return manifestCandidate;\n    }\n  }\n  const supportedVersions = Object.keys(sdkVersions);\n  throw new XDLError(\n    'INVALID_MANIFEST',\n    `No compatible manifest found at ${publicUrl}. Please use one of the SDK versions supported: ${JSON.stringify(\n      supportedVersions\n    )}`\n  );\n}\n"]}