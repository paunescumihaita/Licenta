"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const spawn_async_1 = __importDefault(require("@expo/spawn-async"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const p_timeout_1 = __importDefault(require("p-timeout"));
const path_1 = __importDefault(require("path"));
const internal_1 = require("./internal");
const WAIT_FOR_WATCHMAN_VERSION_MS = 3000;
function isPlatformSupported() {
    return process.platform === 'darwin';
}
exports.isPlatformSupported = isPlatformSupported;
async function addToPathAsync() {
    if (!isPlatformSupported()) {
        return;
    }
    await internal_1.Binaries.addToPathAsync('watchman');
}
exports.addToPathAsync = addToPathAsync;
async function unblockAndGetVersionAsync(projectRoot) {
    if (!isPlatformSupported()) {
        return null;
    }
    try {
        // `watchman version` returns:
        // {
        //  "version": "4.7.0"
        // }
        const result = await _unblockAndVersionAsync(projectRoot);
        const watchmanVersion = JSON.parse(result.stdout.trim()).version;
        return watchmanVersion;
    }
    catch (e) {
        // TODO: Maybe check to make sure this is ENOENT (which means watchman isn't installed)
        // We might want to report other errors
        return null;
    }
}
exports.unblockAndGetVersionAsync = unblockAndGetVersionAsync;
async function _unblockAndVersionAsync(projectRoot) {
    try {
        return await p_timeout_1.default(_versionAsync(), WAIT_FOR_WATCHMAN_VERSION_MS);
    }
    catch (error) {
        await _unblockAsync(projectRoot);
        return await p_timeout_1.default(_versionAsync(), WAIT_FOR_WATCHMAN_VERSION_MS, '`watchman version` failed even after `launchctl unload`');
    }
}
async function _unblockAsync(projectRoot) {
    if (process.env.TMPDIR && process.env.USER) {
        // XDL's copy of watchman:
        fs_extra_1.default.removeSync(path_1.default.join(process.env.TMPDIR, `${process.env.USER}-state`));
        // homebrew's watchman:
        fs_extra_1.default.removeSync(`/usr/local/var/run/watchman/${process.env.USER}-state`);
    }
    if (process.platform === 'darwin') {
        await spawn_async_1.default('launchctl', [
            'unload',
            '-F',
            '~/Library/LaunchAgents/com.github.facebook.watchman.plist',
        ]);
    }
    if (projectRoot) {
        await spawn_async_1.default('watchman', ['watch-del', projectRoot]);
        await spawn_async_1.default('watchman', ['watch-project', projectRoot]);
    }
}
async function _versionAsync() {
    return await spawn_async_1.default('watchman', ['version']);
}
//# sourceMappingURL=Watchman.js.map