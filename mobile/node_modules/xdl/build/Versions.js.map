{"version":3,"file":"Versions.js","sourceRoot":"","sources":["../src/Versions.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config';\nimport { JSONObject } from '@expo/json-file';\nimport getenv from 'getenv';\nimport pickBy from 'lodash/pickBy';\nimport path from 'path';\nimport semver from 'semver';\n\nimport { ApiV2 as ApiV2Client, FsCache, UserManager, XDLError } from './internal';\n\nexport type SDKVersion = {\n  androidExpoViewUrl?: string;\n  expoReactNativeTag: string;\n  /* deprecated */ exponentReactNativeTag?: string;\n  expokitNpmPackage?: string;\n  facebookReactNativeVersion: string;\n  facebookReactVersion?: string;\n  iosExpoViewUrl?: string;\n  /* deprecated */ iosExponentViewUrl?: string;\n  iosVersion?: string;\n  isDeprecated?: boolean;\n  packagesToInstallWhenEjecting?: { [name: string]: string };\n  releaseNoteUrl?: string;\n  iosClientUrl?: string;\n  iosClientVersion?: string;\n  androidClientUrl?: string;\n  androidClientVersion?: string;\n  relatedPackages?: { [name: string]: string };\n  beta?: boolean;\n};\n\nexport type SDKVersions = { [version: string]: SDKVersion };\ntype TurtleSDKVersions = { android: string[]; ios: string[] };\ntype TurtleSDKVersionsOld = { android: string; ios: string };\n\ntype Versions = {\n  androidUrl: string;\n  androidVersion: string;\n  iosUrl: string;\n  iosVersion: string;\n  sdkVersions: SDKVersions;\n  /* deprecated */ starterApps: unknown;\n  /* deprecated */ templates: unknown[];\n  /* deprecated */ templatesv2: unknown[];\n  turtleSdkVersions: TurtleSDKVersionsOld;\n};\n\nexport async function versionsAsync(options?: { skipCache?: boolean }): Promise<Versions> {\n  const api = new ApiV2Client();\n  const versionCache = new FsCache.Cacher(\n    () => api.getAsync('versions/latest'),\n    'versions.json',\n    0,\n    path.join(__dirname, '../caches/versions.json')\n  );\n\n  // Clear cache when opting in to beta because things can change quickly in beta\n  if (getenv.boolish('EXPO_BETA', false) || options?.skipCache) {\n    versionCache.clearAsync();\n  }\n\n  return await versionCache.getAsync();\n}\n\nexport async function sdkVersionsAsync(): Promise<SDKVersions> {\n  const { sdkVersions } = await versionsAsync();\n  return sdkVersions;\n}\n\nexport async function setVersionsAsync(value: any) {\n  const user = await UserManager.getCurrentUserAsync();\n  const api = ApiV2Client.clientForUser(user);\n  const secret = process.env.EXPO_VERSIONS_SECRET;\n  if (!secret)\n    throw new Error(\n      'Versions.setVersionsAsync: EXPO_VERSIONS_SECRET environment variable is required'\n    );\n  await api.postAsync('versions/update', {\n    value: value as JSONObject,\n    secret,\n  });\n}\n\n// NOTE(brentvatne): it is possible for an unreleased version to be published to\n// the versions endpoint, but in some cases we only want to list out released\n// versions\nexport async function releasedSdkVersionsAsync(): Promise<SDKVersions> {\n  const sdkVersions = await sdkVersionsAsync();\n  return pickBy(\n    sdkVersions,\n    (data, _sdkVersionString) =>\n      !!data.releaseNoteUrl || (getenv.boolish('EXPO_BETA', false) && data.beta)\n  );\n}\n\nexport function gteSdkVersion(\n  expJson: Pick<ExpoConfig, 'sdkVersion'>,\n  sdkVersion: string\n): boolean {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return true;\n  }\n\n  try {\n    return semver.gte(expJson.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new XDLError(\n      'INVALID_VERSION',\n      `${expJson.sdkVersion} is not a valid version. Must be in the form of x.y.z`\n    );\n  }\n}\n\nexport function lteSdkVersion(\n  expJson: Pick<ExpoConfig, 'sdkVersion'>,\n  sdkVersion: string\n): boolean {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n\n  try {\n    return semver.lte(expJson.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new XDLError(\n      'INVALID_VERSION',\n      `${expJson.sdkVersion} is not a valid version. Must be in the form of x.y.z`\n    );\n  }\n}\n\nexport function parseSdkVersionFromTag(tag: string): string {\n  if (tag.startsWith('sdk-')) {\n    return tag.substring(4);\n  }\n\n  return tag;\n}\n\n// NOTE(brentvatne): it is possible for an unreleased version to be published to\n// the versions endpoint, but in some cases we need to get the latest *released*\n// version, not just the latest version.\nexport async function newestReleasedSdkVersionAsync(): Promise<{\n  version: string;\n  data: SDKVersion | null;\n}> {\n  const betaOptInEnabled = getenv.boolish('EXPO_BETA', false);\n  const sdkVersions = await sdkVersionsAsync();\n\n  let result = null;\n  let highestMajorVersion = '0.0.0';\n\n  for (const [version, data] of Object.entries(sdkVersions)) {\n    const hasReleaseNotes = !!data.releaseNoteUrl;\n    const isBeta = !!data.beta;\n\n    if (\n      semver.major(version) > semver.major(highestMajorVersion) &&\n      (hasReleaseNotes || (isBeta && betaOptInEnabled))\n    ) {\n      highestMajorVersion = version;\n      result = data;\n    }\n  }\n  return {\n    version: highestMajorVersion,\n    data: result,\n  };\n}\n\n/**\n * Be careful when using this! It can include unreleased and beta SDK versions.\n */\nexport async function newestSdkVersionAsync(): Promise<{\n  version: string;\n  data: SDKVersion | null;\n}> {\n  const sdkVersions = await sdkVersionsAsync();\n  let result = null;\n  let highestMajorVersion = '0.0.0';\n  for (const [version, data] of Object.entries(sdkVersions)) {\n    if (semver.major(version) > semver.major(highestMajorVersion)) {\n      highestMajorVersion = version;\n      result = data;\n    }\n  }\n  return {\n    version: highestMajorVersion,\n    data: result,\n  };\n}\n\nexport async function oldestSupportedMajorVersionAsync(): Promise<number> {\n  const sdkVersions = await sdkVersionsAsync();\n  const supportedVersions = pickBy(sdkVersions, v => !v.isDeprecated);\n  const versionNumbers = Object.keys(supportedVersions).map(version => semver.major(version));\n  return Math.min(...versionNumbers);\n}\n\nexport async function facebookReactNativeVersionsAsync(): Promise<string[]> {\n  const sdkVersions = await sdkVersionsAsync();\n  const facebookReactNativeVersions = new Set(\n    Object.values(sdkVersions)\n      .map(data => data.facebookReactNativeVersion)\n      .filter(version => version)\n  );\n  return Array.from(facebookReactNativeVersions);\n}\n\nexport async function facebookReactNativeVersionToExpoVersionAsync(\n  outerFacebookReactNativeVersion: string\n): Promise<string | null> {\n  if (!semver.valid(outerFacebookReactNativeVersion)) {\n    throw new XDLError(\n      'INVALID_VERSION',\n      `${outerFacebookReactNativeVersion} is not a valid version. Must be in the form of x.y.z`\n    );\n  }\n\n  const sdkVersions = await releasedSdkVersionsAsync();\n  let currentSdkVersion: string | null = null;\n\n  for (const [version, { facebookReactNativeVersion }] of Object.entries(sdkVersions)) {\n    if (\n      semver.major(outerFacebookReactNativeVersion) === semver.major(facebookReactNativeVersion) &&\n      semver.minor(outerFacebookReactNativeVersion) === semver.minor(facebookReactNativeVersion) &&\n      (!currentSdkVersion || semver.gt(version, currentSdkVersion))\n    ) {\n      currentSdkVersion = version;\n    }\n  }\n\n  return currentSdkVersion;\n}\n\nexport async function canTurtleBuildSdkVersion(\n  sdkVersion: string,\n  platform: keyof TurtleSDKVersions\n): Promise<boolean> {\n  if (sdkVersion === 'UNVERSIONED') {\n    return true;\n  }\n\n  if (semver.valid(sdkVersion) == null) {\n    throw new XDLError(\n      'INVALID_VERSION',\n      `\"${sdkVersion}\" is not a valid version. Must be in the form of x.y.z`\n    );\n  }\n\n  const supportedVersions = await getSdkVersionsSupportedByTurtle();\n  const supportedVersionsForPlatform: string[] = supportedVersions[platform] ?? [];\n  return supportedVersionsForPlatform.indexOf(sdkVersion) !== -1;\n}\n\nasync function getSdkVersionsSupportedByTurtle(): Promise<TurtleSDKVersions> {\n  const api = new ApiV2Client();\n  return await api.getAsync('standalone-build/supportedSDKVersions');\n}\n"]}