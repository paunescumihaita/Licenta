{"version":3,"file":"AndroidCredentials.js","sourceRoot":"","sources":["../../src/credentials/AndroidCredentials.ts"],"names":[],"mappings":"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","sourcesContent":["import spawnAsync, { SpawnResult } from '@expo/spawn-async';\nimport crypto from 'crypto';\nimport fs from 'fs-extra';\nimport uuidv4 from 'uuid/v4';\n\nimport { Logger as logger } from '../internal';\n\nconst log = logger.global;\n\nexport type Keystore = {\n  keystore: string;\n  keystorePassword: string;\n  keyPassword: string;\n  keyAlias: string;\n};\n\nexport type KeystoreInfo = {\n  keystorePath: string;\n  keystorePassword: string;\n  keyPassword: string;\n  keyAlias: string;\n};\n\nasync function exportCertBinary(\n  {\n    keystorePath,\n    keystorePassword,\n    keyAlias,\n  }: Pick<KeystoreInfo, 'keystorePath' | 'keystorePassword' | 'keyAlias'>,\n  certFile: string\n): Promise<SpawnResult> {\n  try {\n    return spawnAsync('keytool', [\n      '-exportcert',\n      '-keystore',\n      keystorePath,\n      '-storepass',\n      keystorePassword,\n      '-alias',\n      keyAlias,\n      '-file',\n      certFile,\n      '-noprompt',\n      '-storetype',\n      'JKS',\n    ]);\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      log.warn('Are you sure you have keytool installed?');\n      log.info('keytool is a part of OpenJDK: https://openjdk.java.net/');\n      log.info('Also make sure that keytool is in your PATH after installation.');\n    }\n    if (err.stdout) {\n      log.info(err.stdout);\n    }\n    if (err.stderr) {\n      log.error(err.stderr);\n    }\n    throw err;\n  }\n}\n\nexport async function exportCertBase64(\n  {\n    keystorePath,\n    keystorePassword,\n    keyAlias,\n  }: Pick<KeystoreInfo, 'keystorePath' | 'keystorePassword' | 'keyAlias'>,\n  certFile: string\n): Promise<SpawnResult> {\n  try {\n    return spawnAsync('keytool', [\n      '-export',\n      '-rfc',\n      '-keystore',\n      keystorePath,\n      '-storepass',\n      keystorePassword,\n      '-alias',\n      keyAlias,\n      '-file',\n      certFile,\n      '-noprompt',\n      '-storetype',\n      'JKS',\n    ]);\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      log.warn('Are you sure you have keytool installed?');\n      log.info('keytool is a part of OpenJDK: https://openjdk.java.net/');\n      log.info('Also make sure that keytool is in your PATH after installation.');\n    }\n    if (err.stdout) {\n      log.info(err.stdout);\n    }\n    if (err.stderr) {\n      log.error(err.stderr);\n    }\n    throw err;\n  }\n}\n\nexport async function logKeystoreHashes(keystoreInfo: KeystoreInfo, linePrefix: string = '') {\n  const { keystorePath } = keystoreInfo;\n  const certFile = `${keystorePath}.cer`;\n  try {\n    await exportCertBinary(keystoreInfo, certFile);\n    const data = await fs.readFile(certFile);\n    const googleHash = crypto.createHash('sha1').update(data).digest('hex').toUpperCase();\n    const googleHash256 = crypto.createHash('sha256').update(data).digest('hex').toUpperCase();\n    const fbHash = crypto.createHash('sha1').update(data).digest('base64');\n    log.info(\n      `${linePrefix}Google Certificate Fingerprint:     ${googleHash.replace(\n        /(.{2}(?!$))/g,\n        '$1:'\n      )}`\n    );\n    log.info(`${linePrefix}Google Certificate Hash (SHA-1):    ${googleHash}`);\n    log.info(`${linePrefix}Google Certificate Hash (SHA-256):  ${googleHash256}`);\n    log.info(`${linePrefix}Facebook Key Hash:                  ${fbHash}`);\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      log.warn('Are you sure you have keytool installed?');\n      log.info('keytool is a part of OpenJDK: https://openjdk.java.net/');\n      log.info('Also make sure that keytool is in your PATH after installation.');\n    }\n    if (err.stdout) {\n      log.info(err.stdout);\n    }\n    if (err.stderr) {\n      log.error(err.stderr);\n    }\n    throw err;\n  } finally {\n    try {\n      await fs.unlink(certFile);\n    } catch (err) {\n      if (err.code !== 'ENOENT') {\n        log.error(err);\n      }\n    }\n  }\n}\n\nasync function createKeystore(\n  { keystorePath, keystorePassword, keyAlias, keyPassword }: KeystoreInfo,\n  androidPackage: string\n): Promise<SpawnResult> {\n  try {\n    return await spawnAsync('keytool', [\n      '-genkey',\n      '-v',\n      '-storetype',\n      'JKS',\n      '-storepass',\n      keystorePassword,\n      '-keypass',\n      keyPassword,\n      '-keystore',\n      keystorePath,\n      '-alias',\n      keyAlias,\n      '-keyalg',\n      'RSA',\n      '-keysize',\n      '2048',\n      '-validity',\n      '10000',\n      '-dname',\n      `CN=${androidPackage},OU=,O=,L=,S=,C=US`,\n    ]);\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      log.warn('Are you sure you have keytool installed?');\n      log.info('keytool is a part of OpenJDK: https://openjdk.java.net/');\n      log.info('Also make sure that keytool is in your PATH after installation.');\n    }\n    if (err.stdout) {\n      log.info(err.stdout);\n    }\n    if (err.stderr) {\n      log.error(err.stderr);\n    }\n    throw err;\n  }\n}\n\nexport async function generateUploadKeystore(\n  uploadKeystorePath: string,\n  androidPackage: string,\n  experienceName: string\n): Promise<KeystoreInfo> {\n  const keystoreData = {\n    keystorePassword: uuidv4().replace(/-/g, ''),\n    keyPassword: uuidv4().replace(/-/g, ''),\n    keyAlias: Buffer.from(experienceName).toString('base64'),\n    keystorePath: uploadKeystorePath,\n  };\n  await createKeystore(keystoreData, androidPackage);\n  return keystoreData;\n}\n"]}