"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const spawn_async_1 = __importDefault(require("@expo/spawn-async"));
const crypto_1 = __importDefault(require("crypto"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const v4_1 = __importDefault(require("uuid/v4"));
const internal_1 = require("../internal");
const log = internal_1.Logger.global;
async function exportCertBinary({ keystorePath, keystorePassword, keyAlias, }, certFile) {
    try {
        return spawn_async_1.default('keytool', [
            '-exportcert',
            '-keystore',
            keystorePath,
            '-storepass',
            keystorePassword,
            '-alias',
            keyAlias,
            '-file',
            certFile,
            '-noprompt',
            '-storetype',
            'JKS',
        ]);
    }
    catch (err) {
        if (err.code === 'ENOENT') {
            log.warn('Are you sure you have keytool installed?');
            log.info('keytool is a part of OpenJDK: https://openjdk.java.net/');
            log.info('Also make sure that keytool is in your PATH after installation.');
        }
        if (err.stdout) {
            log.info(err.stdout);
        }
        if (err.stderr) {
            log.error(err.stderr);
        }
        throw err;
    }
}
async function exportCertBase64({ keystorePath, keystorePassword, keyAlias, }, certFile) {
    try {
        return spawn_async_1.default('keytool', [
            '-export',
            '-rfc',
            '-keystore',
            keystorePath,
            '-storepass',
            keystorePassword,
            '-alias',
            keyAlias,
            '-file',
            certFile,
            '-noprompt',
            '-storetype',
            'JKS',
        ]);
    }
    catch (err) {
        if (err.code === 'ENOENT') {
            log.warn('Are you sure you have keytool installed?');
            log.info('keytool is a part of OpenJDK: https://openjdk.java.net/');
            log.info('Also make sure that keytool is in your PATH after installation.');
        }
        if (err.stdout) {
            log.info(err.stdout);
        }
        if (err.stderr) {
            log.error(err.stderr);
        }
        throw err;
    }
}
exports.exportCertBase64 = exportCertBase64;
async function logKeystoreHashes(keystoreInfo, linePrefix = '') {
    const { keystorePath } = keystoreInfo;
    const certFile = `${keystorePath}.cer`;
    try {
        await exportCertBinary(keystoreInfo, certFile);
        const data = await fs_extra_1.default.readFile(certFile);
        const googleHash = crypto_1.default.createHash('sha1').update(data).digest('hex').toUpperCase();
        const googleHash256 = crypto_1.default.createHash('sha256').update(data).digest('hex').toUpperCase();
        const fbHash = crypto_1.default.createHash('sha1').update(data).digest('base64');
        log.info(`${linePrefix}Google Certificate Fingerprint:     ${googleHash.replace(/(.{2}(?!$))/g, '$1:')}`);
        log.info(`${linePrefix}Google Certificate Hash (SHA-1):    ${googleHash}`);
        log.info(`${linePrefix}Google Certificate Hash (SHA-256):  ${googleHash256}`);
        log.info(`${linePrefix}Facebook Key Hash:                  ${fbHash}`);
    }
    catch (err) {
        if (err.code === 'ENOENT') {
            log.warn('Are you sure you have keytool installed?');
            log.info('keytool is a part of OpenJDK: https://openjdk.java.net/');
            log.info('Also make sure that keytool is in your PATH after installation.');
        }
        if (err.stdout) {
            log.info(err.stdout);
        }
        if (err.stderr) {
            log.error(err.stderr);
        }
        throw err;
    }
    finally {
        try {
            await fs_extra_1.default.unlink(certFile);
        }
        catch (err) {
            if (err.code !== 'ENOENT') {
                log.error(err);
            }
        }
    }
}
exports.logKeystoreHashes = logKeystoreHashes;
async function createKeystore({ keystorePath, keystorePassword, keyAlias, keyPassword }, androidPackage) {
    try {
        return await spawn_async_1.default('keytool', [
            '-genkey',
            '-v',
            '-storetype',
            'JKS',
            '-storepass',
            keystorePassword,
            '-keypass',
            keyPassword,
            '-keystore',
            keystorePath,
            '-alias',
            keyAlias,
            '-keyalg',
            'RSA',
            '-keysize',
            '2048',
            '-validity',
            '10000',
            '-dname',
            `CN=${androidPackage},OU=,O=,L=,S=,C=US`,
        ]);
    }
    catch (err) {
        if (err.code === 'ENOENT') {
            log.warn('Are you sure you have keytool installed?');
            log.info('keytool is a part of OpenJDK: https://openjdk.java.net/');
            log.info('Also make sure that keytool is in your PATH after installation.');
        }
        if (err.stdout) {
            log.info(err.stdout);
        }
        if (err.stderr) {
            log.error(err.stderr);
        }
        throw err;
    }
}
async function generateUploadKeystore(uploadKeystorePath, androidPackage, experienceName) {
    const keystoreData = {
        keystorePassword: v4_1.default().replace(/-/g, ''),
        keyPassword: v4_1.default().replace(/-/g, ''),
        keyAlias: Buffer.from(experienceName).toString('base64'),
        keystorePath: uploadKeystorePath,
    };
    await createKeystore(keystoreData, androidPackage);
    return keystoreData;
}
exports.generateUploadKeystore = generateUploadKeystore;
//# sourceMappingURL=AndroidCredentials.js.map