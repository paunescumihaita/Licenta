"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const probe_image_size_1 = __importDefault(require("probe-image-size"));
const internal_1 = require("../internal");
/**
 * @param {string} projectDirname
 * @param {string} basename
 * @returns {} { width: number, height: number } image dimensions or null
 */
async function getImageDimensionsAsync(projectDirname, basename) {
    try {
        return await _getImageDimensionsAsync(projectDirname, basename);
    }
    catch (_a) { }
    return null;
}
exports.getImageDimensionsAsync = getImageDimensionsAsync;
async function _getImageDimensionsWithImageProbeAsync(projectDirname, basename) {
    const imagePath = path_1.default.resolve(projectDirname, basename);
    const readStream = fs_1.default.createReadStream(imagePath);
    const { width, height } = await probe_image_size_1.default(readStream);
    readStream.destroy();
    return { width, height };
}
let _hasWarned = false;
async function resizeImageAsync(iconSizePx, iconFilename, destinationIconPath) {
    if (process.platform !== 'darwin' &&
        _resizeImageAsync === _resizeImageWithSipsAsync &&
        !_hasWarned) {
        internal_1.LoggerDetach.warn('`sips` utility may or may not work outside of macOS');
        _hasWarned = true;
    }
    return _resizeImageAsync(iconSizePx, iconFilename, destinationIconPath);
}
exports.resizeImageAsync = resizeImageAsync;
async function _resizeImageWithSipsAsync(iconSizePx, iconFilename, destinationIconPath) {
    return internal_1.ExponentTools.spawnAsyncThrowError('sips', ['-Z', iconSizePx.toFixed(), iconFilename], {
        stdio: ['ignore', 'ignore', 'inherit'],
        cwd: destinationIconPath,
    });
}
// Allow us to swap out the default implementations of image functions
let _resizeImageAsync = _resizeImageWithSipsAsync;
let _getImageDimensionsAsync = _getImageDimensionsWithImageProbeAsync;
// Allow users to provide an alternate implementation for our image resize function.
// This is used internally in order to use sharp instead of sips in standalone builder.
function setResizeImageFunction(fn) {
    _resizeImageAsync = fn;
}
exports.setResizeImageFunction = setResizeImageFunction;
// Allow users to provide an alternate implementation for our image dimensions function.
// This is used internally in order to use sharp instead of sips in standalone builder.
function setGetImageDimensionsFunction(fn) {
    _getImageDimensionsAsync = fn;
}
exports.setGetImageDimensionsFunction = setGetImageDimensionsFunction;
//# sourceMappingURL=ImageUtils.js.map