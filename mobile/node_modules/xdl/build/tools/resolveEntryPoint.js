"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const paths_1 = require("@expo/config/paths");
const path_1 = __importDefault(require("path"));
const supportedPlatforms = ['ios', 'android', 'web'];
function resolveEntryPoint(projectRoot, platform, projectConfig) {
    if (platform && !supportedPlatforms.includes(platform)) {
        throw new Error(`Failed to resolve the project's entry file: The platform "${platform}" is not supported.`);
    }
    // TODO: Bacon: support platform extension resolution like .ios, .native
    // const platforms = [platform, 'native'].filter(Boolean) as string[];
    const platforms = [];
    const entry = paths_1.getEntryPoint(projectRoot, ['./index'], platforms, projectConfig);
    if (!entry)
        throw new Error(`The project entry file could not be resolved. Please either define it in the \`package.json\` (main), \`app.json\` (expo.entryPoint), create an \`index.js\`, or install the \`expo\` package.`);
    return path_1.default.relative(projectRoot, entry);
}
exports.resolveEntryPoint = resolveEntryPoint;
//# sourceMappingURL=resolveEntryPoint.js.map