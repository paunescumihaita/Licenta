"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const internal_1 = require("./internal");
async function getManifest(publicUrl, { platform = 'all' } = {}) {
    const req = {
        url: publicUrl,
        method: 'get',
        headers: { Accept: 'application/expo+json,application/json' },
    };
    let exp;
    try {
        const resp = await axios_1.default.request(req);
        exp = resp.data;
    }
    catch (e) {
        throw new internal_1.XDLError('INVALID_MANIFEST', `Unable to fetch manifest from ${publicUrl}. ` + e.toString());
    }
    exp = await _extractManifest(exp, publicUrl);
    if (exp.platform !== platform && platform !== 'all') {
        throw new internal_1.XDLError('INVALID_MANIFEST', `Manifest from ${publicUrl} is not compatible with the ${platform} platform`);
    }
    return exp;
}
exports.getManifest = getManifest;
// Third party publicUrls can return an array of manifests
// We need to choose the first compatible one
async function _extractManifest(expOrArray, publicUrl) {
    // if its not an array, assume it was a single manifest obj
    if (!Array.isArray(expOrArray)) {
        return expOrArray;
    }
    const { sdkVersions } = await internal_1.Versions.versionsAsync();
    for (let i = 0; i < expOrArray.length; i++) {
        const manifestCandidate = expOrArray[i];
        const sdkVersion = manifestCandidate.sdkVersion;
        if (!sdkVersion) {
            continue;
        }
        const versionObj = sdkVersions[sdkVersion];
        if (!versionObj) {
            continue;
        }
        const isDeprecated = versionObj.isDeprecated || false;
        if (!isDeprecated) {
            return manifestCandidate;
        }
    }
    const supportedVersions = Object.keys(sdkVersions);
    throw new internal_1.XDLError('INVALID_MANIFEST', `No compatible manifest found at ${publicUrl}. Please use one of the SDK versions supported: ${JSON.stringify(supportedVersions)}`);
}
//# sourceMappingURL=ThirdParty.js.map