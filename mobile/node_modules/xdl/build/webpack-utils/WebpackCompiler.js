"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
const boxen_1 = __importDefault(require("boxen"));
const chalk_1 = __importDefault(require("chalk"));
const formatWebpackMessages_1 = __importDefault(require("react-dev-utils/formatWebpackMessages"));
const internal_1 = require("../internal");
const CONSOLE_TAG = 'expo';
const SHOULD_CLEAR_CONSOLE = internal_1.WebpackEnvironment.shouldWebpackClearLogs();
function log(projectRoot, message, showInDevtools = true) {
    if (showInDevtools) {
        internal_1.ProjectUtils.logInfo(projectRoot, CONSOLE_TAG, message);
    }
    else {
        console.log(message);
    }
}
function clearLogs() {
    process.stdout.write(process.platform === 'win32' ? '\x1B[2J\x1B[0f' : '\x1B[2J\x1B[3J\x1B[H');
}
function logWarning(projectRoot, message) {
    internal_1.ProjectUtils.logWarning(projectRoot, CONSOLE_TAG, message);
}
function logError(projectRoot, message) {
    internal_1.ProjectUtils.logError(projectRoot, CONSOLE_TAG, message);
}
function printInstructions(projectRoot, { appName, urls, shouldPrintHelp, showInDevtools, }) {
    printPreviewNotice(projectRoot, showInDevtools);
    let message = '\n';
    message += `You can now view ${chalk_1.default.bold(appName)} in the browser\n`;
    const divider = chalk_1.default.dim `â”‚`;
    if (urls.lanUrlForTerminal) {
        message += `\n \u203A ${chalk_1.default.reset('Local')}   ${divider} ${urls.localUrlForTerminal}`;
        message += `\n \u203A ${chalk_1.default.reset('LAN')}     ${divider} ${urls.lanUrlForTerminal}`;
    }
    else {
        message += `\n \u203A ${urls.localUrlForTerminal}`;
    }
    message += '\n';
    message += `\n \u203A Run ${chalk_1.default.bold(`expo build:web`)} to optimize and build for production`;
    message += '\n';
    message += `\n \u203A Press ${chalk_1.default.bold(`w`)} ${divider} open in the browser`;
    if (shouldPrintHelp) {
        message += `\n \u203A Press ${chalk_1.default.bold(`?`)} ${divider} show all commands`;
    }
    log(projectRoot, message, showInDevtools);
}
exports.printInstructions = printInstructions;
function printPreviewNotice(projectRoot, showInDevtools) {
    log(projectRoot, boxen_1.default(chalk_1.default.magenta.dim('Expo web is in late beta, please report any bugs or missing features on the Expo repo.\n' +
        'You can follow the V1 release for more info: https://github.com/expo/expo/issues/6782'), { dimBorder: true, borderColor: 'magenta', padding: { top: 0, left: 1, bottom: 0, right: 1 } }), showInDevtools);
}
exports.printPreviewNotice = printPreviewNotice;
function createWebpackCompiler({ projectRoot, appName, config, urls, nonInteractive, webpackFactory, onFinished, }) {
    // "Compiler" is a low-level interface to Webpack.
    // It lets us listen to some events and provide our own custom messages.
    const compiler = webpackFactory(config);
    // "invalid" event fires when you have changed a file, and Webpack is
    // recompiling a bundle. WebpackDevServer takes care to pause serving the
    // bundle, so if you refresh, it'll wait instead of serving the old one.
    // "invalid" is short for "bundle invalidated", it doesn't imply any errors.
    compiler.hooks.invalid.tap('invalid', () => {
        log(projectRoot, '\nCompiling...');
    });
    let isFirstCompile = true;
    // "done" event fires when Webpack has finished recompiling the bundle.
    // Whether or not you have warnings or errors, you will get this event.
    compiler.hooks.done.tap('done', async (stats) => {
        if (SHOULD_CLEAR_CONSOLE && !nonInteractive) {
            clearLogs();
        }
        // We have switched off the default Webpack output in WebpackDevServer
        // options so we are going to "massage" the warnings and errors and present
        // them in a readable focused way.
        // We only construct the warnings and errors for speed:
        // https://github.com/facebook/create-react-app/issues/4492#issuecomment-421959548
        const statsData = stats.toJson({
            all: false,
            warnings: true,
            errors: true,
        });
        const messages = formatWebpackMessages_1.default(statsData);
        const isSuccessful = !messages.errors.length && !messages.warnings.length;
        if (isSuccessful) {
            internal_1.WebpackEnvironment.logEnvironmentInfo(projectRoot, CONSOLE_TAG, config);
        }
        if (isSuccessful && !isFirstCompile && !nonInteractive) {
            printInstructions(projectRoot, {
                appName,
                urls,
                shouldPrintHelp: true,
                showInDevtools: isFirstCompile,
            });
        }
        onFinished();
        isFirstCompile = false;
        // If errors exist, only show errors.
        if (messages.errors.length) {
            // Only keep the first error. Others are often indicative
            // of the same problem, but confuse the reader with noise.
            if (messages.errors.length > 1) {
                messages.errors.length = 1;
            }
            logError(projectRoot, chalk_1.default.red('Failed to compile.\n') + messages.errors.join('\n\n'));
            return;
        }
        // Show warnings if no errors were found.
        if (messages.warnings.length) {
            logWarning(projectRoot, chalk_1.default.yellow('Compiled with warnings.\n') + messages.warnings.join('\n\n'));
        }
    });
    return compiler;
}
exports.createWebpackCompiler = createWebpackCompiler;
function printSuccessMessages({ projectRoot, appName, urls, config, isFirstCompile, nonInteractive, }) {
    log(projectRoot, chalk_1.default.bold.cyan(`Compiled successfully!`));
    printPreviewNotice(projectRoot, isFirstCompile);
    internal_1.WebpackEnvironment.logEnvironmentInfo(projectRoot, CONSOLE_TAG, config);
    if (!nonInteractive || isFirstCompile) {
        printInstructions(projectRoot, {
            appName,
            urls,
            showInDevtools: isFirstCompile,
        });
    }
}
exports.printSuccessMessages = printSuccessMessages;
//# sourceMappingURL=WebpackCompiler.js.map