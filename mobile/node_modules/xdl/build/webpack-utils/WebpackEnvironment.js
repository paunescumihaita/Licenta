"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const getenv_1 = __importDefault(require("getenv"));
const internal_1 = require("../internal");
exports.HOST = getenv_1.default.string('WEB_HOST', '0.0.0.0');
exports.DEFAULT_PORT = getenv_1.default.int('WEB_PORT', 19006);
// When you have errors in the production build that aren't present in the development build you can use `EXPO_WEB_DEBUG=true expo start --no-dev` to debug those errors.
// - Prevent the production build from being minified
// - Include file path info comments in the bundle
function isDebugModeEnabled() {
    return getenv_1.default.boolish('EXPO_WEB_DEBUG', false);
}
exports.isDebugModeEnabled = isDebugModeEnabled;
function isInfoEnabled() {
    return getenv_1.default.boolish('EXPO_WEB_INFO', false);
}
exports.isInfoEnabled = isInfoEnabled;
function shouldWebpackClearLogs() {
    return !isDebugModeEnabled() && !isInfoEnabled() && !getenv_1.default.boolish('EXPO_DEBUG', false);
}
exports.shouldWebpackClearLogs = shouldWebpackClearLogs;
function logEnvironmentInfo(projectRoot, tag, config) {
    if (isDebugModeEnabled() && config.mode === 'production') {
        internal_1.ProjectUtils.logWarning(projectRoot, tag, `Webpack is bundling your project in \`production\` mode with the ${chalk_1.default.bold('`EXPO_WEB_DEBUG`')} environment variable enabled. You should toggle it off before building for production.`);
    }
}
exports.logEnvironmentInfo = logEnvironmentInfo;
//# sourceMappingURL=WebpackEnvironment.js.map