{"version":3,"file":"Doctor.js","sourceRoot":"","sources":["../../src/project/Doctor.ts"],"names":[],"mappings":"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","sourcesContent":["import { configFilename, ExpoConfig, getConfig, PackageJSONConfig } from '@expo/config';\nimport Schemer, { SchemerError, ValidationError } from '@expo/schemer';\nimport spawnAsync from '@expo/spawn-async';\nimport getenv from 'getenv';\nimport isReachable from 'is-reachable';\nimport resolveFrom from 'resolve-from';\nimport semver from 'semver';\n\nimport { Config, ExpSchema, ProjectUtils, Versions, Watchman } from '../internal';\n\nexport const NO_ISSUES = 0;\nexport const WARNING = 1;\nexport const ERROR = 2;\nexport const FATAL = 3;\n\nconst MIN_WATCHMAN_VERSION = '4.6.0';\nconst MIN_NPM_VERSION = '3.0.0';\nconst CORRECT_NPM_VERSION = 'latest';\nconst WARN_NPM_VERSION_RANGES = ['>= 5.0.0 < 5.7.0'];\nconst BAD_NPM_VERSION_RANGES = ['>= 5.0.0 <= 5.0.3'];\n\nconst EXPO_NO_DOCTOR = getenv.boolish('EXPO_NO_DOCTOR', false);\n\nfunction _isNpmVersionWithinRanges(npmVersion: string, ranges: string[]) {\n  return ranges.some(range => semver.satisfies(npmVersion, range));\n}\n\nasync function _checkNpmVersionAsync(projectRoot: string) {\n  try {\n    try {\n      const yarnVersionResponse = await spawnAsync('yarnpkg', ['--version']);\n      if (yarnVersionResponse.status === 0) {\n        return NO_ISSUES;\n      }\n    } catch (e) {}\n\n    const npmVersionResponse = await spawnAsync('npm', ['--version']);\n    const npmVersion = npmVersionResponse.stdout.trim();\n\n    if (\n      semver.lt(npmVersion, MIN_NPM_VERSION) ||\n      _isNpmVersionWithinRanges(npmVersion, BAD_NPM_VERSION_RANGES)\n    ) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: You are using npm version ${npmVersion}. We recommend the latest version ${CORRECT_NPM_VERSION}. To install it, run 'npm i -g npm@${CORRECT_NPM_VERSION}'.`,\n        'doctor-npm-version'\n      );\n      return WARNING;\n    } else if (_isNpmVersionWithinRanges(npmVersion, WARN_NPM_VERSION_RANGES)) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: You are using npm version ${npmVersion}. There may be bugs in this version, use it at your own risk. We recommend version ${CORRECT_NPM_VERSION}.`,\n        'doctor-npm-version'\n      );\n    } else {\n      ProjectUtils.clearNotification(projectRoot, 'doctor-npm-version');\n    }\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Could not determine npm version. Make sure your version is >= ${MIN_NPM_VERSION} - we recommend ${CORRECT_NPM_VERSION}.`,\n      'doctor-npm-version'\n    );\n    return WARNING;\n  }\n\n  return NO_ISSUES;\n}\n\nasync function _checkWatchmanVersionAsync(projectRoot: string) {\n  // There's no point in checking any of this stuff if watchman isn't supported on this platform\n  if (!Watchman.isPlatformSupported()) {\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n    return;\n  }\n\n  const watchmanVersion = await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  // If we can't get the watchman version, `getVersionAsync` will return `null`\n  if (!watchmanVersion) {\n    // watchman is probably just not installed\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n    return;\n  }\n\n  if (semver.lt(watchmanVersion, MIN_WATCHMAN_VERSION)) {\n    let warningMessage = `Warning: You are using an old version of watchman (v${watchmanVersion}). This may cause problems for you.\\n\\nWe recommend that you either uninstall watchman (and XDE will try to use a copy it is bundled with) or upgrade watchman to a newer version, at least v${MIN_WATCHMAN_VERSION}.`;\n\n    // Add a note about homebrew if the user is on a Mac\n    if (process.platform === 'darwin') {\n      warningMessage += `\\n\\nIf you are using homebrew, try:\\nbrew uninstall watchman; brew install watchman`;\n    }\n    ProjectUtils.logWarning(projectRoot, 'expo', warningMessage, 'doctor-watchman-version');\n  } else {\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n  }\n}\n\nasync function validateWithSchema(\n  projectRoot: string,\n  {\n    // Extract internal from the config object.\n    _internal,\n    ...exp\n  }: ExpoConfig,\n  schema: any,\n  configName: string,\n  validateAssets: boolean\n): Promise<{ schemaErrorMessage: string | undefined; assetsErrorMessage: string | undefined }> {\n  let schemaErrorMessage;\n  let assetsErrorMessage;\n  const validator = new Schemer(schema, { rootDir: projectRoot });\n\n  // Validate the schema itself\n  try {\n    await validator.validateSchemaAsync(exp);\n  } catch (e) {\n    if (e instanceof SchemerError) {\n      schemaErrorMessage = `Error: Problem${\n        e.errors.length > 1 ? 's' : ''\n      } validating fields in ${configName}. See https://docs.expo.io/workflow/configuration/`;\n      schemaErrorMessage += e.errors.map(formatValidationError).join('');\n    }\n  }\n\n  if (validateAssets) {\n    try {\n      await validator.validateAssetsAsync(exp);\n    } catch (e) {\n      if (e instanceof SchemerError) {\n        assetsErrorMessage = `Error: Problem${\n          e.errors.length > 1 ? '' : 's'\n        } validating asset fields in ${configName}. See ${Config.helpUrl}`;\n        assetsErrorMessage += e.errors.map(formatValidationError).join('');\n      }\n    }\n  }\n  return { schemaErrorMessage, assetsErrorMessage };\n}\n\nfunction formatValidationError(validationError: ValidationError) {\n  return `\\n • ${validationError.fieldPath ? 'Field: ' + validationError.fieldPath + ' - ' : ''}${\n    validationError.message\n  }.`;\n}\n\nasync function _validateExpJsonAsync(\n  exp: ExpoConfig,\n  pkg: PackageJSONConfig,\n  projectRoot: string,\n  allowNetwork: boolean,\n  skipSDKVersionRequirement: boolean | undefined\n): Promise<number> {\n  if (!exp || !pkg) {\n    // getConfig already logged an error\n    return FATAL;\n  }\n\n  try {\n    await _checkWatchmanVersionAsync(projectRoot);\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Problem checking watchman version. ${e.message}.`,\n      'doctor-problem-checking-watchman-version'\n    );\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-problem-checking-watchman-version');\n\n  const sdkVersion = exp.sdkVersion;\n  const configName = configFilename(projectRoot);\n\n  // Warn if sdkVersion is UNVERSIONED\n  if (sdkVersion === 'UNVERSIONED' && !process.env.EXPO_SKIP_MANIFEST_VALIDATION_TOKEN) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: Using unversioned Expo SDK. Do not publish until you set sdkVersion in ${configName}`,\n      'doctor-unversioned'\n    );\n    return ERROR;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-unversioned');\n  const sdkVersions = await Versions.sdkVersionsAsync();\n  if (!sdkVersions) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: Couldn't connect to SDK versions server`,\n      'doctor-versions-endpoint-failed'\n    );\n    return ERROR;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-versions-endpoint-failed');\n\n  if (!skipSDKVersionRequirement && (!sdkVersion || !sdkVersions[sdkVersion])) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: Invalid sdkVersion. Valid options are ${Object.keys(sdkVersions).join(', ')}`,\n      'doctor-invalid-sdk-version'\n    );\n    return ERROR;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-invalid-sdk-version');\n\n  // Skip validation if the correct token is set in env\n  if (sdkVersion && sdkVersion !== 'UNVERSIONED') {\n    try {\n      const schema = await ExpSchema.getSchemaAsync(sdkVersion);\n      const { schemaErrorMessage, assetsErrorMessage } = await validateWithSchema(\n        projectRoot,\n        exp,\n        schema,\n        configName,\n        allowNetwork\n      );\n\n      if (schemaErrorMessage) {\n        ProjectUtils.logError(projectRoot, 'expo', schemaErrorMessage, 'doctor-schema-validation');\n      } else {\n        ProjectUtils.clearNotification(projectRoot, 'doctor-schema-validation');\n      }\n      if (assetsErrorMessage) {\n        ProjectUtils.logError(\n          projectRoot,\n          'expo',\n          assetsErrorMessage,\n          `doctor-validate-asset-fields`\n        );\n      } else {\n        ProjectUtils.clearNotification(projectRoot, `doctor-validate-asset-fields`);\n      }\n      ProjectUtils.clearNotification(projectRoot, 'doctor-schema-validation-exception');\n      if (schemaErrorMessage || assetsErrorMessage) return ERROR;\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: Problem validating ${configName}: ${e.message}.`,\n        'doctor-schema-validation-exception'\n      );\n    }\n  }\n\n  if (sdkVersion) {\n    const reactNativeIssue = await _validateReactNativeVersionAsync(\n      exp,\n      pkg,\n      projectRoot,\n      sdkVersions,\n      sdkVersion\n    );\n\n    if (reactNativeIssue !== NO_ISSUES) {\n      return reactNativeIssue;\n    }\n  }\n\n  // TODO: Check any native module versions here\n\n  return NO_ISSUES;\n}\n\nasync function _validateReactNativeVersionAsync(\n  exp: ExpoConfig,\n  pkg: PackageJSONConfig,\n  projectRoot: string,\n  sdkVersions: Versions.SDKVersions,\n  sdkVersion: string\n): Promise<number> {\n  if (Config.validation.reactNativeVersionWarnings) {\n    let reactNative = null;\n\n    if (pkg.dependencies?.['react-native']) {\n      reactNative = pkg.dependencies['react-native'];\n    } else if (pkg.devDependencies?.['react-native']) {\n      reactNative = pkg.devDependencies['react-native'];\n    } else if (pkg.peerDependencies?.['react-native']) {\n      reactNative = pkg.peerDependencies['react-native'];\n    }\n\n    // react-native is required\n    if (!reactNative) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: Can't find react-native in package.json dependencies`,\n        'doctor-no-react-native-in-package-json'\n      );\n      return ERROR;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-no-react-native-in-package-json');\n\n    if (\n      Versions.gteSdkVersion(exp, '41.0.0') &&\n      pkg.dependencies?.['@react-native-community/async-storage']\n    ) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `@react-native-community/async-storage has been renamed. To upgrade:\\n- remove @react-native-community/async-storage from package.json\\n- run \"expo install @react-native-async-storage/async-storage\"\\n- run \"npx expo-codemod sdk41-async-storage src\" to rename imports`,\n        'doctor-legacy-async-storage'\n      );\n      return WARNING;\n    } else {\n      ProjectUtils.clearNotification(projectRoot, 'doctor-legacy-async-storage');\n    }\n\n    if (!exp.isDetached) {\n      return NO_ISSUES;\n\n      // (TODO-2017-07-20): Validate the react-native version if it uses\n      // officially published package rather than Expo fork. Expo fork of\n      // react-native was required before CRNA. We now only run the react-native\n      // validation of the version if we are using the fork. We should probably\n      // validate the version here as well such that it matches with the\n      // react-native version compatible with the selected SDK.\n    }\n\n    // Expo fork of react-native is required\n    if (!/expo\\/react-native/.test(reactNative)) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: Not using the Expo fork of react-native. See ${Config.helpUrl}.`,\n        'doctor-not-using-expo-fork'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-not-using-expo-fork');\n\n    try {\n      const reactNativeTag = reactNative.match(/sdk-\\d+\\.\\d+\\.\\d+/)[0];\n      const sdkVersionObject = sdkVersions[sdkVersion];\n\n      // TODO: Want to be smarter about this. Maybe warn if there's a newer version.\n      if (\n        semver.major(Versions.parseSdkVersionFromTag(reactNativeTag)) !==\n        semver.major(Versions.parseSdkVersionFromTag(sdkVersionObject['expoReactNativeTag']))\n      ) {\n        ProjectUtils.logWarning(\n          projectRoot,\n          'expo',\n          `Warning: Invalid version of react-native for sdkVersion ${sdkVersion}. Use github:expo/react-native#${sdkVersionObject['expoReactNativeTag']}`,\n          'doctor-invalid-version-of-react-native'\n        );\n        return WARNING;\n      }\n      ProjectUtils.clearNotification(projectRoot, 'doctor-invalid-version-of-react-native');\n\n      ProjectUtils.clearNotification(projectRoot, 'doctor-malformed-version-of-react-native');\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: ${reactNative} is not a valid version. Version must be in the form of sdk-x.y.z. Please update your package.json file.`,\n        'doctor-malformed-version-of-react-native'\n      );\n      return WARNING;\n    }\n  }\n  return NO_ISSUES;\n}\n\nasync function _validateNodeModulesAsync(projectRoot: string): Promise<number> {\n  // Check to make sure react-native is installed\n\n  if (resolveFrom.silent(projectRoot, 'react-native/local-cli/cli.js')) {\n    ProjectUtils.clearNotification(projectRoot, 'doctor-react-native-not-installed');\n  } else {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: react-native is not installed. Please run \\`npm install\\` or \\`yarn\\` in your project directory.`,\n      'doctor-react-native-not-installed'\n    );\n    return FATAL;\n  }\n  return NO_ISSUES;\n}\n\nexport async function validateWithoutNetworkAsync(\n  projectRoot: string,\n  options: { skipSDKVersionRequirement?: boolean } = {}\n): Promise<number> {\n  return validateAsync(projectRoot, false, options.skipSDKVersionRequirement);\n}\n\nexport async function validateWithNetworkAsync(\n  projectRoot: string,\n  options: { skipSDKVersionRequirement?: boolean } = {}\n): Promise<number> {\n  return validateAsync(projectRoot, true, options.skipSDKVersionRequirement);\n}\n\nasync function validateAsync(\n  projectRoot: string,\n  allowNetwork: boolean,\n  skipSDKVersionRequirement: boolean | undefined\n): Promise<number> {\n  if (EXPO_NO_DOCTOR) {\n    return NO_ISSUES;\n  }\n\n  const { exp, pkg } = getConfig(projectRoot, {\n    strict: true,\n    skipSDKVersionRequirement,\n  });\n\n  ProjectUtils.clearNotification(projectRoot, 'doctor-config-json-not-read');\n\n  let status = await _checkNpmVersionAsync(projectRoot);\n  if (status === FATAL) {\n    return status;\n  }\n\n  const expStatus = await _validateExpJsonAsync(\n    exp,\n    pkg,\n    projectRoot,\n    allowNetwork,\n    skipSDKVersionRequirement\n  );\n  if (expStatus === FATAL) {\n    return expStatus;\n  }\n\n  status = Math.max(status, expStatus);\n\n  const nodeModulesStatus = await _validateNodeModulesAsync(projectRoot);\n  if (nodeModulesStatus > status) {\n    return nodeModulesStatus;\n  }\n\n  return status;\n}\n\nexport async function validateExpoServersAsync(projectRoot: string): Promise<number> {\n  const domains = ['expo.io', 'expo.fyi', 'expo.dev', 'static.expo.dev', 'exp.host'];\n  const attempts = await Promise.all(\n    domains.map(async domain => ({\n      domain,\n      reachable: await isReachable(domain),\n    }))\n  );\n  const failures = attempts.filter(attempt => !attempt.reachable);\n\n  if (failures.length) {\n    failures.forEach(failure => {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: could not reach \\`${failure.domain}\\`.`,\n        `doctor-server-dashboard-not-reachable-${failure.domain}`\n      );\n    });\n    console.log();\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `We couldn't reach some of our domains, this might cause issues on our website or services.\\nPlease check your network configuration and try to access these domains in your browser.`,\n      'doctor-server-dashboard-not-reachable'\n    );\n    console.log();\n    return WARNING;\n  }\n  return NO_ISSUES;\n}\n"]}