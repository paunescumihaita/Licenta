"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("@expo/config");
const internal_1 = require("../internal");
async function getPublishExpConfigAsync(projectRoot, options) {
    if (options.releaseChannel != null && typeof options.releaseChannel !== 'string') {
        throw new internal_1.XDLError('INVALID_OPTIONS', 'releaseChannel must be a string');
    }
    options.releaseChannel = options.releaseChannel || 'default';
    // Verify that exp/app.json and package.json exist
    const { exp: privateExp } = config_1.getConfig(projectRoot);
    const { hooks } = privateExp;
    const { exp, pkg } = config_1.getConfig(projectRoot, { isPublicConfig: true });
    const { sdkVersion } = exp;
    // Only allow projects to be published with UNVERSIONED if a correct token is set in env
    if (sdkVersion === 'UNVERSIONED' && !internal_1.Env.maySkipManifestValidation()) {
        throw new internal_1.XDLError('INVALID_OPTIONS', 'Cannot publish with sdkVersion UNVERSIONED.');
    }
    exp.locales = await internal_1.ExponentTools.getResolvedLocalesAsync(projectRoot, exp);
    return {
        exp: Object.assign(Object.assign({}, exp), { sdkVersion: sdkVersion }),
        pkg,
        hooks,
    };
}
exports.getPublishExpConfigAsync = getPublishExpConfigAsync;
//# sourceMappingURL=getPublishExpConfigAsync.js.map