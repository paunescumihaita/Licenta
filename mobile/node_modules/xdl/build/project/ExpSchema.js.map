{"version":3,"file":"ExpSchema.js","sourceRoot":"","sources":["../../src/project/ExpSchema.ts"],"names":[],"mappings":"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","sourcesContent":["import { getConfig } from '@expo/config';\nimport { JSONObject } from '@expo/json-file';\nimport Schemer from '@expo/schemer';\nimport fs from 'fs';\nimport { boolish } from 'getenv';\nimport schemaDerefSync from 'json-schema-deref-sync';\nimport path from 'path';\n\nimport { ApiV2, FsCache } from '../internal';\n\nexport type Schema = any;\nexport type AssetSchema = {\n  // schema: Schema;\n  fieldPath: string;\n};\n\nconst _xdlSchemaJson: { [sdkVersion: string]: Schema } = {};\nconst _schemaCaches: { [version: string]: FsCache.Cacher<JSONObject> } = {};\n\nexport async function validatorFromProjectRoot(projectRoot: string): Promise<Schemer> {\n  const { exp } = getConfig(projectRoot);\n  if (!exp.sdkVersion) throw new Error(`Couldn't read local manifest`);\n  const schema = await getSchemaAsync(exp.sdkVersion);\n  const validator = new Schemer(schema);\n  return validator;\n}\n\nexport async function validateAsync(projectRoot: string) {\n  const { exp } = getConfig(projectRoot);\n  if (!exp.sdkVersion) throw new Error(`Couldn't read local manifest`);\n  const schema = await getSchemaAsync(exp.sdkVersion);\n  const validator = new Schemer(schema);\n  await validator.validateAll(exp);\n}\n\nexport async function getSchemaAsync(sdkVersion: string): Promise<Schema> {\n  const json = await _getSchemaJSONAsync(sdkVersion);\n  const schema = schemaDerefSync(json.schema);\n  return schema;\n}\n\n/**\n * Array of schema nodes that refer to assets along with their field path (eg. 'notification.icon')\n *\n * @param sdkVersion\n */\nexport async function getAssetSchemasAsync(sdkVersion: string): Promise<string[]> {\n  // If no SDK version is available then fall back to unversioned\n  const schema = await getSchemaAsync(sdkVersion ?? 'UNVERSIONED');\n  const assetSchemas: string[] = [];\n  const visit = (node: Schema, fieldPath: string) => {\n    if (node.meta && node.meta.asset) {\n      assetSchemas.push(fieldPath);\n    }\n    const properties = node.properties;\n    if (properties) {\n      Object.keys(properties).forEach(property =>\n        visit(properties[property], `${fieldPath}${fieldPath.length > 0 ? '.' : ''}${property}`)\n      );\n    }\n  };\n  visit(schema, '');\n\n  return assetSchemas;\n}\n\nasync function _getSchemaJSONAsync(sdkVersion: string): Promise<{ schema: Schema }> {\n  if (boolish('LOCAL_XDL_SCHEMA', false)) {\n    if (process.env.EXPONENT_UNIVERSE_DIR) {\n      return JSON.parse(\n        fs\n          .readFileSync(\n            path.join(\n              process.env.EXPONENT_UNIVERSE_DIR,\n              'server',\n              'www',\n              'xdl-schemas',\n              'UNVERSIONED-schema.json'\n            )\n          )\n          .toString()\n      );\n    } else {\n      throw new Error(`LOCAL_XDL_SCHEMA is set but EXPONENT_UNIVERSE_DIR is not.`);\n    }\n  }\n\n  if (!_xdlSchemaJson[sdkVersion]) {\n    try {\n      _xdlSchemaJson[sdkVersion] = await getConfigurationSchemaAsync(sdkVersion);\n    } catch (e) {\n      if (e.code && e.code === 'INVALID_JSON') {\n        throw new Error(`Couldn't read schema from server`);\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  return _xdlSchemaJson[sdkVersion];\n}\n\nasync function getConfigurationSchemaAsync(sdkVersion: string): Promise<JSONObject> {\n  if (!_schemaCaches.hasOwnProperty(sdkVersion)) {\n    _schemaCaches[sdkVersion] = new FsCache.Cacher(\n      async () => {\n        return await new ApiV2().getAsync(`project/configuration/schema/${sdkVersion}`);\n      },\n      `schema-${sdkVersion}.json`,\n      0,\n      path.join(__dirname, `../caches/schema-${sdkVersion}.json`)\n    );\n  }\n\n  return await _schemaCaches[sdkVersion].getAsync();\n}\n"]}