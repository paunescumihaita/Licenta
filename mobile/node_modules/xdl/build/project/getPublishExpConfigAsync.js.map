{"version":3,"file":"getPublishExpConfigAsync.js","sourceRoot":"","sources":["../../src/project/getPublishExpConfigAsync.ts"],"names":[],"mappings":";;AAAA,yCAMsB;AAEtB,0CAA2D;AAUpD,KAAK,UAAU,wBAAwB,CAC5C,WAAmB,EACnB,OAA+C;IAM/C,IAAI,OAAO,CAAC,cAAc,IAAI,IAAI,IAAI,OAAO,OAAO,CAAC,cAAc,KAAK,QAAQ,EAAE;QAChF,MAAM,IAAI,mBAAQ,CAAC,iBAAiB,EAAE,iCAAiC,CAAC,CAAC;KAC1E;IACD,OAAO,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,IAAI,SAAS,CAAC;IAE7D,kDAAkD;IAClD,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,kBAAS,CAAC,WAAW,CAAC,CAAC;IACnD,MAAM,EAAE,KAAK,EAAE,GAAG,UAAU,CAAC;IAC7B,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,kBAAS,CAAC,WAAW,EAAE,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAC;IAEtE,MAAM,EAAE,UAAU,EAAE,GAAG,GAAG,CAAC;IAE3B,wFAAwF;IACxF,IAAI,UAAU,KAAK,aAAa,IAAI,CAAC,cAAG,CAAC,yBAAyB,EAAE,EAAE;QACpE,MAAM,IAAI,mBAAQ,CAAC,iBAAiB,EAAE,6CAA6C,CAAC,CAAC;KACtF;IACD,GAAG,CAAC,OAAO,GAAG,MAAM,wBAAa,CAAC,uBAAuB,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;IAC5E,OAAO;QACL,GAAG,kCACE,GAAG,KACN,UAAU,EAAE,UAAW,GACxB;QACD,GAAG;QACH,KAAK;KACN,CAAC;AACJ,CAAC;AAjCD,4DAiCC","sourcesContent":["import {\n  ExpoAppManifest,\n  ExpoConfig,\n  getConfig,\n  PackageJSONConfig,\n  ProjectTarget,\n} from '@expo/config';\n\nimport { Env, ExponentTools, XDLError } from '../internal';\n\nexport type PublishOptions = {\n  releaseChannel?: string;\n  target?: ProjectTarget;\n  resetCache?: boolean;\n  maxWorkers?: number;\n  quiet?: boolean;\n};\n\nexport async function getPublishExpConfigAsync(\n  projectRoot: string,\n  options: Pick<PublishOptions, 'releaseChannel'>\n): Promise<{\n  exp: ExpoAppManifest;\n  pkg: PackageJSONConfig;\n  hooks: ExpoConfig['hooks'];\n}> {\n  if (options.releaseChannel != null && typeof options.releaseChannel !== 'string') {\n    throw new XDLError('INVALID_OPTIONS', 'releaseChannel must be a string');\n  }\n  options.releaseChannel = options.releaseChannel || 'default';\n\n  // Verify that exp/app.json and package.json exist\n  const { exp: privateExp } = getConfig(projectRoot);\n  const { hooks } = privateExp;\n  const { exp, pkg } = getConfig(projectRoot, { isPublicConfig: true });\n\n  const { sdkVersion } = exp;\n\n  // Only allow projects to be published with UNVERSIONED if a correct token is set in env\n  if (sdkVersion === 'UNVERSIONED' && !Env.maySkipManifestValidation()) {\n    throw new XDLError('INVALID_OPTIONS', 'Cannot publish with sdkVersion UNVERSIONED.');\n  }\n  exp.locales = await ExponentTools.getResolvedLocalesAsync(projectRoot, exp);\n  return {\n    exp: {\n      ...exp,\n      sdkVersion: sdkVersion!,\n    },\n    pkg,\n    hooks,\n  };\n}\n"]}