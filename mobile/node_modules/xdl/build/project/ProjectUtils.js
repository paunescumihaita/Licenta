"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const internal_1 = require("../internal");
const MAX_MESSAGE_LENGTH = 200;
const _projectRootToLogger = {};
function _getLogger(projectRoot) {
    let logger = _projectRootToLogger[projectRoot];
    if (!logger) {
        logger = internal_1.Logger.child({
            type: 'project',
            project: path_1.default.resolve(projectRoot),
        });
        _projectRootToLogger[projectRoot] = logger;
    }
    return logger;
}
function getLogger(projectRoot) {
    return _getLogger(projectRoot);
}
exports.getLogger = getLogger;
function logWithLevel(projectRoot, level, fields, msg, id) {
    if (id) {
        fields.issueId = id;
    }
    const logger = _getLogger(projectRoot);
    switch (level) {
        case 'debug':
            logger.debug(fields, msg);
            break;
        case 'info':
            logger.info(fields, msg);
            break;
        case 'warn':
            logger.warn(fields, msg);
            break;
        case 'error':
            logger.error(fields, msg);
            break;
        default:
            logger.debug(fields, msg);
            break;
    }
}
exports.logWithLevel = logWithLevel;
function logDebug(projectRoot, tag, message, id) {
    _getLogger(projectRoot).debug({ tag }, message.toString());
}
exports.logDebug = logDebug;
function logInfo(projectRoot, tag, message, id) {
    const fields = { tag };
    if (id) {
        fields.issueId = id;
    }
    _getLogger(projectRoot).info(fields, message.toString());
}
exports.logInfo = logInfo;
function logError(projectRoot, tag, message, id) {
    const fields = { tag };
    if (id) {
        fields.issueId = id;
    }
    _getLogger(projectRoot).error(fields, message.toString());
    let truncatedMessage = message.toString();
    if (truncatedMessage.length > MAX_MESSAGE_LENGTH) {
        truncatedMessage = truncatedMessage.substring(0, MAX_MESSAGE_LENGTH);
    }
    // temporarily remove sentry until we can trim events
    // send error to Sentry
    // Sentry.logError(message.toString(), {
    //   tags: { tag },
    // });
}
exports.logError = logError;
function logWarning(projectRoot, tag, message, id) {
    const fields = { tag };
    if (id) {
        fields.issueId = id;
    }
    _getLogger(projectRoot).warn(fields, message.toString());
    let truncatedMessage = message.toString();
    if (truncatedMessage.length > MAX_MESSAGE_LENGTH) {
        truncatedMessage = truncatedMessage.substring(0, MAX_MESSAGE_LENGTH);
    }
    internal_1.Analytics.logEvent('Project Warning', {
        projectRoot,
        tag,
        message: truncatedMessage,
    });
}
exports.logWarning = logWarning;
function clearNotification(projectRoot, id) {
    _getLogger(projectRoot).info({
        tag: 'expo',
        issueCleared: true,
        issueId: id,
    }, `No issue with ${id}`);
}
exports.clearNotification = clearNotification;
function attachLoggerStream(projectRoot, stream) {
    _getLogger(projectRoot).addStream(stream);
}
exports.attachLoggerStream = attachLoggerStream;
//# sourceMappingURL=ProjectUtils.js.map