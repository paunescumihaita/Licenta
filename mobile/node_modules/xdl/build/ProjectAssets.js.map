{"version":3,"file":"ProjectAssets.js","sourceRoot":"","sources":["../src/ProjectAssets.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoAppManifest, ExpoConfig } from '@expo/config';\nimport { BundleAssetWithFileHashes, BundleOutput } from '@expo/dev-server';\nimport assert from 'assert';\nimport FormData from 'form-data';\nimport fs from 'fs-extra';\nimport chunk from 'lodash/chunk';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\nimport uniqBy from 'lodash/uniqBy';\nimport md5hex from 'md5hex';\nimport minimatch from 'minimatch';\nimport path from 'path';\nimport urljoin from 'url-join';\n\nimport { ApiV2, ExpSchema, Logger as logger, ProjectUtils, UserManager } from './internal';\n\nconst EXPO_CDN = 'https://d1wp6m56sqw74a.cloudfront.net';\n\ntype ManifestAsset = { fileHashes: string[]; files: string[]; hash: string };\n\nexport type Asset = ManifestAsset | BundleAssetWithFileHashes;\n\ntype ManifestResolutionError = Error & {\n  localAssetPath?: string;\n  manifestField?: string;\n};\n\ntype BundlesByPlatform = { android: BundleOutput; ios: BundleOutput };\n\ntype ExportAssetsOptions = {\n  projectRoot: string;\n  exp: ExpoAppManifest;\n  hostedUrl: string;\n  assetPath: string;\n  bundles: BundlesByPlatform;\n  outputDir?: string;\n  experimentalBundle?: boolean;\n};\n\nexport async function resolveGoogleServicesFile(projectRoot: string, manifest: ExpoConfig) {\n  if (manifest.android?.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.android.googleServicesFile),\n      'utf8'\n    );\n    manifest.android.googleServicesFile = contents;\n  }\n  if (manifest.ios?.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.ios.googleServicesFile),\n      'base64'\n    );\n    manifest.ios.googleServicesFile = contents;\n  }\n}\n\n/**\n * Get all fields in the manifest that match assets, then filter the ones that aren't set.\n *\n * @param manifest\n * @returns Asset fields that the user has set like [\"icon\", \"splash.image\", ...]\n */\nasync function getAssetFieldPathsForManifestAsync(manifest: ExpoAppManifest): Promise<string[]> {\n  // String array like [\"icon\", \"notification.icon\", \"loading.icon\", \"loading.backgroundImage\", \"ios.icon\", ...]\n  const sdkAssetFieldPaths = await ExpSchema.getAssetSchemasAsync(manifest.sdkVersion);\n  return sdkAssetFieldPaths.filter(assetSchema => get(manifest, assetSchema));\n}\n\nexport async function resolveManifestAssets({\n  projectRoot,\n  manifest,\n  resolver,\n  strict = false,\n}: {\n  projectRoot: string;\n  manifest: ExpoAppManifest;\n  resolver: (assetPath: string) => Promise<string>;\n  strict?: boolean;\n}) {\n  try {\n    // Asset fields that the user has set like [\"icon\", \"splash.image\"]\n    const assetSchemas = await getAssetFieldPathsForManifestAsync(manifest);\n    // Get the URLs\n    const urls = await Promise.all(\n      assetSchemas.map(async manifestField => {\n        const pathOrURL = get(manifest, manifestField);\n        if (pathOrURL.match(/^https?:\\/\\/(.*)$/)) {\n          // It's a remote URL\n          return pathOrURL;\n        } else if (fs.existsSync(path.resolve(projectRoot, pathOrURL))) {\n          return await resolver(pathOrURL);\n        } else {\n          const err: ManifestResolutionError = new Error('Could not resolve local asset.');\n          err.localAssetPath = pathOrURL;\n          err.manifestField = manifestField;\n          throw err;\n        }\n      })\n    );\n\n    // Set the corresponding URL fields\n    assetSchemas.forEach((manifestField, index: number) =>\n      set(manifest, `${manifestField}Url`, urls[index])\n    );\n  } catch (e) {\n    let logMethod = ProjectUtils.logWarning;\n    if (strict) {\n      logMethod = ProjectUtils.logError;\n    }\n    if (e.localAssetPath) {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Unable to resolve asset \"${e.localAssetPath}\" from \"${e.manifestField}\" in your app.json or app.config.js`\n      );\n    } else {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Warning: Unable to resolve manifest assets. Icons might not work. ${e.message}.`\n      );\n    }\n\n    if (strict) {\n      throw new Error('Resolving assets failed.');\n    }\n  }\n}\n\n/**\n * Configures exp, preparing it for asset export\n *\n * @modifies {exp}\n *\n */\nasync function _configureExpForAssets(projectRoot: string, exp: ExpoAppManifest, assets: Asset[]) {\n  // Add google services file if it exists\n  await resolveGoogleServicesFile(projectRoot, exp);\n\n  // Convert asset patterns to a list of asset strings that match them.\n  // Assets strings are formatted as `asset_<hash>.<type>` and represent\n  // the name that the file will have in the app bundle. The `asset_` prefix is\n  // needed because android doesn't support assets that start with numbers.\n  if (exp.assetBundlePatterns) {\n    const fullPatterns: string[] = exp.assetBundlePatterns.map((p: string) =>\n      path.join(projectRoot, p)\n    );\n    // Only log the patterns in debug mode, if they aren't already defined in the app.json, then all files will be targeted.\n    logger.global.info('\\nProcessing asset bundle patterns:');\n    fullPatterns.forEach(p => logger.global.info('- ' + p));\n\n    // The assets returned by the RN packager has duplicates so make sure we\n    // only bundle each once.\n    const bundledAssets = new Set<string>();\n    for (const asset of assets) {\n      const file = asset.files && asset.files[0];\n      const shouldBundle =\n        '__packager_asset' in asset &&\n        asset.__packager_asset &&\n        file &&\n        fullPatterns.some((p: string) => minimatch(file, p));\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `${shouldBundle ? 'Include' : 'Exclude'} asset ${file}`\n      );\n      if (shouldBundle) {\n        asset.fileHashes.forEach(hash =>\n          bundledAssets.add(\n            'asset_' + hash + ('type' in asset && asset.type ? '.' + asset.type : '')\n          )\n        );\n      }\n    }\n    exp.bundledAssets = [...bundledAssets];\n    delete exp.assetBundlePatterns;\n  }\n\n  return exp;\n}\n\nexport async function publishAssetsAsync(\n  options: Pick<ExportAssetsOptions, 'projectRoot' | 'exp' | 'bundles'>\n) {\n  return exportAssetsAsync({\n    ...options,\n    hostedUrl: EXPO_CDN,\n    assetPath: '~assets',\n  });\n}\n\nexport async function exportAssetsAsync({\n  projectRoot,\n  exp,\n  hostedUrl,\n  assetPath,\n  outputDir,\n  bundles,\n  experimentalBundle,\n}: ExportAssetsOptions) {\n  logger.global.info('Analyzing assets');\n\n  let assets: Asset[];\n  if (experimentalBundle) {\n    assert(outputDir, 'outputDir must be specified when exporting to EAS');\n    assets = uniqBy([...bundles.android.assets, ...bundles.ios.assets], asset => asset.hash);\n  } else {\n    const assetCdnPath = urljoin(hostedUrl, assetPath);\n    assets = await collectAssets(projectRoot, exp, assetCdnPath, bundles);\n  }\n\n  logger.global.info('Saving assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    if (outputDir) {\n      await saveAssetsAsync(projectRoot, assets, outputDir);\n    } else {\n      // No output directory defined, use remote url.\n      await uploadAssetsAsync(projectRoot, assets);\n    }\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return { exp, assets };\n}\n\n/**\n * Collect list of assets missing on host\n *\n * @param paths asset paths found locally that need to be uploaded.\n */\nasync function fetchMissingAssetsAsync(paths: string[]): Promise<string[]> {\n  const user = await UserManager.ensureLoggedInAsync();\n  const api = ApiV2.clientForUser(user);\n  const result = await api.postAsync('assets/metadata', { keys: paths });\n\n  const metas = result.metadata;\n  const missing = paths.filter(key => !metas[key].exists);\n  return missing;\n}\n\nfunction logAssetTask(projectRoot: string, action: 'uploading' | 'saving', pathName: string) {\n  ProjectUtils.logDebug(projectRoot, 'expo', `${action} ${pathName}`);\n\n  const relativePath = pathName.replace(projectRoot, '');\n  logger.global.info({ quiet: true }, `${action} ${relativePath}`);\n}\n\n// TODO(jesse): Add analytics for upload\nasync function uploadAssetsAsync(projectRoot: string, assets: Asset[]) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = collectAssetPaths(assets);\n\n  const missing = await fetchMissingAssetsAsync(Object.keys(paths));\n\n  if (missing.length === 0) {\n    logger.global.info({ quiet: true }, `No assets changed, skipped.`);\n    return;\n  }\n\n  const keyChunks = chunk(missing, 5);\n\n  // Upload them in chunks of 5 to prevent network and system issues.\n  for (const keys of keyChunks) {\n    const formData = new FormData();\n    for (const key of keys) {\n      const pathName = paths[key];\n\n      logAssetTask(projectRoot, 'uploading', pathName);\n\n      formData.append(key, fs.createReadStream(pathName), pathName);\n    }\n\n    // TODO: Document what's going on\n    const user = await UserManager.ensureLoggedInAsync();\n    const api = ApiV2.clientForUser(user);\n    await api.uploadFormDataAsync('assets/upload', formData);\n  }\n}\n\nfunction collectAssetPaths(assets: Asset[]): Record<string, string> {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths: { [fileHash: string]: string } = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path: string, index: number) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n  return paths;\n}\n\nasync function saveAssetsAsync(projectRoot: string, assets: Asset[], outputDir: string) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = collectAssetPaths(assets);\n\n  // save files one chunk at a time\n  const keyChunks = chunk(Object.keys(paths), 5);\n  for (const keys of keyChunks) {\n    const promises = [];\n    for (const key of keys) {\n      const pathName = paths[key];\n\n      logAssetTask(projectRoot, 'saving', pathName);\n\n      const assetPath = path.resolve(outputDir, 'assets', key);\n\n      // copy file over to assetPath\n      promises.push(fs.copy(pathName, assetPath));\n    }\n    await Promise.all(promises);\n  }\n  logger.global.info('Files successfully saved.');\n}\n\n/**\n * Collects all the assets declared in the android app, ios app and manifest\n *\n * @param {string} hostedAssetPrefix\n *    The path where assets are hosted (ie) http://xxx.cloudfront.com/assets/\n *\n * @modifies {exp} Replaces relative asset paths in the manifest with hosted URLS\n *\n */\nasync function collectAssets(\n  projectRoot: string,\n  exp: ExpoAppManifest,\n  hostedAssetPrefix: string,\n  bundles: BundlesByPlatform\n): Promise<Asset[]> {\n  // Resolve manifest assets to their hosted URL and add them to the list of assets to\n  // be uploaded. Modifies exp.\n  const manifestAssets: Asset[] = [];\n  await resolveManifestAssets({\n    projectRoot,\n    manifest: exp,\n    async resolver(assetPath) {\n      const absolutePath = path.resolve(projectRoot, assetPath);\n      const contents = await fs.readFile(absolutePath);\n      const hash = md5hex(contents);\n      manifestAssets.push({ files: [absolutePath], fileHashes: [hash], hash });\n      return urljoin(hostedAssetPrefix, hash);\n    },\n    strict: true,\n  });\n\n  return [...bundles.ios.assets, ...bundles.android.assets, ...manifestAssets];\n}\n"]}