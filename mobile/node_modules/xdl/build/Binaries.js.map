{"version":3,"file":"Binaries.js","sourceRoot":"","sources":["../src/Binaries.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs-extra';\nimport hasbin from 'hasbin';\nimport path from 'path';\n\nimport { UserSettings, XDLError } from './internal';\n\nexport const OSX_SOURCE_PATH = path.join(__dirname, '..', 'binaries', 'osx');\n\nfunction _hasbinAsync(name: string) {\n  return new Promise((resolve, reject) => {\n    hasbin(name, result => {\n      resolve(result);\n    });\n  });\n}\n\nexport function getBinariesPath(): string {\n  if (process.platform === 'darwin') {\n    return path.join(__dirname, '..', 'binaries', 'osx');\n  } else if (process.platform === 'win32') {\n    return path.join(__dirname, '..', 'binaries', 'windows');\n  } else if (process.platform === 'linux') {\n    return path.join(__dirname, '..', 'binaries', 'linux');\n  } else {\n    throw new XDLError('PLATFORM_NOT_SUPPORTED', 'Platform not supported.');\n  }\n}\n\nexport async function addToPathAsync(name: string): Promise<void> {\n  if (await _hasbinAsync(name)) {\n    return;\n  }\n\n  // Users can set {ignoreBundledBinaries: [\"watchman\"]} to tell us to never use our version\n  const ignoreBundledBinaries = await UserSettings.getAsync(\n    'ignoreBundledBinaries',\n    [] as string[]\n  );\n  if (ignoreBundledBinaries.includes(name)) {\n    return;\n  }\n\n  const binariesPath = path.join(getBinariesPath(), name);\n  _prependToPath(binariesPath);\n}\n\nfunction _prependToPath(newPath: string) {\n  let currentPath = process.env.PATH ? process.env.PATH : '';\n  if (currentPath.length > 0) {\n    const delimiter = process.platform === 'win32' ? ';' : ':';\n    currentPath = `${delimiter}${currentPath}`;\n  }\n\n  process.env.PATH = `${newPath}${currentPath}`;\n}\n\nexport async function writePathToUserSettingsAsync(): Promise<void> {\n  await UserSettings.setAsync('PATH', process.env.PATH);\n\n  // Used in detach app\n  const pathFile = path.join(UserSettings.dotExpoHomeDirectory(), 'PATH');\n  await fs.writeFile(pathFile, process.env.PATH);\n}\n\nfunction _isDirectory(dir: string) {\n  try {\n    if (fs.statSync(dir).isDirectory()) {\n      return true;\n    }\n\n    return false;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function isXcodeInstalled(): boolean {\n  return _isDirectory('/Applications/Xcode.app/');\n}\n"]}