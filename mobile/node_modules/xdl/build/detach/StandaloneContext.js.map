{"version":3,"file":"StandaloneContext.js","sourceRoot":"","sources":["../../src/detach/StandaloneContext.ts"],"names":[],"mappings":";;AAAA,0CAAmD;AAMnD,mBAAmB;AACnB,SAAgB,2BAA2B,CAAC,KAAU;IACpD,OAAO,KAAK,IAAI,OAAO,KAAK,CAAC,WAAW,KAAK,QAAQ,IAAI,KAAK,IAAI,KAAK,CAAC;AAC1E,CAAC;AAFD,kEAEC;AAED,SAAgB,kCAAkC,CAChD,KAAa;IAEb,OAAO,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACjD,CAAC;AAJD,gFAIC;AAED,SAAgB,8BAA8B,CAAC,KAAU;IACvD,OAAO,CACL,KAAK;QACL,kCAAkC,CAAC,KAAK,CAAC,eAAe,CAAC;QACzD,OAAO,KAAK,CAAC,cAAc,KAAK,QAAQ;QACxC,OAAO,KAAK,CAAC,kBAAkB,KAAK,QAAQ,CAC7C,CAAC;AACJ,CAAC;AAPD,wEAOC;AAwBD,MAAM,iBAAiB;IAwDrB;;;;OAIG;IACH,WAAW;QACT,OAAO,KAAK,CAAC;IACf,CAAC;;AA3DM,mCAAiB,GAAG,CACzB,WAAmB,EACnB,GAAQ,EACR,YAAqB,EACE,EAAE;IACzB,MAAM,OAAO,GAAG,IAAI,qBAAqB,CACvC;QACE,WAAW;QACX,GAAG;KACJ,EACD;QACE,GAAG,EAAE,YAAY;QACjB,cAAc,EAAE,SAAS;KAC1B;IACD,uEAAuE;IACvE,+BAAoB,CAAC,WAAW,EAAE,CACnC,CAAC;IACF,OAAO,CAAC,MAAM,GAAG,GAAG,CAAC;IACrB,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEK,sCAAoB,GAAG,CAC5B,cAAsB,EACtB,WAA0B,EAC1B,QAAa,EACb,aAAkB,EAClB,eAAiD,EACjD,KAA2B,EAC3B,YAAoB,EACpB,cAAsB,EACtB,kBAA0B,EACA,EAAE;IAC5B,MAAM,OAAO,GAAG,IAAI,wBAAwB,CAC1C;QACE,cAAc;QACd,WAAW;QACX,QAAQ;QACR,aAAa;QACb,eAAe;QACf,kBAAkB;KACnB,EACD;QACE,GAAG,EAAE,YAAY;QACjB,cAAc,EAAE,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS;KAC5D,EACD,KAAK,CACN,CAAC;IACF,OAAO,CAAC,MAAM,GAAG,QAAQ,CAAC;IAE1B,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAYJ,MAAa,qBAAsB,SAAQ,iBAAiB;IAE1D,YACS,IAA+B,EAC/B,SAGN,EACM,KAA2B;QAElC,KAAK,EAAE,CAAC;QAPD,SAAI,GAAJ,IAAI,CAA2B;QAC/B,cAAS,GAAT,SAAS,CAGf;QACM,UAAK,GAAL,KAAK,CAAsB;QAPpC,SAAI,GAA8B,MAAM,CAAC;IAUzC,CAAC;CACF;AAZD,sDAYC;AAED,MAAa,wBAAyB,SAAQ,iBAAiB;IAE7D,YACS,IAAkC,EAClC,SAGN,EACM,KAA2B;QAElC,KAAK,EAAE,CAAC;QAPD,SAAI,GAAJ,IAAI,CAA8B;QAClC,cAAS,GAAT,SAAS,CAGf;QACM,UAAK,GAAL,KAAK,CAAsB;QAPpC,SAAI,GAA8B,SAAS,CAAC;IAU5C,CAAC;IAED;;;OAGG;IACH,WAAW;QACT,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AApBD,4DAoBC;AAID,kBAAe,iBAAiB,CAAC","sourcesContent":["import { StandaloneBuildFlags } from '../internal';\n\ntype StandaloneContextDataType = 'user' | 'service';\n\ntype StandaloneContextTestEnvironment = 'none' | 'local' | 'ci';\n\n// currently unused\nexport function isStandaloneContextDataUser(value: any): value is StandaloneContextDataUser {\n  return value && typeof value.projectPath === 'string' && 'exp' in value;\n}\n\nexport function isStandaloneContextTestEnvironment(\n  value: string\n): value is StandaloneContextTestEnvironment {\n  return ['none', 'local', 'ci'].includes(value);\n}\n\nexport function isStandaloneContextDataService(value: any): value is StandaloneContextDataService {\n  return (\n    value &&\n    isStandaloneContextTestEnvironment(value.testEnvironment) &&\n    typeof value.expoSourcePath === 'string' &&\n    typeof value.shellAppSdkVersion === 'string'\n  );\n}\n\n/**\n *  A user context is used when we are configuring a standalone app locally on a user's machine,\n *  such as during `exp detach`.\n */\nexport type StandaloneContextDataUser = {\n  projectPath: string;\n  exp: any;\n};\n\n/**\n *  A service context is used when we are generating a standalone app remotely on an Expo\n *  service machine, such as during `exp build`.\n */\nexport type StandaloneContextDataService = {\n  expoSourcePath: string;\n  archivePath: string | null;\n  manifest: any;\n  privateConfig: any;\n  testEnvironment: StandaloneContextTestEnvironment;\n  shellAppSdkVersion: string;\n};\n\nclass StandaloneContext {\n  data?: StandaloneContextDataUser | StandaloneContextDataService;\n  config: any; // same as underlying app.json or manifest\n\n  static createUserContext = (\n    projectPath: string,\n    exp: any,\n    publishedUrl?: string\n  ): StandaloneContextUser => {\n    const context = new StandaloneContextUser(\n      {\n        projectPath,\n        exp,\n      },\n      {\n        url: publishedUrl,\n        releaseChannel: 'default',\n      },\n      // we never expect to handle the build step for user contexts right now\n      StandaloneBuildFlags.createEmpty()\n    );\n    context.config = exp;\n    return context;\n  };\n\n  static createServiceContext = (\n    expoSourcePath: string,\n    archivePath: string | null,\n    manifest: any,\n    privateConfig: any,\n    testEnvironment: StandaloneContextTestEnvironment,\n    build: StandaloneBuildFlags,\n    publishedUrl: string,\n    releaseChannel: string,\n    shellAppSdkVersion: string\n  ): StandaloneContextService => {\n    const context = new StandaloneContextService(\n      {\n        expoSourcePath,\n        archivePath,\n        manifest,\n        privateConfig,\n        testEnvironment,\n        shellAppSdkVersion,\n      },\n      {\n        url: publishedUrl,\n        releaseChannel: releaseChannel ? releaseChannel : 'default',\n      },\n      build\n    );\n    context.config = manifest;\n\n    return context;\n  };\n\n  /**\n   *  On iOS we begin configuring standalone apps before we have any information about the\n   *  project's manifest. By default let's treat all contexts as non-anonymous and override\n   *  it in contexts that needs this to be different.\n   */\n  isAnonymous() {\n    return false;\n  }\n}\n\nexport class StandaloneContextUser extends StandaloneContext {\n  type: StandaloneContextDataType = 'user';\n  constructor(\n    public data: StandaloneContextDataUser,\n    public published: {\n      url?: string;\n      releaseChannel: 'default';\n    },\n    public build: StandaloneBuildFlags\n  ) {\n    super();\n  }\n}\n\nexport class StandaloneContextService extends StandaloneContext {\n  type: StandaloneContextDataType = 'service';\n  constructor(\n    public data: StandaloneContextDataService,\n    public published: {\n      url: string;\n      releaseChannel: string;\n    },\n    public build: StandaloneBuildFlags\n  ) {\n    super();\n  }\n\n  /**\n   *  On iOS we begin configuring standalone apps before we have any information about the\n   *  project's manifest.\n   */\n  isAnonymous() {\n    return true;\n  }\n}\n\nexport type AnyStandaloneContext = StandaloneContextUser | StandaloneContextService;\n\nexport default StandaloneContext;\n"]}