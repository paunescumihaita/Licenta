{"version":3,"file":"ExponentTools.js","sourceRoot":"","sources":["../../src/detach/ExponentTools.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config';\nimport spawnAsyncQuiet, { SpawnOptions, SpawnResult } from '@expo/spawn-async';\nimport axios from 'axios';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { Readable } from 'stream';\n\nimport { LoggerDetach, pipeOutputToLogger, XDLError } from '../internal';\n\nasync function saveUrlToPathAsync(url: string, path: string, timeout = 20000) {\n  const response = await axios.get(url, { responseType: 'stream', timeout });\n\n  return new Promise(function (resolve, reject) {\n    const stream = fs.createWriteStream(path);\n    stream.on('close', resolve);\n    stream.on('error', reject);\n    response.data.on('error', reject).pipe(stream);\n  });\n}\n\nasync function getManifestAsync(url: string, headers: any, options: any = {}) {\n  const buildPhaseLogger =\n    options.logger || LoggerDetach.withFields({ buildPhase: 'reading manifest' });\n\n  let response;\n  try {\n    response = await _retryPromise(() => axios.get(url.replace('exp://', 'http://'), { headers }));\n  } catch (err) {\n    buildPhaseLogger.error(err);\n    throw new Error('Failed to fetch manifest from www');\n  }\n\n  buildPhaseLogger.info('Using manifest:', JSON.stringify(response.data, null, 2));\n  return response.data;\n}\n\nasync function _retryPromise<T>(fn: (...args: any[]) => T, retries = 5): Promise<T> {\n  try {\n    return await fn();\n  } catch (err) {\n    if (retries-- > 0) {\n      return await _retryPromise(fn, retries);\n    } else {\n      throw err;\n    }\n  }\n}\n\nexport type AsyncSpawnOptions = SpawnOptions & {\n  loggerFields?: any;\n  pipeToLogger?: boolean | { stdout?: boolean; stderr?: boolean };\n  stdoutOnly?: boolean;\n  loggerLineTransformer?: (line: any) => any;\n};\n\nasync function spawnAsyncThrowError(\n  command: string,\n  args: string[],\n  options: AsyncSpawnOptions = {\n    stdio: 'inherit',\n    cwd: process.cwd(),\n  }\n): Promise<SpawnResult> {\n  const { pipeToLogger } = options;\n  if (pipeToLogger) {\n    options.stdio = 'pipe';\n    options.cwd = options.cwd || process.cwd();\n  }\n  const promise = spawnAsyncQuiet(command, args, options);\n  if (pipeToLogger && promise.child) {\n    const streams: { stdout?: Readable | null; stderr?: Readable | null } = {};\n    if (pipeToLogger === true || pipeToLogger.stdout) {\n      streams.stdout = promise.child.stdout;\n    }\n    if (pipeToLogger === true || pipeToLogger.stderr) {\n      streams.stderr = promise.child.stderr;\n    }\n    pipeOutputToLogger(streams, options.loggerFields, options);\n  }\n  return promise;\n}\n\nasync function spawnAsync(\n  command: string,\n  args: string[],\n  options: SpawnOptions\n): Promise<SpawnResult | void> {\n  try {\n    return await spawnAsyncThrowError(command, args, options);\n  } catch (e) {\n    LoggerDetach.error(e.message);\n  }\n}\n\nfunction isDirectory(dir: string) {\n  try {\n    if (fs.statSync(dir).isDirectory()) {\n      return true;\n    }\n\n    return false;\n  } catch (e) {\n    return false;\n  }\n}\n\ntype LocaleMap = { [lang: string]: any };\n\nasync function getResolvedLocalesAsync(projectRoot: string, exp: ExpoConfig): Promise<LocaleMap> {\n  const locales: LocaleMap = {};\n  if (exp.locales !== undefined) {\n    for (const [lang, localePath] of Object.entries(exp.locales)) {\n      const s = await fs.readFile(path.resolve(projectRoot, localePath as string), 'utf8');\n      try {\n        locales[lang] = JSON.parse(s);\n      } catch (e) {\n        throw new XDLError('INVALID_JSON', JSON.stringify(e));\n      }\n    }\n  }\n  return locales;\n}\n\nasync function regexFileAsync(\n  regex: RegExp | string,\n  replace: string,\n  filename: string\n): Promise<void> {\n  const file = await fs.readFile(filename);\n  const fileString = file.toString();\n  await fs.writeFile(filename, fileString.replace(regex, replace));\n}\n\n// Matches sed /d behavior\nasync function deleteLinesInFileAsync(\n  startRegex: RegExp | string,\n  endRegex: RegExp | string,\n  filename: string\n): Promise<void> {\n  const file = await fs.readFile(filename);\n  const fileString = file.toString();\n  const lines = fileString.split(/\\r?\\n/);\n  const filteredLines = [];\n  let inDeleteRange = false;\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].match(startRegex)) {\n      inDeleteRange = true;\n    }\n\n    if (!inDeleteRange) {\n      filteredLines.push(lines[i]);\n    }\n\n    if (inDeleteRange && lines[i].match(endRegex)) {\n      inDeleteRange = false;\n    }\n  }\n  await fs.writeFile(filename, filteredLines.join('\\n'));\n}\n\nexport {\n  isDirectory,\n  saveUrlToPathAsync,\n  getManifestAsync,\n  spawnAsyncThrowError,\n  spawnAsync,\n  getResolvedLocalesAsync,\n  regexFileAsync,\n  deleteLinesInFileAsync,\n};\n"]}