{"version":3,"file":"IosCodeSigning.js","sourceRoot":"","sources":["../../src/detach/IosCodeSigning.ts"],"names":[],"mappings":";;;;;AACA,oDAA4B;AAC5B,0DAAkC;AAelC,SAAgB,2BAA2B,CACzC,SAAsB,EACtB,EACE,mBAAmB,EACnB,gBAAgB,GAC0C;IAE5D,kCAAkC,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC;IACnE,8BAA8B,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;AAC9D,CAAC;AATD,kEASC;AAED,SAAS,kCAAkC,CAAC,SAAc,EAAE,mBAA2B;IACrF,MAAM,aAAa,GAAG,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;IACzD,MAAM,kBAAkB,GAAG,sBAAsB,CAAC,aAAa,CAAC,CAAC;IACjE,IAAI,kBAAkB,KAAK,mBAAmB,EAAE;QAC9C,MAAM,IAAI,KAAK,CACb,4GAA4G,CAC7G,CAAC;KACH;AACH,CAAC;AAED,SAAS,sBAAsB,CAAC,UAAkB;IAChD,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IACrD,OAAO,gBAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;AAClF,CAAC;AAED,SAAS,8BAA8B,CAAC,SAAc,EAAE,wBAAgC;;IACtF,MAAM,2BAA2B,GAAG,SAAS,CAAC,YAAY,CAAC,wBAAwB,CAAC,CAAC;IACrF,MAAM,sBAAsB,SAAG,QAAQ,CAAC,IAAI,CAAC,2BAA2B,CAAC,0CAAG,CAAC,CAAC,CAAC;IAE/E,IAAI,CAAC,sBAAsB,IAAI,CAAC,mBAAS,CAAC,wBAAwB,EAAE,sBAAsB,CAAC,EAAE;QAC3F,MAAM,IAAI,KAAK,CACb,gGAAgG,wBAAwB,sCAAsC,sBAAsB,EAAE,CACvL,CAAC;KACH;AACH,CAAC","sourcesContent":["import { PlistObject } from '@expo/plist';\nimport crypto from 'crypto';\nimport minimatch from 'minimatch';\n\nexport type IPABuilderParams = {\n  provisioningProfilePath: string;\n  certPath: string;\n  certPassword?: string;\n  appUUID: string;\n  keychainPath: string;\n  bundleIdentifier: string;\n  teamID: string;\n  manifest: any;\n  workspacePath: string;\n  clientBuild?: boolean;\n};\n\nexport function validateProvisioningProfile(\n  plistData: PlistObject,\n  {\n    distCertFingerprint,\n    bundleIdentifier,\n  }: { distCertFingerprint: string; bundleIdentifier: string }\n) {\n  _ensureDeveloperCertificateIsValid(plistData, distCertFingerprint);\n  _ensureBundleIdentifierIsValid(plistData, bundleIdentifier);\n}\n\nfunction _ensureDeveloperCertificateIsValid(plistData: any, distCertFingerprint: string) {\n  const devCertBase64 = plistData.DeveloperCertificates[0];\n  const devCertFingerprint = _genDerCertFingerprint(devCertBase64);\n  if (devCertFingerprint !== distCertFingerprint) {\n    throw new Error(\n      'validateProvisioningProfile: provisioning profile is not associated with uploaded distribution certificate'\n    );\n  }\n}\n\nfunction _genDerCertFingerprint(certBase64: string) {\n  const certBuffer = Buffer.from(certBase64, 'base64');\n  return crypto.createHash('sha1').update(certBuffer).digest('hex').toUpperCase();\n}\n\nfunction _ensureBundleIdentifierIsValid(plistData: any, expectedBundleIdentifier: string) {\n  const actualApplicationIdentifier = plistData.Entitlements['application-identifier'];\n  const actualBundleIdentifier = /\\.(.+)/.exec(actualApplicationIdentifier)?.[1];\n\n  if (!actualBundleIdentifier || !minimatch(expectedBundleIdentifier, actualBundleIdentifier)) {\n    throw new Error(\n      `validateProvisioningProfile: wrong bundleIdentifier found in provisioning profile; expected: ${expectedBundleIdentifier}, found (in provisioning profile): ${actualBundleIdentifier}`\n    );\n  }\n}\n"]}