"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const internal_1 = require("../internal");
// currently unused
function isStandaloneContextDataUser(value) {
    return value && typeof value.projectPath === 'string' && 'exp' in value;
}
exports.isStandaloneContextDataUser = isStandaloneContextDataUser;
function isStandaloneContextTestEnvironment(value) {
    return ['none', 'local', 'ci'].includes(value);
}
exports.isStandaloneContextTestEnvironment = isStandaloneContextTestEnvironment;
function isStandaloneContextDataService(value) {
    return (value &&
        isStandaloneContextTestEnvironment(value.testEnvironment) &&
        typeof value.expoSourcePath === 'string' &&
        typeof value.shellAppSdkVersion === 'string');
}
exports.isStandaloneContextDataService = isStandaloneContextDataService;
class StandaloneContext {
    /**
     *  On iOS we begin configuring standalone apps before we have any information about the
     *  project's manifest. By default let's treat all contexts as non-anonymous and override
     *  it in contexts that needs this to be different.
     */
    isAnonymous() {
        return false;
    }
}
StandaloneContext.createUserContext = (projectPath, exp, publishedUrl) => {
    const context = new StandaloneContextUser({
        projectPath,
        exp,
    }, {
        url: publishedUrl,
        releaseChannel: 'default',
    }, 
    // we never expect to handle the build step for user contexts right now
    internal_1.StandaloneBuildFlags.createEmpty());
    context.config = exp;
    return context;
};
StandaloneContext.createServiceContext = (expoSourcePath, archivePath, manifest, privateConfig, testEnvironment, build, publishedUrl, releaseChannel, shellAppSdkVersion) => {
    const context = new StandaloneContextService({
        expoSourcePath,
        archivePath,
        manifest,
        privateConfig,
        testEnvironment,
        shellAppSdkVersion,
    }, {
        url: publishedUrl,
        releaseChannel: releaseChannel ? releaseChannel : 'default',
    }, build);
    context.config = manifest;
    return context;
};
class StandaloneContextUser extends StandaloneContext {
    constructor(data, published, build) {
        super();
        this.data = data;
        this.published = published;
        this.build = build;
        this.type = 'user';
    }
}
exports.StandaloneContextUser = StandaloneContextUser;
class StandaloneContextService extends StandaloneContext {
    constructor(data, published, build) {
        super();
        this.data = data;
        this.published = published;
        this.build = build;
        this.type = 'service';
    }
    /**
     *  On iOS we begin configuring standalone apps before we have any information about the
     *  project's manifest.
     */
    isAnonymous() {
        return true;
    }
}
exports.StandaloneContextService = StandaloneContextService;
exports.default = StandaloneContext;
//# sourceMappingURL=StandaloneContext.js.map