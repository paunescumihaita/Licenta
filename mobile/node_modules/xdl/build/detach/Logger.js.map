{"version":3,"file":"Logger.js","sourceRoot":"","sources":["../../src/detach/Logger.ts"],"names":[],"mappings":"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","sourcesContent":["import bunyan from '@expo/bunyan';\nimport isEmpty from 'lodash/isEmpty';\nimport isPlainObject from 'lodash/isPlainObject';\nimport { Readable } from 'stream';\n\nexport enum LogLevel {\n  trace = 'trace',\n  debug = 'debug',\n  info = 'info',\n  warn = 'warn',\n  error = 'error',\n  fatal = 'fatal',\n}\n\ntype BunyanGetter = () => bunyan;\n\nexport class Logger {\n  loggerObj: bunyan;\n  loggerGetter?: BunyanGetter;\n  extraFields: any;\n\n  constructor(bunyanGetter?: BunyanGetter, extraFields?: any) {\n    this.loggerObj = bunyan.createLogger({ name: 'xdl-detach' });\n    this.loggerGetter = bunyanGetter;\n    this.extraFields = extraFields;\n  }\n\n  configure(loggerObj: bunyan) {\n    this.loggerObj = loggerObj;\n  }\n\n  withFields(extraFields: any) {\n    const getter = this.loggerGetter || (() => this.loggerObj);\n    return new Logger(getter, { ...this.extraFields, ...extraFields });\n  }\n\n  trace(...all: any[]) {\n    this.logLine(LogLevel.trace, ...all);\n  }\n  debug(...all: any[]) {\n    this.logLine(LogLevel.debug, ...all);\n  }\n  info(...all: any[]) {\n    this.logLine(LogLevel.info, ...all);\n  }\n  warn(...all: any[]) {\n    this.logLine(LogLevel.warn, ...all);\n  }\n  error(...all: any[]) {\n    this.logLine(LogLevel.error, ...all);\n  }\n  fatal(...all: any[]) {\n    this.logLine(LogLevel.fatal, ...all);\n  }\n\n  logLine(level: LogLevel, ...args: any[]) {\n    const argsToLog = [...args];\n    const extraFieldsFromArgsExist = isPlainObject(args[0]);\n    const extraFieldsFromArgs = extraFieldsFromArgsExist ? args[0] : {};\n    if (extraFieldsFromArgsExist) {\n      argsToLog.shift();\n    }\n    const extraFields = { ...extraFieldsFromArgs, ...this.extraFields };\n    if (!isEmpty(extraFields)) {\n      argsToLog.unshift(extraFields);\n    }\n\n    if (this.loggerGetter) {\n      const loggerObj = this.loggerGetter();\n      loggerObj[level](...argsToLog);\n    } else {\n      this.loggerObj[level](...argsToLog);\n    }\n  }\n}\n\nconst LoggerDetach = new Logger();\nexport default LoggerDetach;\n\nexport function pipeOutputToLogger(\n  { stdout, stderr }: { stdout?: Readable | null; stderr?: Readable | null } = {\n    stdout: null,\n    stderr: null,\n  },\n  extraFields = {},\n  {\n    stdoutOnly = false,\n    loggerLineTransformer,\n  }: { stdoutOnly?: boolean; loggerLineTransformer?: (line: any) => any } = {}\n) {\n  if (stdout) {\n    stdout.on('data', chunk =>\n      logMultiline(chunk, { ...extraFields, source: 'stdout' }, loggerLineTransformer)\n    );\n  }\n  if (stderr) {\n    const source = stdoutOnly ? 'stdout' : 'stderr';\n    stderr.on('data', chunk =>\n      logMultiline(chunk, { ...extraFields, source }, loggerLineTransformer)\n    );\n  }\n}\n\nfunction logMultiline(data: any, extraFields: any, loggerLineTransformer?: (line: any) => any) {\n  if (!data) {\n    return;\n  }\n  const lines = String(data).split('\\n');\n  lines.forEach(line => {\n    const lineToPrint = loggerLineTransformer ? loggerLineTransformer(line) : line;\n    if (lineToPrint) {\n      const args = [lineToPrint];\n      if (!isEmpty(extraFields)) {\n        args.unshift(extraFields);\n      }\n      LoggerDetach.info(...args);\n    }\n  });\n}\n"]}