{"version":3,"file":"Detach.js","sourceRoot":"","sources":["../../src/detach/Detach.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport JsonFile from '@expo/json-file';\nimport fs from 'fs-extra';\nimport { sync as globSync } from 'glob';\nimport path from 'path';\n\nimport {\n  AssetBundle,\n  EmbeddedAssets,\n  ExponentTools,\n  IosPlist,\n  IosWorkspace,\n  LoggerDetach as logger,\n  StandaloneBuildFlags,\n  StandaloneContext,\n  UrlUtils,\n} from '../internal';\n\nconst SERVICE_CONTEXT_PROJECT_NAME = 'exponent-view-template';\n\nasync function ensureBuildConstantsExistsIOSAsync(configFilePath: string) {\n  // EXBuildConstants is included in newer ExpoKit projects.\n  // create it if it doesn't exist.\n  const doesBuildConstantsExist = fs.existsSync(\n    path.join(configFilePath, 'EXBuildConstants.plist')\n  );\n  if (!doesBuildConstantsExist) {\n    await IosPlist.createBlankAsync(configFilePath, 'EXBuildConstants');\n    logger.info('Created `EXBuildConstants.plist` because it did not exist yet');\n  }\n}\n\nasync function _getIosExpoKitVersionThrowErrorAsync(iosProjectDirectory: string) {\n  let expoKitVersion = '';\n  const podfileLockPath = path.join(iosProjectDirectory, 'Podfile.lock');\n  try {\n    const podfileLock = await fs.readFile(podfileLockPath, 'utf8');\n    const expoKitVersionRegex = /ExpoKit\\/Core\\W?\\(([0-9.]+)\\)/gi;\n    const match = expoKitVersionRegex.exec(podfileLock);\n    if (!match) {\n      throw new Error('ExpoKit/Core not found');\n    }\n    expoKitVersion = match[1];\n  } catch (e) {\n    throw new Error(\n      `Unable to read ExpoKit version from Podfile.lock. Make sure your project depends on ExpoKit. (${e})`\n    );\n  }\n  return expoKitVersion;\n}\n\nasync function readNullableConfigJsonAsync(projectDir: string) {\n  try {\n    return getConfig(projectDir);\n  } catch {\n    return null;\n  }\n}\n\nasync function prepareDetachedBuildIosAsync(projectDir: string, args: any) {\n  const config = await readNullableConfigJsonAsync(projectDir);\n  if (config && config.exp.name !== SERVICE_CONTEXT_PROJECT_NAME) {\n    return prepareDetachedUserContextIosAsync(projectDir, config.exp, args);\n  } else {\n    return prepareDetachedServiceContextIosAsync(projectDir, args);\n  }\n}\n\nasync function prepareDetachedServiceContextIosAsync(projectDir: string, args: any) {\n  // service context\n  // TODO: very brittle hack: the paths here are hard coded to match the single workspace\n  // path generated inside IosShellApp. When we support more than one path, this needs to\n  // be smarter.\n  const expoRootDir = path.join(projectDir, '..', '..');\n  const workspaceSourcePath = path.join(projectDir, 'ios');\n  const buildFlags = StandaloneBuildFlags.createIos('Release', { workspaceSourcePath });\n  // @ts-ignore missing 9th argument\n  const context = StandaloneContext.createServiceContext(\n    expoRootDir,\n    null,\n    null,\n    null,\n    /* testEnvironment */ 'none',\n    buildFlags,\n    null,\n    null\n  );\n  const { iosProjectDirectory, supportingDirectory } = IosWorkspace.getPaths(context);\n  const expoKitVersion = await _getIosExpoKitVersionThrowErrorAsync(iosProjectDirectory);\n\n  // use prod api keys if available\n  const prodApiKeys = await _readDefaultApiKeysAsync(\n    path.join(context.data.expoSourcePath, '__internal__', 'keys.json')\n  );\n\n  const { exp } = getConfig(expoRootDir, { skipSDKVersionRequirement: true });\n\n  await IosPlist.modifyAsync(supportingDirectory, 'EXBuildConstants', constantsConfig => {\n    // verify that we are actually in a service context and not a misconfigured project\n    const contextType = constantsConfig.STANDALONE_CONTEXT_TYPE;\n    if (contextType !== 'service') {\n      throw new Error(\n        'Unable to configure a project which has no app.json and also no STANDALONE_CONTEXT_TYPE.'\n      );\n    }\n    constantsConfig.EXPO_RUNTIME_VERSION = expoKitVersion;\n    constantsConfig.API_SERVER_ENDPOINT =\n      process.env.ENVIRONMENT === 'staging'\n        ? 'https://staging.exp.host/--/api/v2/'\n        : 'https://exp.host/--/api/v2/';\n    if (prodApiKeys) {\n      constantsConfig.DEFAULT_API_KEYS = prodApiKeys;\n    }\n    if (exp && exp.sdkVersion) {\n      constantsConfig.TEMPORARY_SDK_VERSION = exp.sdkVersion;\n    }\n    return constantsConfig;\n  });\n}\n\nasync function _readDefaultApiKeysAsync(jsonFilePath: string) {\n  if (fs.existsSync(jsonFilePath)) {\n    const keys: any = {};\n    const allKeys = await new JsonFile(jsonFilePath).readAsync();\n    const validKeys = ['AMPLITUDE_KEY', 'GOOGLE_MAPS_IOS_API_KEY'];\n    for (const key in allKeys) {\n      if (allKeys.hasOwnProperty(key) && validKeys.includes(key)) {\n        keys[key] = allKeys[key];\n      }\n    }\n    return keys;\n  }\n  return null;\n}\n\nasync function prepareDetachedUserContextIosAsync(projectDir: string, exp: ExpoConfig, args: any) {\n  const context = StandaloneContext.createUserContext(projectDir, exp);\n  const { iosProjectDirectory, supportingDirectory } = IosWorkspace.getPaths(context);\n\n  logger.info(`Preparing iOS build at ${iosProjectDirectory}...`);\n  // These files cause @providesModule naming collisions\n  // but are not available until after `pod install` has run.\n  const podsDirectory = path.join(iosProjectDirectory, 'Pods');\n  if (!ExponentTools.isDirectory(podsDirectory)) {\n    throw new Error(`Can't find directory ${podsDirectory}, make sure you've run pod install.`);\n  }\n  const rnPodDirectory = path.join(podsDirectory, 'React');\n  if (ExponentTools.isDirectory(rnPodDirectory)) {\n    const rnFilesToDelete = globSync('**/*.@(js|json)', {\n      absolute: true,\n      cwd: rnPodDirectory,\n    });\n    if (rnFilesToDelete) {\n      for (let i = 0; i < rnFilesToDelete.length; i++) {\n        await fs.unlink(rnFilesToDelete[i]);\n      }\n    }\n  }\n\n  // insert expo development url into iOS config\n  if (!args.skipXcodeConfig) {\n    // populate EXPO_RUNTIME_VERSION from ExpoKit pod version\n    const expoKitVersion = await _getIosExpoKitVersionThrowErrorAsync(iosProjectDirectory);\n\n    // populate development url\n    const devUrl = await UrlUtils.constructManifestUrlAsync(projectDir);\n\n    // populate default api keys\n    const defaultApiKeys = await _readDefaultApiKeysAsync(\n      path.join(podsDirectory, 'ExpoKit', 'template-files', 'keys.json')\n    );\n\n    await ensureBuildConstantsExistsIOSAsync(supportingDirectory);\n    await IosPlist.modifyAsync(supportingDirectory, 'EXBuildConstants', constantsConfig => {\n      constantsConfig.developmentUrl = devUrl;\n      constantsConfig.EXPO_RUNTIME_VERSION = expoKitVersion;\n      if (defaultApiKeys) {\n        constantsConfig.DEFAULT_API_KEYS = defaultApiKeys;\n      }\n      if (exp.sdkVersion) {\n        constantsConfig.TEMPORARY_SDK_VERSION = exp.sdkVersion;\n      }\n      return constantsConfig;\n    });\n  }\n}\n\nexport async function prepareDetachedBuildAsync(projectDir: string, args: any) {\n  if (args.platform === 'ios') {\n    await prepareDetachedBuildIosAsync(projectDir, args);\n  } else {\n    const expoBuildConstantsMatches = globSync('android/**/DetachBuildConstants.java', {\n      absolute: true,\n      cwd: projectDir,\n    });\n    if (expoBuildConstantsMatches && expoBuildConstantsMatches.length) {\n      const expoBuildConstants = expoBuildConstantsMatches[0];\n      const devUrl = await UrlUtils.constructManifestUrlAsync(projectDir);\n      await ExponentTools.regexFileAsync(\n        /DEVELOPMENT_URL = \"[^\"]*\";/,\n        `DEVELOPMENT_URL = \"${devUrl}\";`,\n        expoBuildConstants\n      );\n    }\n  }\n}\n\n// args.dest: string,\n// This is the path where assets will be copied to. It should be\n// `$CONFIGURATION_BUILD_DIR/$UNLOCALIZED_RESOURCES_FOLDER_PATH` on iOS\n// (see `exponent-view-template.xcodeproj/project.pbxproj` for an example)\n// and `$buildDir/intermediates/assets/$targetPath` on Android (see\n// `android/app/expo.gradle` for an example).\nexport async function bundleAssetsAsync(projectDir: string, args: any) {\n  const options = await readNullableConfigJsonAsync(projectDir);\n  if (!options || options.exp.name === SERVICE_CONTEXT_PROJECT_NAME) {\n    // Don't run assets bundling for the service context.\n    return;\n  }\n  const { exp } = options;\n  const bundledManifestPath = EmbeddedAssets.getEmbeddedManifestPath(\n    args.platform,\n    projectDir,\n    exp as any\n  );\n  if (!bundledManifestPath) {\n    logger.warn(\n      `Skipped assets bundling because the '${args.platform}.publishManifestPath' key is not specified in the app manifest.`\n    );\n    return;\n  }\n\n  let manifest;\n  try {\n    manifest = JSON.parse(await fs.readFile(bundledManifestPath, 'utf8'));\n  } catch (ex) {\n    throw new Error(\n      `Error reading the manifest file. Make sure the path '${bundledManifestPath}' is correct.\\n\\nError: ${ex.message}`\n    );\n  }\n  if (!manifest || !Object.keys(manifest).length) {\n    throw new Error(`The manifest at '${bundledManifestPath}' was empty or invalid.`);\n  }\n\n  await AssetBundle.bundleAsync(null, manifest.bundledAssets, args.dest, getExportUrl(manifest));\n}\n\n/**\n * This function extracts the exported public URL that is set in the manifest\n * when the developer runs `expo export --public-url x`. We use this to ensure\n * that we fetch the resources from the appropriate place when doing builds\n * against self-hosted apps.\n */\nfunction getExportUrl(manifest: any) {\n  const { bundleUrl } = manifest;\n  if (bundleUrl.includes(AssetBundle.DEFAULT_CDN_HOST)) {\n    return null;\n  }\n\n  try {\n    const bundleUrlParts = bundleUrl.split('/');\n    return bundleUrlParts.slice(0, bundleUrlParts.length - 2).join('/');\n  } catch (e) {\n    throw Error(\n      `Expected bundleUrl to be of the format https://domain/bundles/bundle-hash-id, ${bundleUrl} does not follow this format.`\n    );\n  }\n}\n"]}