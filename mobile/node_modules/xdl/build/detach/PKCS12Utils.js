"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_forge_1 = __importDefault(require("node-forge"));
function getP12CertFingerprint(p12Buffer, passwordRaw) {
    const certData = _getCertData(p12Buffer, passwordRaw);
    const certAsn1 = node_forge_1.default.pki.certificateToAsn1(certData);
    const certDer = node_forge_1.default.asn1.toDer(certAsn1).getBytes();
    return node_forge_1.default.md.sha1.create().update(certDer).digest().toHex().toUpperCase();
}
exports.getP12CertFingerprint = getP12CertFingerprint;
function findP12CertSerialNumber(p12Buffer, passwordRaw) {
    const { serialNumber } = getCertData(p12Buffer, passwordRaw);
    return serialNumber;
}
exports.findP12CertSerialNumber = findP12CertSerialNumber;
function _processSerialNumber(maybeSerialNumber) {
    return maybeSerialNumber ? maybeSerialNumber.replace(/^0+/, '').toUpperCase() : null;
}
function getCertData(p12Buffer, passwordRaw) {
    const certData = _getCertData(p12Buffer, passwordRaw);
    return Object.assign(Object.assign({}, certData), { serialNumber: _processSerialNumber(certData.serialNumber) });
}
exports.getCertData = getCertData;
function _getCertData(p12Buffer, passwordRaw) {
    var _a, _b, _c;
    if (Buffer.isBuffer(p12Buffer)) {
        p12Buffer = p12Buffer.toString('base64');
    }
    else if (typeof p12Buffer !== 'string') {
        throw new Error('_getCertData only takes strings and buffers.');
    }
    const password = String(passwordRaw || '');
    const p12Der = node_forge_1.default.util.decode64(p12Buffer);
    const p12Asn1 = node_forge_1.default.asn1.fromDer(p12Der);
    const p12 = node_forge_1.default.pkcs12.pkcs12FromAsn1(p12Asn1, password);
    const certBagType = node_forge_1.default.pki.oids.certBag;
    const certData = (_c = (_b = (_a = p12.getBags({ bagType: certBagType })) === null || _a === void 0 ? void 0 : _a[certBagType]) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.cert;
    if (!certData) {
        throw new Error("_getCertData: couldn't find cert bag");
    }
    return certData;
}
//# sourceMappingURL=PKCS12Utils.js.map