{"version":3,"file":"AssetBundle.js","sourceRoot":"","sources":["../../src/detach/AssetBundle.ts"],"names":[],"mappings":";;;;;AAAA,wDAA0B;AAC1B,kDAAyB;AACzB,sDAA6B;AAC7B,gDAAwB;AACxB,8CAAsB;AACtB,wDAA+B;AAE/B,0CAAkE;AAElE,MAAM,YAAY,GAAG,CAAC,SAAS,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;AAC1D,QAAA,gBAAgB,GAAG,uCAAuC,CAAC;AAC3D,QAAA,sBAAsB,GAAG,GAAG,wBAAgB,UAAU,CAAC;AAI7D,KAAK,UAAU,WAAW,CAC/B,OAAY,EACZ,MAAgB,EAChB,IAAY,EACZ,SAAyB;IAEzB,IAAI,CAAC,MAAM,EAAE;QACX,OAAO;KACR;IAED,MAAM,kBAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAEzB,MAAM,WAAW,GAAG,uBAAuB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IAChE,MAAM,eAAI,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE,CAAC,kBAAkB,CAAC,WAAW,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC;AAChG,CAAC;AAdD,kCAcC;AAED,KAAK,UAAU,kBAAkB,CAAC,WAAwB,EAAE,IAAY,EAAE,KAAa;IACrF,MAAM,cAAc,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IAC9C,MAAM,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC;IACrC,MAAM,IAAI,GACR,cAAc,IAAI,CAAC;QACjB,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,YAAY,EAAE,cAAc,CAAC;QAC/C,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;IACpC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/B,MAAM,iBAAM,CAAC,GAAG,EAAE,CAAC,wBAAa,CAAC,kBAAkB,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,cAAI,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE;QAC9F,OAAO,EAAE,CAAC;KACX,CAAC,CAAC;AACL,CAAC;AAED,SAAS,uBAAuB,CAC9B,OAA6B,EAC7B,SAAyB;IAEzB,IAAI,YAAY,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,SAAS,CAAC,CAAC,CAAC,8BAAsB,CAAC;IAE9E,IAAI,OAAO,IAAI,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,CAAC,GAAG,EAAE;QACzD,MAAM,EAAE,gBAAgB,GAAG,UAAU,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC;QACzD,MAAM,YAAY,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC;QAC3C,MAAM,EAAE,QAAQ,EAAE,GAAG,aAAG,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QAC7C,IAAI,QAAQ,IAAI,IAAI,EAAE;YACpB,MAAM,IAAI,KAAK,CACb,6CAA6C,YAAY,2CAA2C,CACrG,CAAC;SACH;QACD,MAAM,eAAe,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAChE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE;YAC3C,YAAY,GAAG,aAAG,CAAC,OAAO,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAC;SAC5D;KACF;IAED,OAAO,IAAI,CAAC,EAAE,CAAC,kBAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;AAC7C,CAAC","sourcesContent":["import fs from 'fs-extra';\nimport pMap from 'p-map';\nimport pRetry from 'p-retry';\nimport path from 'path';\nimport url from 'url';\nimport urlJoin from 'url-join';\n\nimport { AnyStandaloneContext, ExponentTools } from '../internal';\n\nconst EXPO_DOMAINS = ['expo.io', 'exp.host', 'expo.test', 'localhost'];\nexport const DEFAULT_CDN_HOST = 'https://d1wp6m56sqw74a.cloudfront.net';\nexport const ASSETS_DIR_DEFAULT_URL = `${DEFAULT_CDN_HOST}/~assets`;\n\ntype UrlResolver = (hash: string) => string;\n\nexport async function bundleAsync(\n  context: any,\n  assets: string[],\n  dest: string,\n  exportUrl?: string | null\n) {\n  if (!assets) {\n    return;\n  }\n\n  await fs.ensureDir(dest);\n\n  const urlResolver = createAssetsUrlResolver(context, exportUrl);\n  await pMap(assets, asset => downloadAssetAsync(urlResolver, dest, asset), { concurrency: 5 });\n}\n\nasync function downloadAssetAsync(urlResolver: UrlResolver, dest: string, asset: string) {\n  const extensionIndex = asset.lastIndexOf('.');\n  const prefixLength = 'asset_'.length;\n  const hash =\n    extensionIndex >= 0\n      ? asset.substring(prefixLength, extensionIndex)\n      : asset.substring(prefixLength);\n  console.log(urlResolver(hash));\n  await pRetry(() => ExponentTools.saveUrlToPathAsync(urlResolver(hash), path.join(dest, asset)), {\n    retries: 3,\n  });\n}\n\nfunction createAssetsUrlResolver(\n  context: AnyStandaloneContext,\n  exportUrl?: string | null\n): UrlResolver {\n  let assetsDirUrl = exportUrl ? `${exportUrl}/assets` : ASSETS_DIR_DEFAULT_URL;\n\n  if (context && context.published && context.published.url) {\n    const { assetUrlOverride = './assets' } = context.config;\n    const publishedUrl = context.published.url;\n    const { hostname } = url.parse(publishedUrl);\n    if (hostname == null) {\n      throw new Error(\n        `Could not resolve asset URLs relative to \"${publishedUrl}\". Published URL must be an absolute URL.`\n      );\n    }\n    const maybeExpoDomain = hostname.split('.').slice(-2).join('.');\n    if (!EXPO_DOMAINS.includes(maybeExpoDomain)) {\n      assetsDirUrl = url.resolve(publishedUrl, assetUrlOverride);\n    }\n  }\n\n  return hash => urlJoin(assetsDirUrl, hash);\n}\n"]}