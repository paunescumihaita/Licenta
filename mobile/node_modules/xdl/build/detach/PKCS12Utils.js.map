{"version":3,"file":"PKCS12Utils.js","sourceRoot":"","sources":["../../src/detach/PKCS12Utils.ts"],"names":[],"mappings":";;;;;AAAA,4DAA+B;AAE/B,SAAgB,qBAAqB,CACnC,SAA0B,EAC1B,WAA0B;IAE1B,MAAM,QAAQ,GAAG,YAAY,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IACtD,MAAM,QAAQ,GAAG,oBAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;IACvD,MAAM,OAAO,GAAG,oBAAK,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;IACtD,OAAO,oBAAK,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,WAAW,EAAE,CAAC;AAC/E,CAAC;AARD,sDAQC;AAED,SAAgB,uBAAuB,CACrC,SAA0B,EAC1B,WAA0B;IAE1B,MAAM,EAAE,YAAY,EAAE,GAAG,WAAW,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IAC7D,OAAO,YAAY,CAAC;AACtB,CAAC;AAND,0DAMC;AAED,SAAS,oBAAoB,CAAC,iBAA4C;IACxE,OAAO,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;AACvF,CAAC;AAED,SAAgB,WAAW,CAAC,SAA0B,EAAE,WAA0B;IAChF,MAAM,QAAQ,GAAG,YAAY,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IACtD,uCACK,QAAQ,KACX,YAAY,EAAE,oBAAoB,CAAC,QAAQ,CAAC,YAAY,CAAC,IACzD;AACJ,CAAC;AAND,kCAMC;AAED,SAAS,YAAY,CAAC,SAA0B,EAAE,WAA0B;;IAC1E,IAAI,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;QAC9B,SAAS,GAAG,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;KAC1C;SAAM,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;QACxC,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;KACjE;IAED,MAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC;IAC3C,MAAM,MAAM,GAAG,oBAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC9C,MAAM,OAAO,GAAG,oBAAK,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC3C,MAAM,GAAG,GAAG,oBAAK,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IAC3D,MAAM,WAAW,GAAG,oBAAK,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;IAC3C,MAAM,QAAQ,qBAAG,GAAG,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,0CAAG,WAAW,2CAAI,CAAC,2CAAG,IAAI,CAAC;IACjF,IAAI,CAAC,QAAQ,EAAE;QACb,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;KACzD;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["import forge from 'node-forge';\n\nexport function getP12CertFingerprint(\n  p12Buffer: Buffer | string,\n  passwordRaw: string | null\n): string {\n  const certData = _getCertData(p12Buffer, passwordRaw);\n  const certAsn1 = forge.pki.certificateToAsn1(certData);\n  const certDer = forge.asn1.toDer(certAsn1).getBytes();\n  return forge.md.sha1.create().update(certDer).digest().toHex().toUpperCase();\n}\n\nexport function findP12CertSerialNumber(\n  p12Buffer: Buffer | string,\n  passwordRaw: string | null\n): string | null {\n  const { serialNumber } = getCertData(p12Buffer, passwordRaw);\n  return serialNumber;\n}\n\nfunction _processSerialNumber(maybeSerialNumber: string | null | undefined) {\n  return maybeSerialNumber ? maybeSerialNumber.replace(/^0+/, '').toUpperCase() : null;\n}\n\nexport function getCertData(p12Buffer: Buffer | string, passwordRaw: string | null) {\n  const certData = _getCertData(p12Buffer, passwordRaw);\n  return {\n    ...certData,\n    serialNumber: _processSerialNumber(certData.serialNumber),\n  };\n}\n\nfunction _getCertData(p12Buffer: Buffer | string, passwordRaw: string | null) {\n  if (Buffer.isBuffer(p12Buffer)) {\n    p12Buffer = p12Buffer.toString('base64');\n  } else if (typeof p12Buffer !== 'string') {\n    throw new Error('_getCertData only takes strings and buffers.');\n  }\n\n  const password = String(passwordRaw || '');\n  const p12Der = forge.util.decode64(p12Buffer);\n  const p12Asn1 = forge.asn1.fromDer(p12Der);\n  const p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, password);\n  const certBagType = forge.pki.oids.certBag;\n  const certData = p12.getBags({ bagType: certBagType })?.[certBagType]?.[0]?.cert;\n  if (!certData) {\n    throw new Error(\"_getCertData: couldn't find cert bag\");\n  }\n  return certData;\n}\n"]}