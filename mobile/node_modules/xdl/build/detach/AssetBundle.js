"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const p_map_1 = __importDefault(require("p-map"));
const p_retry_1 = __importDefault(require("p-retry"));
const path_1 = __importDefault(require("path"));
const url_1 = __importDefault(require("url"));
const url_join_1 = __importDefault(require("url-join"));
const internal_1 = require("../internal");
const EXPO_DOMAINS = ['expo.io', 'exp.host', 'expo.test', 'localhost'];
exports.DEFAULT_CDN_HOST = 'https://d1wp6m56sqw74a.cloudfront.net';
exports.ASSETS_DIR_DEFAULT_URL = `${exports.DEFAULT_CDN_HOST}/~assets`;
async function bundleAsync(context, assets, dest, exportUrl) {
    if (!assets) {
        return;
    }
    await fs_extra_1.default.ensureDir(dest);
    const urlResolver = createAssetsUrlResolver(context, exportUrl);
    await p_map_1.default(assets, asset => downloadAssetAsync(urlResolver, dest, asset), { concurrency: 5 });
}
exports.bundleAsync = bundleAsync;
async function downloadAssetAsync(urlResolver, dest, asset) {
    const extensionIndex = asset.lastIndexOf('.');
    const prefixLength = 'asset_'.length;
    const hash = extensionIndex >= 0
        ? asset.substring(prefixLength, extensionIndex)
        : asset.substring(prefixLength);
    console.log(urlResolver(hash));
    await p_retry_1.default(() => internal_1.ExponentTools.saveUrlToPathAsync(urlResolver(hash), path_1.default.join(dest, asset)), {
        retries: 3,
    });
}
function createAssetsUrlResolver(context, exportUrl) {
    let assetsDirUrl = exportUrl ? `${exportUrl}/assets` : exports.ASSETS_DIR_DEFAULT_URL;
    if (context && context.published && context.published.url) {
        const { assetUrlOverride = './assets' } = context.config;
        const publishedUrl = context.published.url;
        const { hostname } = url_1.default.parse(publishedUrl);
        if (hostname == null) {
            throw new Error(`Could not resolve asset URLs relative to "${publishedUrl}". Published URL must be an absolute URL.`);
        }
        const maybeExpoDomain = hostname.split('.').slice(-2).join('.');
        if (!EXPO_DOMAINS.includes(maybeExpoDomain)) {
            assetsDirUrl = url_1.default.resolve(publishedUrl, assetUrlOverride);
        }
    }
    return hash => url_join_1.default(assetsDirUrl, hash);
}
//# sourceMappingURL=AssetBundle.js.map