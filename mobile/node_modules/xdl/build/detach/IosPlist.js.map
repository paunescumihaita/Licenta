{"version":3,"file":"IosPlist.js","sourceRoot":"","sources":["../../src/detach/IosPlist.ts"],"names":[],"mappings":"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","sourcesContent":["import plist from '@expo/plist';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { ExponentTools, LoggerDetach as logger } from '../internal';\n\nconst { spawnAsyncThrowError } = ExponentTools;\n\nfunction _getNormalizedPlistFilename(plistName: string) {\n  let plistFilename;\n  if (plistName.indexOf('.') !== -1) {\n    plistFilename = plistName;\n  } else {\n    plistFilename = `${plistName}.plist`;\n  }\n  return plistFilename;\n}\n\n/**\n *  @param plistName base filename of property list. if no extension, assumes .plist\n */\nasync function modifyAsync(plistPath: string, plistName: string, transform: (config: any) => any) {\n  const plistFilename = _getNormalizedPlistFilename(plistName);\n  const configPlistName = path.join(plistPath, plistFilename);\n  const configFilename = path.join(plistPath, `${plistName}.json`);\n\n  // grab original plist as json object\n  let config;\n  if (process.platform === 'darwin') {\n    await spawnAsyncThrowError('plutil', [\n      '-convert',\n      'json',\n      configPlistName,\n      '-o',\n      configFilename,\n    ]);\n    const configContents = await fs.readFile(configFilename, 'utf8');\n\n    try {\n      config = JSON.parse(configContents);\n    } catch (e) {\n      logger.info(`Error parsing ${configFilename}`, e);\n      logger.info('The erroneous file contents was:', configContents);\n      config = {};\n    }\n  } else {\n    config = plist.parse(fs.readFileSync(configPlistName, 'utf8'));\n  }\n\n  // apply transformation\n  config = await transform(config);\n\n  // back up old plist and swap in modified one\n  fs.copyFileSync(configPlistName, `${configPlistName}.bak`);\n  await fs.writeFile(configFilename, JSON.stringify(config));\n  if (process.platform === 'darwin') {\n    await spawnAsyncThrowError('plutil', [\n      '-convert',\n      'xml1',\n      configFilename,\n      '-o',\n      configPlistName,\n    ]);\n  } else {\n    await fs.writeFile(configPlistName, plist.build(config));\n  }\n\n  return config;\n}\n\nasync function createBlankAsync(plistPath: string, plistName: string) {\n  // write empty json file\n  const emptyConfig = {};\n  const tmpConfigFile = path.join(plistPath, `${plistName}.json`);\n  await fs.writeFile(tmpConfigFile, JSON.stringify(emptyConfig));\n\n  // convert to plist\n  const plistFilename = _getNormalizedPlistFilename(plistName);\n  const configPlistName = path.join(plistPath, plistFilename);\n  if (process.platform === 'darwin') {\n    await spawnAsyncThrowError('plutil', [\n      '-convert',\n      'xml1',\n      tmpConfigFile,\n      '-o',\n      configPlistName,\n    ]);\n  } else {\n    await fs.writeFile(configPlistName, JSON.stringify(plist.build(emptyConfig)));\n  }\n\n  // remove tmp json file\n  fs.removeSync(tmpConfigFile);\n}\n\nasync function cleanBackupAsync(plistPath: string, plistName: string, restoreOriginal = true) {\n  const plistFilename = _getNormalizedPlistFilename(plistName);\n  const configPlistName = path.join(plistPath, plistFilename);\n  const configFilename = path.join(plistPath, `${plistName}.json`);\n  const backupPlistPath = `${configPlistName}.bak`;\n\n  if (restoreOriginal && (await fs.pathExists(backupPlistPath))) {\n    await fs.copy(backupPlistPath, configPlistName);\n  }\n\n  await fs.remove(backupPlistPath);\n  await fs.remove(configFilename);\n}\n\nexport { modifyAsync, cleanBackupAsync, createBlankAsync };\n"]}