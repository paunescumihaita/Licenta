{"version":3,"file":"SimControlLogs.js","sourceRoot":"","sources":["../src/SimControlLogs.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport { ChildProcessWithoutNullStreams, spawn } from 'child_process';\nimport path from 'path';\nimport wrapAnsi from 'wrap-ansi';\n\nimport { Logger, SimControl } from './internal';\n\nconst forks: Record<string, ChildProcessWithoutNullStreams> = {};\n\nexport type SimControlLog = {\n  /**\n   * 258753568922927108\n   */\n  traceID: number;\n  /**\n   *\n   * \"Connection 1: done\",\n   */\n  eventMessage: string;\n  /**\n   * \"logEvent\" | \"activityCreateEvent\",\n   */\n  eventType: 'logEvent' | 'activityCreateEvent';\n  source: null | {\n    /**\n     * 'RCTDefaultLogFunction_block_invoke' | '__TCC_CRASHING_DUE_TO_PRIVACY_VIOLATION__'\n     */\n    symbol: string;\n    line: number;\n    /**\n     * 'TCC' | 'Security' | 'CFNetwork' | 'libnetwork.dylib' | 'myapp'\n     *\n     * TCC is apple sys, it means \"Transparency, Consent, and Control\"\n     */\n    image: string;\n    /**\n     * 'RCTLog.mm' | ''\n     */\n    file: string;\n  };\n  /**\n   * \"Connection %llu: done\"\n   */\n  formatString: string;\n  /**\n   * 0\n   */\n  activityIdentifier: number;\n  subsystem:\n    | ''\n    | 'com.apple.network'\n    | 'com.facebook.react.log'\n    | 'com.apple.TCC'\n    | 'com.apple.CoreTelephony'\n    | 'com.apple.WebKit'\n    | 'com.apple.runningboard'\n    | string;\n  category: '' | 'access' | 'connection' | 'plugin';\n  /**\n   * \"2021-03-15 15:36:28.004331-0700\"\n   */\n  timestamp: string;\n  /**\n   * 706567072091713\n   */\n  machTimestamp: number;\n  /**\n   * \"Default\"\n   */\n  messageType: 'Default' | 'Error';\n  /**\n   * 15192\n   */\n  processID: number;\n};\n\nfunction parseMessageJson(data: Buffer) {\n  const stringData = data.toString();\n  try {\n    return JSON.parse(stringData) as SimControlLog;\n  } catch (e) {\n    Logger.global.debug('Failed to parse simctl JSON message:\\n' + stringData);\n  }\n  return null;\n}\n\n// There are a lot of networking logs in RN that aren't relevant to the user.\nfunction isNetworkLog(simLog: SimControlLog): boolean {\n  return (\n    simLog.subsystem === 'com.apple.network' ||\n    simLog.category === 'connection' ||\n    simLog.source?.image === 'CFNetwork'\n  );\n}\n\nfunction isReactLog(simLog: SimControlLog): boolean {\n  return simLog.subsystem === 'com.facebook.react.log' && simLog.source?.file === 'RCTLog.mm';\n}\n\n// It's not clear what these are but they aren't very useful.\n// (The connection to service on pid 0 named com.apple.commcenter.coretelephony.xpc was invalidated)\n// We can add them later if need.\nfunction isCoreTelephonyLog(simLog: SimControlLog): boolean {\n  // [CoreTelephony] Updating selectors failed with: Error Domain=NSCocoaErrorDomain Code=4099\n  // \"The connection to service on pid 0 named com.apple.commcenter.coretelephony.xpc was invalidated.\" UserInfo={NSDebugDescription=The connection to service on pid 0 named com.apple.commcenter.coretelephony.xpc was invalidated.}\n  return simLog.subsystem === 'com.apple.CoreTelephony';\n}\n\n// https://stackoverflow.com/a/65313219/4047926\nfunction isWebKitLog(simLog: SimControlLog): boolean {\n  // [WebKit] 0x1143ca500 - ProcessAssertion: Failed to acquire RBS Background assertion 'WebProcess Background Assertion' for process with PID 27084, error: Error Domain=RBSAssertionErrorDomain Code=3 \"Target is not running or required target\n  // entitlement is missing\" UserInfo={RBSAssertionAttribute=<RBSDomainAttribute| domain:\"com.apple.webkit\" name:\"Background\" sourceEnvironment:\"(null)\">, NSLocalizedFailureReason=Target is not running or required target entitlement is missing}\n  return simLog.subsystem === 'com.apple.WebKit';\n}\n\n// Similar to WebKit logs\nfunction isRunningBoardServicesLog(simLog: SimControlLog): boolean {\n  // [RunningBoardServices] Error acquiring assertion: <Error Domain=RBSAssertionErrorDomain Code=3 \"Target is not running or required target entitlement is missing\" UserInfo={RBSAssertionAttribute=<RBSDomainAttribute| domain:\"com.apple.webkit\"\n  // name:\"Background\" sourceEnvironment:\"(null)\">, NSLocalizedFailureReason=Target is not running or required target entitlement is missing}>\n  return simLog.subsystem === 'com.apple.runningboard';\n}\n\nfunction formatMessage(simLog: SimControlLog): string {\n  // TODO: Maybe change \"TCC\" to \"Consent\" or \"System\".\n  const category = chalk.gray(`[${simLog.source?.image ?? simLog.subsystem}]`);\n  const message = simLog.eventMessage;\n  return wrapAnsi(category + ' ' + message, process.stdout.columns || 80);\n}\n\nexport function onMessage(simLog: SimControlLog) {\n  let hasLogged = false;\n\n  if (simLog.messageType === 'Error') {\n    if (\n      // Hide all networking errors which are mostly useless.\n      !isNetworkLog(simLog) &&\n      // Showing React errors will result in duplicate messages.\n      !isReactLog(simLog) &&\n      !isCoreTelephonyLog(simLog) &&\n      !isWebKitLog(simLog) &&\n      !isRunningBoardServicesLog(simLog)\n    ) {\n      hasLogged = true;\n      // Sim: This app has crashed because it attempted to access privacy-sensitive data without a usage description.  The app's Info.plist must contain an NSCameraUsageDescription key with a string value explaining to the user how the app uses this data.\n      Logger.global.error(formatMessage(simLog));\n    }\n  } else if (simLog.eventMessage) {\n    // If the source has a file (i.e. not a system log).\n    if (\n      simLog.source?.file ||\n      simLog.eventMessage.includes('Terminating app due to uncaught exception')\n    ) {\n      hasLogged = true;\n      Logger.global.info(formatMessage(simLog));\n    }\n  }\n\n  if (!hasLogged) {\n    Logger.global.debug(formatMessage(simLog));\n  } else {\n    // console.log('DATA:', JSON.stringify(simLog));\n  }\n}\n\n// The primary purpose of this module is to surface logs related to fatal app crashes.\n// Everything else should come through the native React logger.\nexport function streamLogs({ pid, udid }: { pid: string; udid: string }): void {\n  // Prevent adding a duplicate listener.\n  // This only works because our current usage of SimControlLogs only allows for one possible `pid` to be used.\n  // If in the future, you can attach logs to two different apps from the same process, then this will need to be changed.\n  if (forks[udid]) {\n    return;\n  }\n\n  // xcrun simctl spawn booted log stream --process --style json\n  const childProcess = spawn('xcrun', [\n    'simctl',\n    'spawn',\n    udid,\n    'log',\n    'stream',\n    '--process',\n    pid,\n    // ndjson provides a better format than json.\n    '--style',\n    'ndjson',\n    // Provide the source so we can filter logs better\n    '--source',\n    // log, activity, trace -- activity was related to layouts, trace didn't work, so that leaves log.\n    // Passing nothing combines all three, but we don't use activity.\n    '--type',\n    'log',\n    // backtrace doesn't seem very useful in basic cases.\n    // TODO: Maybe we can format as a stack trace for native errors.\n    '--no-backtrace',\n  ]);\n\n  childProcess.stdout.on('data', (data: Buffer) => {\n    const simLog = parseMessageJson(data);\n    if (!simLog) {\n      return;\n    }\n\n    onMessage(simLog);\n  });\n\n  childProcess.on('error', ({ message }) => {\n    Logger.global.debug('[simctl error]:', message);\n  });\n\n  forks[udid] = childProcess;\n  // Ensure the process is removed.\n  ensureExitHooksInstalled();\n}\n\nexport async function detachStream(udid: string) {\n  if (forks[udid]) {\n    await killProcess(forks[udid]);\n    delete forks[udid];\n  }\n}\n\nlet hasInstalledExitHooks = false;\n\nfunction ensureExitHooksInstalled(): void {\n  if (hasInstalledExitHooks) return;\n  hasInstalledExitHooks = true;\n\n  const killSignals: ['SIGINT', 'SIGTERM'] = ['SIGINT', 'SIGTERM'];\n  for (const signal of killSignals) {\n    process.on(signal, async () => {\n      await Promise.all(Object.keys(forks).map(udid => detachStream(udid)));\n    });\n  }\n}\n\nasync function killProcess(childProcess: ChildProcessWithoutNullStreams): Promise<void> {\n  if (childProcess) {\n    return new Promise<void>(resolve => {\n      childProcess.on('close', resolve);\n      childProcess.kill();\n    });\n  }\n}\n\n/**\n *\n * @param udid\n * @param bundleIdentifier\n * @returns Image name like `Exponent` and `null` when the app is not installed on the provided simulator.\n */\nexport async function getImageNameFromBundleIdentifierAsync(\n  udid: string,\n  bundleIdentifier: string\n): Promise<string | null> {\n  const containerPath = await SimControl.getContainerPathAsync(udid, bundleIdentifier);\n\n  if (containerPath) {\n    return getImageNameFromContainerPath(containerPath);\n  }\n  return null;\n}\n\nexport function getImageNameFromContainerPath(binaryPath: string): string {\n  return path.basename(binaryPath).split('.')[0];\n}\n"]}