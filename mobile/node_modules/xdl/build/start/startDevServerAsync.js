"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dev_server_1 = require("@expo/dev-server");
const internal_1 = require("../internal");
async function startDevServerAsync(projectRoot, startOptions) {
    internal_1.assertValidProjectRoot(projectRoot);
    const port = startOptions.devClient
        ? Number(process.env.RCT_METRO_PORT) || 8081
        : await internal_1.getFreePortAsync(19000);
    await internal_1.ProjectSettings.setPackagerInfoAsync(projectRoot, {
        expoServerPort: port,
        packagerPort: port,
    });
    const options = {
        port,
        logger: internal_1.ProjectUtils.getLogger(projectRoot),
        // @deprecated
        target: startOptions.target,
    };
    if (startOptions.reset) {
        options.resetCache = true;
    }
    if (startOptions.maxWorkers != null) {
        options.maxWorkers = startOptions.maxWorkers;
    }
    const { server, middleware, messageSocket } = await dev_server_1.runMetroDevServerAsync(projectRoot, options);
    middleware.use(internal_1.ManifestHandler.getManifestHandler(projectRoot));
    return [server, middleware, messageSocket];
}
exports.startDevServerAsync = startDevServerAsync;
//# sourceMappingURL=startDevServerAsync.js.map