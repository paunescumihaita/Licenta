{"version":3,"file":"startLegacyExpoServerAsync.js","sourceRoot":"","sources":["../../src/start/startLegacyExpoServerAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import { readExpRcAsync } from '@expo/config';\nimport axios from 'axios';\nimport express from 'express';\nimport { AddressInfo } from 'net';\n\nimport {\n  assertValidProjectRoot,\n  ConnectionStatus,\n  Doctor,\n  getFreePortAsync,\n  ManifestHandler,\n  ProjectSettings,\n  ProjectUtils,\n} from '../internal';\n\ntype ConsoleLogLevel = 'info' | 'warn' | 'error' | 'debug';\n\nfunction _isIgnorableBugReportingExtraData(body: any[]) {\n  return body.length === 2 && body[0] === 'BugReporting extraData:';\n}\n\nfunction _isAppRegistryStartupMessage(body: any[]) {\n  return (\n    body.length === 1 &&\n    (/^Running application \"main\" with appParams:/.test(body[0]) ||\n      /^Running \"main\" with \\{/.test(body[0]))\n  );\n}\n\nfunction _handleDeviceLogs(projectRoot: string, deviceId: string, deviceName: string, logs: any) {\n  for (let i = 0; i < logs.length; i++) {\n    const log = logs[i];\n    let body = typeof log.body === 'string' ? [log.body] : log.body;\n    let { level } = log;\n\n    if (_isIgnorableBugReportingExtraData(body)) {\n      level = 'debug';\n    }\n    if (_isAppRegistryStartupMessage(body)) {\n      body = [`Running application on ${deviceName}.`];\n    }\n\n    const args = body.map((obj: any) => {\n      if (typeof obj === 'undefined') {\n        return 'undefined';\n      }\n      if (obj === 'null') {\n        return 'null';\n      }\n      if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n        return obj;\n      }\n      try {\n        return JSON.stringify(obj);\n      } catch (e) {\n        return obj.toString();\n      }\n    });\n    const logLevel =\n      level === 'info' || level === 'warn' || level === 'error' || level === 'debug'\n        ? (level as ConsoleLogLevel)\n        : 'info';\n    ProjectUtils.getLogger(projectRoot)[logLevel](\n      {\n        tag: 'device',\n        deviceId,\n        deviceName,\n        groupDepth: log.groupDepth,\n        shouldHide: log.shouldHide,\n        includesStack: log.includesStack,\n      },\n      ...args\n    );\n  }\n}\n\nexport async function startExpoServerAsync(projectRoot: string): Promise<void> {\n  assertValidProjectRoot(projectRoot);\n  await stopExpoServerAsync(projectRoot);\n  const app = express();\n  app.use(\n    express.json({\n      limit: '10mb',\n    })\n  );\n  app.use(\n    express.urlencoded({\n      limit: '10mb',\n      extended: true,\n    })\n  );\n  if (\n    (ConnectionStatus.isOffline()\n      ? await Doctor.validateWithoutNetworkAsync(projectRoot)\n      : await Doctor.validateWithNetworkAsync(projectRoot)) === Doctor.FATAL\n  ) {\n    throw new Error(`Couldn't start project. Please fix the errors and restart the project.`);\n  }\n  // Serve the manifest.\n  const manifestHandler = ManifestHandler.getManifestHandler(projectRoot);\n  app.get('/', manifestHandler);\n  app.get('/manifest', manifestHandler);\n  app.get('/index.exp', manifestHandler);\n  app.post('/logs', async (req, res) => {\n    try {\n      const deviceId = req.get('Device-Id');\n      const deviceName = req.get('Device-Name');\n      if (deviceId && deviceName && req.body) {\n        _handleDeviceLogs(projectRoot, deviceId, deviceName, req.body);\n      }\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', `Error getting device logs: ${e} ${e.stack}`);\n    }\n    res.send('Success');\n  });\n  app.post('/shutdown', async (req, res) => {\n    server.close();\n    res.send('Success');\n  });\n  const expRc = await readExpRcAsync(projectRoot);\n  const expoServerPort = expRc.manifestPort ? expRc.manifestPort : await getFreePortAsync(19000);\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort,\n  });\n  let server = app.listen(expoServerPort, () => {\n    const info = server.address() as AddressInfo;\n    const host = info.address;\n    const port = info.port;\n    ProjectUtils.logDebug(projectRoot, 'expo', `Local server listening at http://${host}:${port}`);\n  });\n}\n\nexport async function stopExpoServerAsync(projectRoot: string): Promise<void> {\n  assertValidProjectRoot(projectRoot);\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (packagerInfo && packagerInfo.expoServerPort) {\n    try {\n      await axios.request({\n        method: 'post',\n        url: `http://127.0.0.1:${packagerInfo.expoServerPort}/shutdown`,\n      });\n    } catch (e) {}\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: null,\n  });\n}\n"]}