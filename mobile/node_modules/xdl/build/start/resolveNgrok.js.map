{"version":3,"file":"resolveNgrok.js","sourceRoot":"","sources":["../../src/start/resolveNgrok.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,sEAAwD;AACxD,kDAA0B;AAC1B,oDAA4B;AAC5B,aAAa;AACb,wDAAgC;AAChC,gEAAuC;AACvC,oDAA4B;AAE5B,0CAA0D;AAE1D,MAAM,sBAAsB,GAAG,QAAQ,CAAC;AACxC,MAAM,UAAU,GAAG,gBAAM,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;AACvD,IAAI,cAAc,GAAe,IAAI,CAAC;AAwB/B,KAAK,UAAU,iBAAiB,CACrC,WAAmB,EACnB,EACE,YAAY,GAAG,IAAI,EACnB,WAAW,GAAG,KAAK,MACkC,EAAE;IAEzD,MAAM,KAAK,GAAG,MAAM,iBAAiB,CAAC,WAAW,CAAC,CAAC;IAEnD,IAAI,CAAC,KAAK,EAAE;QACV,MAAM,WAAW,GAAG,eAAe,sBAAsB,EAAE,CAAC;QAC5D,IAAI,YAAY,EAAE;YAChB,IAAI,CAAC,WAAW,EAAE;gBAChB,mEAAmE;gBACnE,MAAM,qBAAU,CAAC,GAAG,CAAC,CAAC;aACvB;YACD,MAAM,MAAM,GACV,WAAW;gBACX,CAAC,MAAM,kBAAO,CAAC,YAAY,CAAC;oBAC1B,OAAO,EAAE,eAAe,WAAW,qEAAqE;oBACxG,OAAO,EAAE,IAAI;iBACd,CAAC,CAAC,CAAC;YACN,IAAI,MAAM,EAAE;gBACV,iBAAM,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,WAAW,QAAQ,eAAK,CAAC,IAAI,CAAA,QAAQ,aAAa,CAAC,CAAC;gBAErF,MAAM,cAAc,GAAG,cAAc,CAAC,gBAAgB,CAAC,WAAW,EAAE;oBAClE,MAAM,EAAE,CAAC,UAAU;iBACpB,CAAC,CAAC;gBAEH,IAAI;oBACF,MAAM,cAAc,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;oBACjD,iBAAM,CAAC,MAAM,CAAC,IAAI,CAAC,0BAA0B,WAAW,EAAE,CAAC,CAAC;iBAC7D;gBAAC,OAAO,CAAC,EAAE;oBACV,CAAC,CAAC,OAAO,GAAG,qBAAqB,WAAW,cAAc,CAAC,CAAC,OAAO,EAAE,CAAC;oBACtE,MAAM,CAAC,CAAC;iBACT;gBACD,OAAO,MAAM,iBAAiB,CAAC,WAAW,EAAE,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC,CAAC;aACtE;SACF;QACD,MAAM,IAAI,KAAK,CACb,kBAAkB,WAAW,2EAA2E,CACzG,CAAC;KACH;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AA5CD,8CA4CC;AAED,kDAAkD;AAClD,KAAK,UAAU,8BAA8B,CAAC,WAAmB;IAC/D,IAAI;QACF,MAAM,gBAAgB,GAAG,sBAAW,CAAC,WAAW,EAAE,0BAA0B,CAAC,CAAC;QAC9E,MAAM,GAAG,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;QACtC,IAAI,GAAG,IAAI,gBAAM,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,sBAAsB,CAAC,EAAE;YAChE,MAAM,SAAS,GAAG,sBAAW,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;YAC1D,IAAI,UAAU,EAAE;gBACd,iBAAM,CAAC,MAAM,CAAC,IAAI,CAAC,wCAAwC,SAAS,GAAG,CAAC,CAAC;aAC1E;YACD,OAAO,OAAO,CAAC,SAAS,CAAC,CAAC;SAC3B;KACF;IAAC,WAAM,GAAE;IACV,OAAO,IAAI,CAAC;AACd,CAAC;AAED,4CAA4C;AAC5C,KAAK,UAAU,yBAAyB;IACtC,IAAI;QACF,iDAAiD;QACjD,MAAM,GAAG,GAAG,kBAAQ,CAAC,0BAA0B,EAAE,IAAI,CAAC,CAAC;QACvD,IAAI,gBAAM,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,sBAAsB,CAAC,EAAE;YACzD,IAAI,UAAU,EAAE;gBACd,iBAAM,CAAC,MAAM,CAAC,IAAI,CAChB,uCAAuC,kBAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAC1E,CAAC;aACH;YACD,OAAO,kBAAQ,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;SACtC;KACF;IAAC,WAAM,GAAE;IAEV,OAAO,IAAI,CAAC;AACd,CAAC;AAED,KAAK,UAAU,iBAAiB,CAAC,WAAmB;IAClD,IAAI,cAAc,EAAE;QAClB,OAAO,cAAc,CAAC;KACvB;IAED,MAAM,aAAa,GAAG,MAAM,8BAA8B,CAAC,WAAW,CAAC,CAAC;IACxE,IAAI,aAAa,EAAE;QACjB,cAAc,GAAG,aAAa,CAAC;QAC/B,OAAO,cAAc,CAAC;KACvB;IAED,MAAM,cAAc,GAAG,MAAM,yBAAyB,EAAE,CAAC;IACzD,IAAI,cAAc,EAAE;QAClB,cAAc,GAAG,cAAc,CAAC;QAChC,OAAO,cAAc,CAAC;KACvB;IAED,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import * as PackageManager from '@expo/package-manager';\nimport chalk from 'chalk';\nimport getenv from 'getenv';\n// @ts-ignore\nimport requireg from 'requireg';\nimport resolveFrom from 'resolve-from';\nimport semver from 'semver';\n\nimport { delayAsync, Logger, Prompts } from '../internal';\n\nconst NGROK_REQUIRED_VERSION = '^2.4.3';\nconst EXPO_DEBUG = getenv.boolish('EXPO_DEBUG', false);\nlet _ngrokInstance: any | null = null;\n\nexport interface NgrokOptions {\n  authtoken?: string;\n  port?: string | number | null;\n  host?: string;\n  httpauth?: string;\n  region?: string;\n  configPath?: string;\n\n  proto?: 'http' | 'tcp' | 'tls';\n  addr?: string;\n  inspect?: boolean;\n  auth?: string;\n  host_header?: string;\n  bind_tls?: true | false | 'both';\n  subdomain?: string;\n  hostname?: string;\n  crt?: string;\n  key?: string;\n  client_cas?: string;\n  remote_addr?: string;\n}\n\nexport async function resolveNgrokAsync(\n  projectRoot: string,\n  {\n    shouldPrompt = true,\n    autoInstall = false,\n  }: { shouldPrompt?: boolean; autoInstall?: boolean } = {}\n): Promise<any> {\n  const ngrok = await findNgrokBinAsync(projectRoot);\n\n  if (!ngrok) {\n    const packageName = `@expo/ngrok@${NGROK_REQUIRED_VERSION}`;\n    if (shouldPrompt) {\n      if (!autoInstall) {\n        // Delay the prompt so it doesn't conflict with other dev tool logs\n        await delayAsync(100);\n      }\n      const answer =\n        autoInstall ||\n        (await Prompts.confirmAsync({\n          message: `The package ${packageName} is required to use tunnels, would you like to install it globally?`,\n          initial: true,\n        }));\n      if (answer) {\n        Logger.global.info(`Installing ${packageName} for ${chalk.bold`tunnel`} support...`);\n\n        const packageManager = PackageManager.createForProject(projectRoot, {\n          silent: !EXPO_DEBUG,\n        });\n\n        try {\n          await packageManager.addGlobalAsync(packageName);\n          Logger.global.info(`Successfully installed ${packageName}`);\n        } catch (e) {\n          e.message = `Failed to install ${packageName} globally: ${e.message}`;\n          throw e;\n        }\n        return await resolveNgrokAsync(projectRoot, { shouldPrompt: false });\n      }\n    }\n    throw new Error(\n      `Please install ${packageName} and try again, or try using another hosting method like lan or localhost`\n    );\n  }\n  return ngrok;\n}\n\n// Resolve a copy that's installed in the project.\nasync function resolvePackageFromProjectAsync(projectRoot: string) {\n  try {\n    const ngrokPackagePath = resolveFrom(projectRoot, '@expo/ngrok/package.json');\n    const pkg = require(ngrokPackagePath);\n    if (pkg && semver.satisfies(pkg.version, NGROK_REQUIRED_VERSION)) {\n      const ngrokPath = resolveFrom(projectRoot, '@expo/ngrok');\n      if (EXPO_DEBUG) {\n        Logger.global.info(`Resolving @expo/ngrok from project: \"${ngrokPath}\"`);\n      }\n      return require(ngrokPath);\n    }\n  } catch {}\n  return null;\n}\n\n// Resolve a copy that's installed globally.\nasync function resolveGlobalPackageAsync() {\n  try {\n    // use true to disable the use of local packages.\n    const pkg = requireg('@expo/ngrok/package.json', true);\n    if (semver.satisfies(pkg.version, NGROK_REQUIRED_VERSION)) {\n      if (EXPO_DEBUG) {\n        Logger.global.info(\n          `Resolving global @expo/ngrok from: \"${requireg.resolve('@expo/ngrok')}\"`\n        );\n      }\n      return requireg('@expo/ngrok', true);\n    }\n  } catch {}\n\n  return null;\n}\n\nasync function findNgrokBinAsync(projectRoot: string): Promise<any> {\n  if (_ngrokInstance) {\n    return _ngrokInstance;\n  }\n\n  const localInstance = await resolvePackageFromProjectAsync(projectRoot);\n  if (localInstance) {\n    _ngrokInstance = localInstance;\n    return _ngrokInstance;\n  }\n\n  const globalInstance = await resolveGlobalPackageAsync();\n  if (globalInstance) {\n    _ngrokInstance = globalInstance;\n    return _ngrokInstance;\n  }\n\n  return null;\n}\n"]}