{"version":3,"file":"ngrok.js","sourceRoot":"","sources":["../../src/start/ngrok.ts"],"names":[],"mappings":"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","sourcesContent":["import { readExpRcAsync } from '@expo/config';\nimport * as path from 'path';\nimport { promisify } from 'util';\n\nimport {\n  Android,\n  ANONYMOUS_USERNAME,\n  assertValidProjectRoot,\n  Config,\n  delayAsync,\n  NgrokOptions,\n  ProjectSettings,\n  ProjectUtils,\n  resolveNgrokAsync,\n  UrlUtils,\n  UserManager,\n  UserSettings,\n  XDLError,\n} from '../internal';\n\nfunction getNgrokConfigPath() {\n  return path.join(UserSettings.dotExpoHomeDirectory(), 'ngrok.yml');\n}\n\nasync function getProjectRandomnessAsync(projectRoot: string) {\n  const ps = await ProjectSettings.readAsync(projectRoot);\n  const randomness = ps.urlRandomness;\n  if (randomness) {\n    return randomness;\n  } else {\n    return resetProjectRandomnessAsync(projectRoot);\n  }\n}\n\nasync function resetProjectRandomnessAsync(projectRoot: string) {\n  const randomness = UrlUtils.someRandomness();\n  ProjectSettings.setAsync(projectRoot, { urlRandomness: randomness });\n  return randomness;\n}\n\nasync function connectToNgrokAsync(\n  projectRoot: string,\n  ngrok: any,\n  args: NgrokOptions,\n  hostnameAsync: () => Promise<string>,\n  ngrokPid: number | null | undefined,\n  attempts: number = 0\n): Promise<string> {\n  const ngrokConnectAsync = promisify(ngrok.connect);\n  const ngrokKillAsync = promisify(ngrok.kill);\n\n  try {\n    const configPath = getNgrokConfigPath();\n    const hostname = await hostnameAsync();\n    const url = await ngrokConnectAsync({\n      hostname,\n      configPath,\n      ...args,\n    });\n    return url;\n  } catch (e) {\n    // Attempt to connect 3 times\n    if (attempts >= 2) {\n      if (e.message) {\n        throw new XDLError('NGROK_ERROR', e.toString());\n      } else {\n        throw new XDLError('NGROK_ERROR', JSON.stringify(e));\n      }\n    }\n    if (!attempts) {\n      attempts = 0;\n    } // Attempt to fix the issue\n    if (e.error_code && e.error_code === 103) {\n      if (attempts === 0) {\n        // Failed to start tunnel. Might be because url already bound to another session.\n        if (ngrokPid) {\n          try {\n            process.kill(ngrokPid, 'SIGKILL');\n          } catch (e) {\n            ProjectUtils.logDebug(projectRoot, 'expo', `Couldn't kill ngrok with PID ${ngrokPid}`);\n          }\n        } else {\n          await ngrokKillAsync();\n        }\n      } else {\n        // Change randomness to avoid conflict if killing ngrok didn't help\n        await resetProjectRandomnessAsync(projectRoot);\n      }\n    } // Wait 100ms and then try again\n    await delayAsync(100);\n    return connectToNgrokAsync(projectRoot, ngrok, args, hostnameAsync, null, attempts + 1);\n  }\n}\n\nconst TUNNEL_TIMEOUT = 10 * 1000;\n\nexport async function startTunnelsAsync(\n  projectRoot: string,\n  options: { autoInstall?: boolean } = {}\n): Promise<void> {\n  const ngrok = await resolveNgrokAsync(projectRoot, options);\n\n  const username = (await UserManager.getCurrentUsernameAsync()) || ANONYMOUS_USERNAME;\n  assertValidProjectRoot(projectRoot);\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    throw new XDLError('NO_PACKAGER_PORT', `No packager found for project at ${projectRoot}.`);\n  }\n  if (!packagerInfo.expoServerPort) {\n    throw new XDLError(\n      'NO_EXPO_SERVER_PORT',\n      `No Expo server found for project at ${projectRoot}.`\n    );\n  }\n  const expoServerPort = packagerInfo.expoServerPort;\n  await stopTunnelsAsync(projectRoot);\n  if (await Android.startAdbReverseAsync(projectRoot)) {\n    ProjectUtils.logInfo(\n      projectRoot,\n      'expo',\n      'Successfully ran `adb reverse`. Localhost URLs should work on the connected Android device.'\n    );\n  }\n  const packageShortName = path.parse(projectRoot).base;\n  const expRc = await readExpRcAsync(projectRoot);\n\n  let startedTunnelsSuccessfully = false;\n\n  // Some issues with ngrok cause it to hang indefinitely. After\n  // TUNNEL_TIMEOUTms we just throw an error.\n  await Promise.race([\n    (async () => {\n      await delayAsync(TUNNEL_TIMEOUT);\n      if (!startedTunnelsSuccessfully) {\n        throw new Error('Starting tunnels timed out');\n      }\n    })(),\n    (async () => {\n      const expoServerNgrokUrl = await connectToNgrokAsync(\n        projectRoot,\n        ngrok,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: expoServerPort,\n          proto: 'http',\n        },\n        async () => {\n          const randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await getProjectRandomnessAsync(projectRoot);\n          return [\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      const packagerNgrokUrl = await connectToNgrokAsync(\n        projectRoot,\n        ngrok,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: packagerInfo.packagerPort,\n          proto: 'http',\n        },\n        async () => {\n          const randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await getProjectRandomnessAsync(projectRoot);\n          return [\n            'packager',\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n        expoServerNgrokUrl,\n        packagerNgrokUrl,\n        ngrokPid: ngrok.process().pid,\n      });\n\n      startedTunnelsSuccessfully = true;\n\n      ProjectUtils.logWithLevel(\n        projectRoot,\n        'info',\n        {\n          tag: 'expo',\n          _expoEventType: 'TUNNEL_READY',\n        },\n        'Tunnel ready.'\n      );\n\n      ngrok.addListener('statuschange', (status: string) => {\n        if (status === 'reconnecting') {\n          ProjectUtils.logError(\n            projectRoot,\n            'expo',\n            'We noticed your tunnel is having issues. ' +\n              'This may be due to intermittent problems with our tunnel provider. ' +\n              'If you have trouble connecting to your app, try to Restart the project, ' +\n              'or switch Host to LAN.'\n          );\n        } else if (status === 'online') {\n          ProjectUtils.logInfo(projectRoot, 'expo', 'Tunnel connected.');\n        }\n      });\n    })(),\n  ]);\n}\n\nexport async function stopTunnelsAsync(projectRoot: string): Promise<void> {\n  assertValidProjectRoot(projectRoot);\n  const ngrok = await resolveNgrokAsync(projectRoot, { shouldPrompt: false }).catch(() => null);\n  if (!ngrok) {\n    return;\n  }\n  const ngrokKillAsync = promisify(ngrok.kill);\n\n  // This will kill all ngrok tunnels in the process.\n  // We'll need to change this if we ever support more than one project\n  // open at a time in XDE.\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  const ngrokProcess = ngrok.process();\n  const ngrokProcessPid = ngrokProcess ? ngrokProcess.pid : null;\n  ngrok.removeAllListeners('statuschange');\n  if (packagerInfo.ngrokPid && packagerInfo.ngrokPid !== ngrokProcessPid) {\n    // Ngrok is running in some other process. Kill at the os level.\n    try {\n      process.kill(packagerInfo.ngrokPid);\n    } catch (e) {\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `Couldn't kill ngrok with PID ${packagerInfo.ngrokPid}`\n      );\n    }\n  } else {\n    // Ngrok is running from the current process. Kill using ngrok api.\n    await ngrokKillAsync();\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerNgrokUrl: null,\n    packagerNgrokUrl: null,\n    ngrokPid: null,\n  });\n  await Android.stopAdbReverseAsync(projectRoot);\n}\n"]}