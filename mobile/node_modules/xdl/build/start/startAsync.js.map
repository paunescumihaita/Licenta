{"version":3,"file":"startAsync.js","sourceRoot":"","sources":["../../src/start/startAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport { Server } from 'http';\n\nimport {\n  Analytics,\n  Android,\n  assertValidProjectRoot,\n  Config,\n  DevSession,\n  Env,\n  ProjectSettings,\n  ProjectUtils,\n  startDevServerAsync,\n  StartDevServerOptions,\n  startExpoServerAsync,\n  startReactNativeServerAsync,\n  startTunnelsAsync,\n  stopExpoServerAsync,\n  stopReactNativeServerAsync,\n  stopTunnelsAsync,\n  Webpack,\n} from '../internal';\n\nlet serverInstance: Server | null = null;\nlet messageSocket: any | null = null;\n\n/**\n * Sends a message over web sockets to any connected device,\n * does nothing when the dev server is not running.\n *\n * @param method name of the command. In RN projects `reload`, and `devMenu` are available. In Expo Go, `sendDevCommand` is available.\n * @param params\n */\nexport function broadcastMessage(\n  method: 'reload' | 'devMenu' | 'sendDevCommand',\n  params?: Record<string, any> | undefined\n) {\n  if (messageSocket) {\n    messageSocket.broadcast(method, params);\n  }\n}\n\nexport async function startAsync(\n  projectRoot: string,\n  {\n    exp = getConfig(projectRoot).exp,\n    ...options\n  }: StartDevServerOptions & { exp?: ExpoConfig } = {},\n  verbose: boolean = true\n): Promise<ExpoConfig> {\n  assertValidProjectRoot(projectRoot);\n  Analytics.logEvent('Start Project', {\n    projectRoot,\n    developerTool: Config.developerTool,\n    sdkVersion: exp.sdkVersion ?? null,\n  });\n\n  if (options.webOnly) {\n    await Webpack.restartAsync(projectRoot, options);\n    DevSession.startSession(projectRoot, exp, 'web');\n    return exp;\n  } else if (Env.shouldUseDevServer(exp) || options.devClient) {\n    [serverInstance, , messageSocket] = await startDevServerAsync(projectRoot, options);\n    DevSession.startSession(projectRoot, exp, 'native');\n  } else {\n    await startExpoServerAsync(projectRoot);\n    await startReactNativeServerAsync({ projectRoot, exp, options, verbose });\n    DevSession.startSession(projectRoot, exp, 'native');\n  }\n\n  const { hostType } = await ProjectSettings.readAsync(projectRoot);\n\n  if (!Config.offline && hostType === 'tunnel') {\n    try {\n      await startTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error starting tunnel ${e.message}`);\n    }\n  }\n  return exp;\n}\n\nasync function stopInternalAsync(projectRoot: string): Promise<void> {\n  DevSession.stopSession();\n\n  await Promise.all([\n    Webpack.stopAsync(projectRoot),\n    new Promise<void>((resolve, reject) => {\n      if (serverInstance) {\n        serverInstance.close(error => {\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      }\n    }),\n    stopExpoServerAsync(projectRoot),\n    stopReactNativeServerAsync(projectRoot),\n    async () => {\n      if (!Config.offline) {\n        try {\n          await stopTunnelsAsync(projectRoot);\n        } catch (e) {\n          ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping ngrok ${e.message}`);\n        }\n      }\n    },\n    await Android.maybeStopAdbDaemonAsync(),\n  ]);\n}\n\nasync function forceQuitAsync(projectRoot: string) {\n  // find RN packager and ngrok pids, attempt to kill them manually\n  const { packagerPid, ngrokPid } = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (packagerPid) {\n    try {\n      process.kill(packagerPid);\n    } catch (e) {}\n  }\n  if (ngrokPid) {\n    try {\n      process.kill(ngrokPid);\n    } catch (e) {}\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: null,\n    packagerPort: null,\n    packagerPid: null,\n    expoServerNgrokUrl: null,\n    packagerNgrokUrl: null,\n    ngrokPid: null,\n    webpackServerPort: null,\n  });\n}\n\nexport async function stopAsync(projectRoot: string): Promise<void> {\n  try {\n    const result = await Promise.race([\n      stopInternalAsync(projectRoot),\n      new Promise(resolve => setTimeout(resolve, 2000, 'stopFailed')),\n    ]);\n    if (result === 'stopFailed') {\n      await forceQuitAsync(projectRoot);\n    }\n  } catch (error) {\n    await forceQuitAsync(projectRoot);\n    throw error;\n  }\n}\n"]}