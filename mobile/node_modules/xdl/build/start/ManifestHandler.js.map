{"version":3,"file":"ManifestHandler.js","sourceRoot":"","sources":["../../src/start/ManifestHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoAppManifest, ExpoConfig, getConfig } from '@expo/config';\nimport { JSONObject } from '@expo/json-file';\nimport chalk from 'chalk';\nimport express from 'express';\nimport http from 'http';\nimport os from 'os';\nimport { URL } from 'url';\n\nimport {\n  Analytics,\n  ANONYMOUS_USERNAME,\n  ApiV2,\n  Config,\n  Doctor,\n  learnMore,\n  ProjectAssets,\n  ProjectSettings,\n  ProjectUtils,\n  resolveEntryPoint,\n  UrlUtils,\n  UserManager,\n  UserSettings,\n  Versions,\n} from '../internal';\n\ninterface HostInfo {\n  host: string;\n  server: 'xdl';\n  serverVersion: string;\n  serverDriver: string | null;\n  serverOS: NodeJS.Platform;\n  serverOSVersion: string;\n}\n\ntype PackagerOptions = ProjectSettings.ProjectSettings;\n\ntype CachedSignedManifest =\n  | {\n      manifestString: null;\n      signedManifest: null;\n    }\n  | {\n      manifestString: string;\n      signedManifest: string;\n    };\n\nconst _cachedSignedManifest: CachedSignedManifest = {\n  manifestString: null,\n  signedManifest: null,\n};\n\nconst blacklistedEnvironmentVariables = new Set([\n  'EXPO_APPLE_PASSWORD',\n  'EXPO_ANDROID_KEY_PASSWORD',\n  'EXPO_ANDROID_KEYSTORE_PASSWORD',\n  'EXPO_IOS_DIST_P12_PASSWORD',\n  'EXPO_IOS_PUSH_P12_PASSWORD',\n  'EXPO_CLI_PASSWORD',\n]);\n\nfunction shouldExposeEnvironmentVariableInManifest(key: string) {\n  if (blacklistedEnvironmentVariables.has(key.toUpperCase())) {\n    return false;\n  }\n  return key.startsWith('REACT_NATIVE_') || key.startsWith('EXPO_');\n}\n\nfunction stripPort(host: string | undefined): string | undefined {\n  if (!host) {\n    return host;\n  }\n  return new URL('/', `http://${host}`).hostname;\n}\n\nasync function getPackagerOptionsAsync(\n  projectRoot: string\n): Promise<[PackagerOptions, PackagerOptions]> {\n  // Get packager opts and then copy into bundleUrlPackagerOpts\n  const projectSettings = await ProjectSettings.readAsync(projectRoot);\n  const bundleUrlPackagerOpts = JSON.parse(JSON.stringify(projectSettings));\n  bundleUrlPackagerOpts.urlType = 'http';\n  if (bundleUrlPackagerOpts.hostType === 'redirect') {\n    bundleUrlPackagerOpts.hostType = 'tunnel';\n  }\n  return [projectSettings, bundleUrlPackagerOpts];\n}\n\nasync function getBundleUrlAsync({\n  projectRoot,\n  platform,\n  projectSettings,\n  bundleUrlPackagerOpts,\n  mainModuleName,\n  hostname,\n}: {\n  platform: string;\n  hostname?: string;\n  mainModuleName: string;\n  projectRoot: string;\n  projectSettings: PackagerOptions;\n  bundleUrlPackagerOpts: PackagerOptions;\n}): Promise<string> {\n  const queryParams = UrlUtils.constructBundleQueryParams(projectRoot, projectSettings);\n\n  const path = `/${encodeURI(mainModuleName)}.bundle?platform=${encodeURIComponent(\n    platform\n  )}&${queryParams}`;\n\n  return (\n    (await UrlUtils.constructBundleUrlAsync(projectRoot, bundleUrlPackagerOpts, hostname)) + path\n  );\n}\n\nfunction getPlatformFromRequest(headers: http.IncomingHttpHeaders): string {\n  return (headers['exponent-platform'] || 'ios').toString();\n}\n\nexport function getManifestHandler(projectRoot: string) {\n  return async (\n    req: express.Request | http.IncomingMessage,\n    res: express.Response | http.ServerResponse\n  ) => {\n    try {\n      // We intentionally don't `await`. We want to continue trying even\n      // if there is a potential error in the package.json and don't want to slow\n      // down the request\n      Doctor.validateWithNetworkAsync(projectRoot).catch(error => {\n        ProjectUtils.logError(\n          projectRoot,\n          'expo',\n          `Error: could not load config json at ${projectRoot}: ${error.toString()}`,\n          'doctor-config-json-not-read'\n        );\n      });\n\n      const { manifestString, exp, hostInfo } = await getManifestResponseFromHeadersAsync({\n        projectRoot,\n        headers: req.headers,\n      });\n      const sdkVersion = exp.sdkVersion ?? null;\n\n      // Send the response\n      res.setHeader('Exponent-Server', JSON.stringify(hostInfo));\n      // End the request\n      res.end(manifestString);\n\n      // Log analytics\n      Analytics.logEvent('Serve Manifest', {\n        projectRoot,\n        developerTool: Config.developerTool,\n        sdkVersion,\n      });\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', e.stack);\n      // 5xx = Server Error HTTP code\n      res.statusCode = 520;\n      res.end(\n        JSON.stringify({\n          error: e.toString(),\n        })\n      );\n    }\n  };\n}\n\nasync function getManifestResponseFromHeadersAsync({\n  projectRoot,\n  headers,\n}: {\n  projectRoot: string;\n  headers: http.IncomingHttpHeaders;\n}): Promise<{ exp: ExpoConfig; manifestString: string; hostInfo: HostInfo }> {\n  // Read from headers\n  const platform = getPlatformFromRequest(headers);\n  const acceptSignature = headers['exponent-accept-signature'];\n  return getManifestResponseAsync({ projectRoot, host: headers.host, platform, acceptSignature });\n}\n\nexport async function getManifestResponseAsync({\n  projectRoot,\n  host,\n  platform,\n  acceptSignature,\n}: {\n  projectRoot: string;\n  platform: string;\n  host?: string;\n  acceptSignature?: string | string[];\n}): Promise<{ exp: ExpoConfig; manifestString: string; hostInfo: HostInfo }> {\n  // Read the config\n  const projectConfig = getConfig(projectRoot);\n  const manifest = projectConfig.exp as ExpoAppManifest;\n  // Read from headers\n  const hostname = stripPort(host);\n\n  // Get project entry point and initial module\n  const entryPoint = resolveEntryPoint(projectRoot, platform, projectConfig);\n  const mainModuleName = UrlUtils.stripJSExtension(entryPoint);\n  // Gather packager and host info\n  const hostInfo = await createHostInfoAsync();\n  const [projectSettings, bundleUrlPackagerOpts] = await getPackagerOptionsAsync(projectRoot);\n  // Mutate the manifest\n  manifest.xde = true; // deprecated\n  manifest.developer = {\n    tool: Config.developerTool,\n    projectRoot,\n  };\n  manifest.packagerOpts = projectSettings;\n  manifest.mainModuleName = mainModuleName;\n  // Adding the env variables to the Expo manifest is unsafe.\n  // This feature is deprecated in SDK 41 forward.\n  if (manifest.sdkVersion && Versions.lteSdkVersion(manifest, '40.0.0')) {\n    manifest.env = getManifestEnvironment();\n  }\n  // Add URLs to the manifest\n  manifest.bundleUrl = await getBundleUrlAsync({\n    projectRoot,\n    platform,\n    projectSettings,\n    bundleUrlPackagerOpts,\n    mainModuleName,\n    hostname,\n  });\n  manifest.debuggerHost = await UrlUtils.constructDebuggerHostAsync(projectRoot, hostname);\n  manifest.logUrl = await UrlUtils.constructLogUrlAsync(projectRoot, hostname);\n  manifest.hostUri = await UrlUtils.constructHostUriAsync(projectRoot, hostname);\n  // Resolve all assets and set them on the manifest as URLs\n  await ProjectAssets.resolveManifestAssets({\n    projectRoot,\n    manifest: manifest as ExpoAppManifest,\n    async resolver(path) {\n      return manifest.bundleUrl!.match(/^https?:\\/\\/.*?\\//)![0] + 'assets/' + path;\n    },\n  });\n  // The server normally inserts this but if we're offline we'll do it here\n  await ProjectAssets.resolveGoogleServicesFile(projectRoot, manifest);\n\n  // Create the final string\n  let manifestString;\n  try {\n    manifestString = await getManifestStringAsync(manifest, hostInfo.host, acceptSignature);\n  } catch (error) {\n    if (error.code === 'UNAUTHORIZED_ERROR' && manifest.owner) {\n      // Don't have permissions for siging, warn and enable offline mode.\n      addSigningDisabledWarning(\n        projectRoot,\n        `This project belongs to ${chalk.bold(\n          `@${manifest.owner}`\n        )} and you have not been granted the appropriate permissions.\\n` +\n          `Please request access from an admin of @${manifest.owner} or change the \"owner\" field to an account you belong to.\\n` +\n          learnMore('https://docs.expo.io/versions/latest/config/app/#owner')\n      );\n      Config.offline = true;\n      manifestString = await getManifestStringAsync(manifest, hostInfo.host, acceptSignature);\n    } else if (error.code === 'ENOTFOUND') {\n      // Got a DNS error, i.e. can't access exp.host, warn and enable offline mode.\n      addSigningDisabledWarning(\n        projectRoot,\n        `Could not reach Expo servers, please check if you can access ${\n          error.hostname || 'exp.host'\n        }.`\n      );\n      Config.offline = true;\n      manifestString = await getManifestStringAsync(manifest, hostInfo.host, acceptSignature);\n    } else {\n      throw error;\n    }\n  }\n\n  return {\n    manifestString,\n    exp: manifest,\n    hostInfo,\n  };\n}\n\nconst addSigningDisabledWarning = (() => {\n  let seen = false;\n  return (projectRoot: string, reason: string) => {\n    if (!seen) {\n      seen = true;\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `${reason}\\nFalling back to offline mode.`,\n        'signing-disabled'\n      );\n    }\n  };\n})();\n\nfunction getManifestEnvironment(): Record<string, any> {\n  return Object.keys(process.env).reduce<Record<string, any>>((prev, key) => {\n    if (shouldExposeEnvironmentVariableInManifest(key)) {\n      prev[key] = process.env[key];\n    }\n    return prev;\n  }, {});\n}\n\nasync function getManifestStringAsync(\n  manifest: ExpoAppManifest,\n  hostUUID: string,\n  acceptSignature?: string | string[]\n): Promise<string> {\n  const currentSession = await UserManager.getSessionAsync();\n  if (!currentSession || Config.offline) {\n    manifest.id = `@${ANONYMOUS_USERNAME}/${manifest.slug}-${hostUUID}`;\n  }\n  if (!acceptSignature) {\n    return JSON.stringify(manifest);\n  } else if (!currentSession || Config.offline) {\n    return getUnsignedManifestString(manifest);\n  } else {\n    return await getSignedManifestStringAsync(manifest, currentSession);\n  }\n}\n\nasync function createHostInfoAsync(): Promise<HostInfo> {\n  const host = await UserSettings.anonymousIdentifier();\n\n  return {\n    host,\n    server: 'xdl',\n    serverVersion: require('xdl/package.json').version,\n    serverDriver: Config.developerTool,\n    serverOS: os.platform(),\n    serverOSVersion: os.release(),\n  };\n}\n\nexport async function getSignedManifestStringAsync(\n  manifest: Partial<ExpoAppManifest>,\n  // NOTE: we currently ignore the currentSession that is passed in, see the note below about analytics.\n  currentSession: { sessionSecret?: string; accessToken?: string }\n) {\n  const manifestString = JSON.stringify(manifest);\n  if (_cachedSignedManifest.manifestString === manifestString) {\n    return _cachedSignedManifest.signedManifest;\n  }\n  // WARNING: Removing the following line will regress analytics, see: https://github.com/expo/expo-cli/pull/2357\n  // TODO: make this more obvious from code\n  const user = await UserManager.ensureLoggedInAsync();\n  const { response } = await ApiV2.clientForUser(user).postAsync('manifest/sign', {\n    args: {\n      remoteUsername: manifest.owner ?? (await UserManager.getCurrentUsernameAsync()),\n      remotePackageName: manifest.slug,\n    },\n    manifest: manifest as JSONObject,\n  });\n  _cachedSignedManifest.manifestString = manifestString;\n  _cachedSignedManifest.signedManifest = response;\n  return response;\n}\n\nexport function getUnsignedManifestString(manifest: ExpoConfig) {\n  const unsignedManifest = {\n    manifestString: JSON.stringify(manifest),\n    signature: 'UNSIGNED',\n  };\n  return JSON.stringify(unsignedManifest);\n}\n"]}