{"version":3,"file":"Analytics.js","sourceRoot":"","sources":["../src/Analytics.ts"],"names":[],"mappings":";;;;;AAAA,oEAAqC;AACrC,4CAAoB;AAEpB,yCAAgC;AAEhC,MAAM,8BAA8B,GAAmC;IACrE,MAAM,EAAE,KAAK;IACb,KAAK,EAAE,SAAS;IAChB,KAAK,EAAE,OAAO;CACf,CAAC;AAEF,IAAI,OAA2B,CAAC;AAChC,IAAI,WAAgB,CAAC;AAErB,MAAa,eAAe;IAA5B;QAGU,uBAAkB,GAAY,KAAK,CAAC;IAsE9C,CAAC;IApEQ,KAAK;QACV,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC5B,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,CAAC;SAClC;IACH,CAAC;IAEM,iBAAiB,CAAC,GAAW;QAClC,sFAAsF;QACtF,IAAI,CAAC,mBAAmB,GAAG,IAAI,wBAAO,CAAC,GAAG,EAAE,EAAE,aAAa,EAAE,GAAG,EAAE,CAAC,CAAC;IACtE,CAAC;IAEM,iBAAiB,CAAC,MAAc,EAAE,MAAW;QAClD,OAAO,GAAG,MAAM,CAAC;QACjB,WAAW,GAAG,MAAM,CAAC;QAErB,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IAEM,cAAc,CAAC,OAAe;QACnC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,QAAQ,CAAC,IAAY,EAAE,aAAkB,EAAE;QAChD,IAAI,IAAI,CAAC,mBAAmB,IAAI,OAAO,EAAE;YACvC,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC5B,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;gBAC7B,MAAM,EAAE,OAAO;gBACf,KAAK,EAAE,IAAI;gBACX,UAAU;gBACV,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE;aAC3B,CAAC,CAAC;SACJ;IACH,CAAC;IAEO,oBAAoB;QAC1B,IAAI,IAAI,CAAC,mBAAmB,IAAI,CAAC,IAAI,CAAC,kBAAkB,IAAI,OAAO,EAAE;YACnE,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC;gBAChC,MAAM,EAAE,OAAO;gBACf,MAAM,EAAE,WAAW;gBACnB,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE;aAC3B,CAAC,CAAC;YACH,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;SAChC;IACH,CAAC;IAEO,UAAU;QAChB,MAAM,QAAQ,GAAG,8BAA8B,CAAC,YAAE,CAAC,QAAQ,EAAE,CAAC,IAAI,YAAE,CAAC,QAAQ,EAAE,CAAC;QAChF,MAAM,OAAO,GAAG;YACd,EAAE,EAAE,aAAE,CAAC,OAAO,EAAE;YAChB,MAAM,EAAE;gBACN,KAAK,EAAE,QAAQ;gBACf,KAAK,EAAE,QAAQ;aAChB;YACD,EAAE,EAAE;gBACF,IAAI,EAAE,QAAQ;gBACd,OAAO,EAAE,YAAE,CAAC,OAAO,EAAE;aACtB;YACD,GAAG,EAAE,EAAE;SACR,CAAC;QAEF,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,OAAO,CAAC,GAAG,GAAG;gBACZ,OAAO,EAAE,IAAI,CAAC,OAAO;aACtB,CAAC;SACH;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;CACF;AAzED,0CAyEC;AAED,MAAM,aAAa,GAAG,IAAI,eAAe,EAAE,CAAC;AAE5C,kBAAe,aAAa,CAAC","sourcesContent":["import Segment from 'analytics-node';\nimport os from 'os';\n\nimport { ip } from './internal';\n\nconst PLATFORM_TO_ANALYTICS_PLATFORM: { [platform: string]: string } = {\n  darwin: 'Mac',\n  win32: 'Windows',\n  linux: 'Linux',\n};\n\nlet _userId: string | undefined;\nlet _userTraits: any;\n\nexport class AnalyticsClient {\n  private segmentNodeInstance: Segment | undefined;\n  private version: string | undefined;\n  private userIdentifyCalled: boolean = false;\n\n  public flush() {\n    if (this.segmentNodeInstance) {\n      this.segmentNodeInstance.flush();\n    }\n  }\n\n  public setSegmentNodeKey(key: string) {\n    // Do not wait before flushing, we want node to close immediately if the programs ends\n    this.segmentNodeInstance = new Segment(key, { flushInterval: 300 });\n  }\n\n  public setUserProperties(userId: string, traits: any) {\n    _userId = userId;\n    _userTraits = traits;\n\n    this.ensureUserIdentified();\n  }\n\n  public setVersionName(version: string) {\n    this.version = version;\n  }\n\n  public logEvent(name: string, properties: any = {}) {\n    if (this.segmentNodeInstance && _userId) {\n      this.ensureUserIdentified();\n      this.segmentNodeInstance.track({\n        userId: _userId,\n        event: name,\n        properties,\n        context: this.getContext(),\n      });\n    }\n  }\n\n  private ensureUserIdentified() {\n    if (this.segmentNodeInstance && !this.userIdentifyCalled && _userId) {\n      this.segmentNodeInstance.identify({\n        userId: _userId,\n        traits: _userTraits,\n        context: this.getContext(),\n      });\n      this.userIdentifyCalled = true;\n    }\n  }\n\n  private getContext() {\n    const platform = PLATFORM_TO_ANALYTICS_PLATFORM[os.platform()] || os.platform();\n    const context = {\n      ip: ip.address(),\n      device: {\n        model: platform,\n        brand: platform,\n      },\n      os: {\n        name: platform,\n        version: os.release(),\n      },\n      app: {},\n    };\n\n    if (this.version) {\n      context.app = {\n        version: this.version,\n      };\n    }\n\n    return context;\n  }\n}\n\nconst defaultClient = new AnalyticsClient();\n\nexport default defaultClient;\n"]}