{"version":3,"file":"SimControl.js","sourceRoot":"","sources":["../src/SimControl.ts"],"names":[],"mappings":"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","sourcesContent":["import * as osascript from '@expo/osascript';\nimport spawnAsync, { SpawnOptions, SpawnResult } from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport path from 'path';\n\nimport { Logger, XDLError } from './internal';\n\ntype DeviceState = 'Shutdown' | 'Booted';\n\nexport type SimulatorDevice = {\n  availabilityError: 'runtime profile not found';\n  /**\n   * '/Users/name/Library/Developer/CoreSimulator/Devices/00E55DC0-0364-49DF-9EC6-77BE587137D4/data'\n   */\n  dataPath: string;\n  /**\n   * '/Users/name/Library/Logs/CoreSimulator/00E55DC0-0364-49DF-9EC6-77BE587137D4'\n   */\n  logPath: string;\n  /**\n   * '00E55DC0-0364-49DF-9EC6-77BE587137D4'\n   */\n  udid: string;\n  /**\n   * com.apple.CoreSimulator.SimRuntime.tvOS-13-4\n   */\n  runtime: string;\n  isAvailable: boolean;\n  /**\n   * 'com.apple.CoreSimulator.SimDeviceType.Apple-TV-1080p'\n   */\n  deviceTypeIdentifier: string;\n  state: DeviceState;\n  /**\n   * 'Apple TV'\n   */\n  name: string;\n\n  osType: OSType;\n  /**\n   * '13.4'\n   */\n  osVersion: string;\n  /**\n   * 'iPhone 11 (13.6)'\n   */\n  windowName: string;\n};\n\nexport type XCTraceDevice = {\n  /**\n   * '00E55DC0-0364-49DF-9EC6-77BE587137D4'\n   */\n  udid: string;\n  /**\n   * 'Apple TV'\n   */\n  name: string;\n\n  deviceType: 'device' | 'catalyst';\n  /**\n   * '13.4'\n   */\n  osVersion: string;\n};\n\ntype OSType = 'iOS' | 'tvOS' | 'watchOS' | 'macOS';\n\ntype PermissionName =\n  | 'all'\n  | 'calendar'\n  | 'contacts-limited'\n  | 'contacts'\n  | 'location'\n  | 'location-always'\n  | 'photos-add'\n  | 'photos'\n  | 'media-library'\n  | 'microphone'\n  | 'motion'\n  | 'reminders'\n  | 'siri';\n\ntype SimulatorDeviceList = {\n  devices: {\n    [runtime: string]: SimulatorDevice[];\n  };\n};\n\nexport async function isSimulatorRunningAsync() {\n  try {\n    const zeroMeansNo = (\n      await osascript.execAsync(\n        'tell app \"System Events\" to count processes whose name is \"Simulator\"'\n      )\n    ).trim();\n    if (zeroMeansNo === '0') {\n      return false;\n    }\n  } catch {\n    return false;\n  }\n\n  return true;\n}\n\nexport async function getDefaultSimulatorDeviceUDIDAsync() {\n  try {\n    const { stdout: defaultDeviceUDID } = await spawnAsync('defaults', [\n      'read',\n      'com.apple.iphonesimulator',\n      'CurrentDeviceUDID',\n    ]);\n    return defaultDeviceUDID.trim();\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Returns the local path for the installed tar.app. Returns null when the app isn't installed.\n *\n * @param udid\n * @param bundleIdentifier\n */\nexport async function getContainerPathAsync(\n  udid: string,\n  bundleIdentifier: string\n): Promise<string | null> {\n  try {\n    const { stdout } = await xcrunAsync([\n      'simctl',\n      'get_app_container',\n      deviceUDIDOrBooted(udid),\n      bundleIdentifier,\n    ]);\n    return stdout.trim();\n  } catch (error) {\n    if (error.stderr?.match(/No such file or directory/)) {\n      return null;\n    }\n    throw error;\n  }\n}\n\nexport async function openURLAsync(options: { udid?: string; url: string }) {\n  return simctlAsync(['openurl', deviceUDIDOrBooted(options.udid), options.url]);\n}\n\nexport async function openBundleIdAsync(options: {\n  udid?: string;\n  bundleIdentifier: string;\n}): Promise<SpawnResult> {\n  return simctlAsync(['launch', deviceUDIDOrBooted(options.udid), options.bundleIdentifier]);\n}\n\n// This will only boot in headless mode if the Simulator app is not running.\nexport async function bootAsync({ udid }: { udid: string }): Promise<SimulatorDevice | null> {\n  try {\n    // Skip logging since this is likely to fail.\n    await xcrunAsync(['simctl', 'boot', udid]);\n  } catch (error) {\n    if (!error.stderr?.match(/Unable to boot device in current state: Booted/)) {\n      throw error;\n    }\n  }\n  return await isSimulatorBootedAsync({ udid });\n}\n\nexport async function getBootedSimulatorsAsync(): Promise<SimulatorDevice[]> {\n  const simulatorDeviceInfo = await listAsync('devices');\n  return Object.values(simulatorDeviceInfo.devices).reduce((prev, runtime) => {\n    return prev.concat(runtime.filter(device => device.state === 'Booted'));\n  }, []);\n}\n\nexport async function isSimulatorBootedAsync({\n  udid,\n}: {\n  udid?: string;\n}): Promise<SimulatorDevice | null> {\n  // Simulators can be booted even if the app isn't running :(\n  const devices = await getBootedSimulatorsAsync();\n  if (udid) {\n    return devices.find(bootedDevice => bootedDevice.udid === udid) ?? null;\n  } else {\n    return devices[0] ?? null;\n  }\n}\n\nexport async function installAsync(options: { udid: string; dir: string }): Promise<any> {\n  return simctlAsync(['install', deviceUDIDOrBooted(options.udid), options.dir]);\n}\n\nexport async function uninstallAsync(options: {\n  udid?: string;\n  bundleIdentifier: string;\n}): Promise<any> {\n  return simctlAsync(['uninstall', deviceUDIDOrBooted(options.udid), options.bundleIdentifier]);\n}\n\nfunction parseSimControlJSONResults(input: string): any {\n  try {\n    return JSON.parse(input);\n  } catch (error) {\n    // Nov 15, 2020: Observed this can happen when opening the simulator and the simulator prompts the user to update the XC command line tools.\n    // Unexpected token I in JSON at position 0\n    if (error.message.match('Unexpected token')) {\n      Logger.global.error(`Apple's simctl returned malformed JSON:\\n${input}`);\n    }\n    throw error;\n  }\n}\n\n// TODO: Compare with\n// const results = await SimControl.xcrunAsync(['instruments', '-s']);\nexport async function listAsync(\n  type: 'devices' | 'devicetypes' | 'runtimes' | 'pairs',\n  query?: string | 'available'\n): Promise<SimulatorDeviceList> {\n  const result = await simctlAsync(['list', type, '--json', query]);\n  const info = parseSimControlJSONResults(result.stdout) as SimulatorDeviceList;\n\n  for (const runtime of Object.keys(info.devices)) {\n    // Given a string like 'com.apple.CoreSimulator.SimRuntime.tvOS-13-4'\n    const runtimeSuffix = runtime.split('com.apple.CoreSimulator.SimRuntime.').pop()!;\n    // Create an array [tvOS, 13, 4]\n    const [osType, ...osVersionComponents] = runtimeSuffix.split('-');\n    // Join the end components [13, 4] -> '13.4'\n    const osVersion = osVersionComponents.join('.');\n    const sims = info.devices[runtime];\n    for (const device of sims) {\n      device.runtime = runtime;\n      device.osVersion = osVersion;\n      device.windowName = `${device.name} (${osVersion})`;\n      device.osType = osType as OSType;\n    }\n  }\n  return info;\n}\n\n/**\n * Get a list of all connected devices.\n */\nexport async function listDevicesAsync(): Promise<XCTraceDevice[]> {\n  const { output } = await xcrunAsync(['xctrace', 'list', 'devices']);\n\n  const text = output.join('');\n  const devices: XCTraceDevice[] = [];\n  if (!text.includes('== Simulators ==')) {\n    return [];\n  }\n\n  const lines = text.split('\\n');\n  for (const line of lines) {\n    if (line === '== Simulators ==') {\n      break;\n    }\n    const device = line.match(/(.*?) (\\(([0-9.]+)\\) )?\\(([0-9A-F-]+)\\)/i);\n    if (device) {\n      const [, name, , osVersion, udid] = device;\n      const metadata: XCTraceDevice = {\n        name,\n        udid,\n        osVersion: osVersion ?? '??',\n        deviceType: osVersion ? 'device' : 'catalyst',\n      };\n\n      devices.push(metadata);\n    }\n  }\n\n  return devices;\n}\n\nexport async function shutdownAsync(udid?: string) {\n  try {\n    return simctlAsync(['shutdown', deviceUDIDOrBooted(udid)]);\n  } catch (e) {\n    if (!e.message?.includes('No devices are booted.')) {\n      throw e;\n    }\n  }\n  return null;\n}\n\n// Some permission changes will terminate the application if running\nexport async function updatePermissionsAsync(\n  udid: string,\n  action: 'grant' | 'revoke' | 'reset',\n  permission: PermissionName,\n  bundleIdentifier?: string\n) {\n  return simctlAsync(['privacy', deviceUDIDOrBooted(udid), action, permission, bundleIdentifier]);\n}\n\nexport async function setAppearanceAsync(udid: string, theme: 'light' | 'dark') {\n  return simctlAsync(['ui', deviceUDIDOrBooted(udid), theme]);\n}\n\n// Cannot be invoked unless the simulator is `shutdown`\nexport async function eraseAsync(udid: string) {\n  return simctlAsync(['erase', deviceUDIDOrBooted(udid)]);\n}\n\nexport async function eraseAllAsync() {\n  return simctlAsync(['erase', 'all']);\n}\n\n// Add photos and videos to the simulator's gallery\nexport async function addMediaAsync(udid: string, mediaPath: string) {\n  return simctlAsync(['addmedia', deviceUDIDOrBooted(udid), mediaPath]);\n}\n\nexport async function captureScreenAsync(\n  udid: string,\n  captureType: 'screenshot' | 'recordVideo',\n  outputFilePath: string\n) {\n  return simctlAsync([\n    'io',\n    deviceUDIDOrBooted(udid),\n    captureType,\n    `—type=${path.extname(outputFilePath)}`,\n    outputFilePath,\n  ]);\n}\n\n// Clear all unused simulators\nexport async function deleteUnavailableAsync() {\n  return simctlAsync(['delete', 'unavailable']);\n}\n\nexport async function simctlAsync(\n  [command, ...args]: (string | undefined)[],\n  options?: SpawnOptions\n): Promise<SpawnResult> {\n  return xcrunWithLogging(\n    // @ts-ignore\n    ['simctl', command, ...args.filter(Boolean)],\n    options\n  );\n}\n\nfunction deviceUDIDOrBooted(udid?: string): string {\n  return udid ? udid : 'booted';\n}\n\n/**\n * I think the app can be open while no simulators are booted.\n */\nexport async function isSimulatorAppRunningAsync(): Promise<boolean> {\n  try {\n    const zeroMeansNo = (\n      await osascript.execAsync(\n        'tell app \"System Events\" to count processes whose name is \"Simulator\"'\n      )\n    ).trim();\n    if (zeroMeansNo === '0') {\n      return false;\n    }\n  } catch (error) {\n    if (error.message.includes('Application isn’t running')) {\n      return false;\n    }\n    throw error;\n  }\n\n  return true;\n}\n\nexport async function openSimulatorAppAsync({ udid }: { udid?: string }) {\n  const args = ['-a', 'Simulator'];\n  if (udid) {\n    // This has no effect if the app is already running.\n    args.push('--args', '-CurrentDeviceUDID', udid);\n  }\n  return await spawnAsync('open', args);\n}\n\nexport async function killAllAsync() {\n  return await spawnAsync('killAll', ['Simulator']);\n}\n\nexport function isLicenseOutOfDate(text: string) {\n  if (!text) {\n    return false;\n  }\n\n  const lower = text.toLowerCase();\n  return lower.includes('xcode') && lower.includes('license');\n}\n\nexport async function isXcrunInstalledAsync() {\n  try {\n    await spawnAsync('xcrun', ['--version']);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport async function xcrunAsync(args: string[], options?: SpawnOptions) {\n  try {\n    return await spawnAsync('xcrun', args, options);\n  } catch (e) {\n    if (isLicenseOutOfDate(e.stdout) || isLicenseOutOfDate(e.stderr)) {\n      throw new XDLError(\n        'XCODE_LICENSE_NOT_ACCEPTED',\n        'Xcode license is not accepted. Please run `sudo xcodebuild -license`.'\n      );\n    } else if (e.stderr?.includes('not a developer tool or in PATH')) {\n      throw new XDLError(\n        'SIMCTL_NOT_AVAILABLE',\n        `You may need to run ${chalk.bold(\n          'sudo xcode-select -s /Applications/Xcode.app'\n        )} and try again.`\n      );\n    }\n    throw e;\n  }\n}\nexport async function xcrunWithLogging(\n  args: string[],\n  options?: SpawnOptions\n): Promise<SpawnResult> {\n  try {\n    return await xcrunAsync(args, options);\n  } catch (e) {\n    Logger.global.error(`Error running \\`xcrun ${args.join(' ')}\\`: ${e.stderr || e.message}`);\n    throw e;\n  }\n}\n"]}