"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("@expo/config");
const osascript = __importStar(require("@expo/osascript"));
const spawn_async_1 = __importDefault(require("@expo/spawn-async"));
const chalk_1 = __importDefault(require("chalk"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const progress_1 = __importDefault(require("progress"));
const prompts_1 = __importDefault(require("prompts"));
const semver_1 = __importDefault(require("semver"));
const internal_1 = require("./internal");
let _lastUrl = null;
let _lastUdid = null;
const SUGGESTED_XCODE_VERSION = `${internal_1.Xcode.minimumVersion}.0`;
const INSTALL_WARNING_TIMEOUT = 60 * 1000;
function isPlatformSupported() {
    return process.platform === 'darwin';
}
exports.isPlatformSupported = isPlatformSupported;
/**
 * Ensure Xcode is installed an recent enough to be used with Expo.
 *
 * @return true when Xcode is installed, false when the process should end.
 */
async function ensureXcodeInstalledAsync() {
    const promptToOpenAppStoreAsync = async (message) => {
        // This prompt serves no purpose accept informing the user what to do next, we could just open the App Store but it could be confusing if they don't know what's going on.
        const confirm = await internal_1.Prompts.confirmAsync({ initial: true, message });
        if (confirm) {
            internal_1.Logger.global.info(`Going to the App Store, re-run Expo when Xcode is finished installing.`);
            await internal_1.Xcode.openAppStoreAsync(internal_1.Xcode.appStoreId);
        }
    };
    const version = await internal_1.Xcode.getXcodeVersionAsync();
    if (!version) {
        // Almost certainly Xcode isn't installed.
        await promptToOpenAppStoreAsync(`Xcode needs to be installed (don't worry, you won't have to use it), would you like to continue to the App Store?`);
        return false;
    }
    if (!semver_1.default.valid(version)) {
        // Not sure why this would happen, if it does we should add a more confident error message.
        console.error(`Xcode version is in an unknown format: ${version}`);
        return false;
    }
    if (semver_1.default.lt(version, SUGGESTED_XCODE_VERSION)) {
        // Xcode version is too old.
        await promptToOpenAppStoreAsync(`Xcode (${version}) needs to be updated to at least version ${internal_1.Xcode.minimumVersion}, would you like to continue to the App Store?`);
        return false;
    }
    return true;
}
exports.ensureXcodeInstalledAsync = ensureXcodeInstalledAsync;
async function ensureXcodeCommandLineToolsInstalledAsync() {
    if (!(await ensureXcodeInstalledAsync())) {
        // Need Xcode to install the CLI afaict
        return false;
    }
    else if (await internal_1.SimControl.isXcrunInstalledAsync()) {
        // Run this second to ensure the Xcode version check is run.
        return true;
    }
    async function pendingAsync() {
        if (await internal_1.SimControl.isXcrunInstalledAsync()) {
            return true;
        }
        else {
            await internal_1.delayAsync(100);
            return await pendingAsync();
        }
    }
    // This prompt serves no purpose accept informing the user what to do next, we could just open the App Store but it could be confusing if they don't know what's going on.
    const confirm = await internal_1.Prompts.confirmAsync({
        initial: true,
        message: `Xcode ${chalk_1.default.bold `Command Line Tools`} needs to be installed (requires ${chalk_1.default.bold `sudo`}), continue?`,
    });
    if (!confirm) {
        return false;
    }
    try {
        await spawn_async_1.default('sudo', [
            'xcode-select',
            '--install',
        ]);
        // Most likely the user will cancel the process, but if they don't this will continue checking until the CLI is available.
        await pendingAsync();
        return true;
    }
    catch (error) {
        // TODO: Figure out why this might get called (cancel early, network issues, server problems)
        // TODO: Handle me
    }
    return false;
}
class TimeoutError extends Error {
}
// Simulator installed
async function isSimulatorInstalledAsync() {
    // Check to ensure Xcode and its CLI are installed and up to date.
    if (!(await ensureXcodeCommandLineToolsInstalledAsync())) {
        return false;
    }
    // TODO: extract into ensureSimulatorInstalled method
    let result;
    try {
        result = (await osascript.execAsync('id of app "Simulator"')).trim();
    }
    catch (e) {
        // This error may occur in CI where the users intends to install just the simulators but no Xcode.
        console.error("Can't determine id of Simulator app; the Simulator is most likely not installed on this machine. Run `sudo xcode-select -s /Applications/Xcode.app`", e);
        return false;
    }
    if (result !== 'com.apple.iphonesimulator' &&
        result !== 'com.apple.CoreSimulator.SimulatorTrampoline') {
        // TODO: FYI
        console.warn("Simulator is installed but is identified as '" + result + "'; don't know what that is.");
        return false;
    }
    // make sure we can run simctl
    try {
        await internal_1.SimControl.simctlAsync(['help']);
    }
    catch (e) {
        if (e.isXDLError) {
            internal_1.Logger.global.error(e.toString());
        }
        else {
            console.warn(`Unable to run simctl: ${e.toString()}`);
            internal_1.Logger.global.error('xcrun may not be configured correctly. Try running `sudo xcode-select --reset` and running this again.');
        }
        return false;
    }
    return true;
}
exports.isSimulatorInstalledAsync = isSimulatorInstalledAsync;
/**
 * Ensure a simulator is booted and the Simulator app is opened.
 * This is where any timeout related error handling should live.
 */
async function ensureSimulatorOpenAsync({ udid } = {}, tryAgain = true) {
    var _a;
    // Yes, simulators can be booted even if the app isn't running, obviously we'd never want this.
    if (!(await internal_1.SimControl.isSimulatorAppRunningAsync())) {
        internal_1.Logger.global.info(`Opening the iOS simulator, this might take a moment.`);
        // In theory this would ensure the correct simulator is booted as well.
        // This isn't theory though, this is Xcode.
        await internal_1.SimControl.openSimulatorAppAsync({ udid });
        if (!(await waitForSimulatorAppToStart())) {
            throw new TimeoutError(`Simulator app did not open fast enough. Try opening Simulator first, then running your app.`);
        }
    }
    // Use a default simulator if none was specified
    if (!udid) {
        const simulatorOpenedByApp = await isSimulatorBootedAsync({ udid });
        // This should prevent opening a second simulator in the chance that default
        // simulator doesn't match what the Simulator app would open by default.
        if (simulatorOpenedByApp === null || simulatorOpenedByApp === void 0 ? void 0 : simulatorOpenedByApp.udid) {
            udid = simulatorOpenedByApp.udid;
        }
        else {
            udid = (_a = (await _getDefaultSimulatorDeviceUDIDAsync())) !== null && _a !== void 0 ? _a : (await getFirstAvailableDeviceAsync()).udid;
        }
    }
    const bootedDevice = await waitForDeviceToBootAsync({ udid });
    if (!bootedDevice) {
        // Give it a second chance, this might not be needed but it could potentially lead to a better UX on slower devices.
        if (tryAgain) {
            return await ensureSimulatorOpenAsync({ udid }, false);
        }
        // TODO: We should eliminate all needs for a timeout error, it's bad UX to get an error about the simulator not starting while the user can clearly see it starting on their slow computer.
        throw new TimeoutError(`Simulator didn't boot fast enough. Try opening Simulator first, then running your app.`);
    }
    return bootedDevice;
}
exports.ensureSimulatorOpenAsync = ensureSimulatorOpenAsync;
/**
 * Get all simulators supported by Expo (iOS only).
 */
async function getSelectableSimulatorsAsync() {
    const simulators = await getSimulatorsAsync();
    return simulators.filter(device => device.isAvailable && device.osType === 'iOS');
}
async function getSimulatorsAsync() {
    const simulatorDeviceInfo = await internal_1.SimControl.listAsync('devices');
    return Object.values(simulatorDeviceInfo.devices).reduce((prev, runtime) => {
        return prev.concat(runtime);
    }, []);
}
async function getBootedSimulatorsAsync() {
    const simulators = await getSimulatorsAsync();
    return simulators.filter(device => device.state === 'Booted');
}
async function isSimulatorBootedAsync({ udid, } = {}) {
    var _a, _b;
    // Simulators can be booted even if the app isn't running :(
    const devices = await getBootedSimulatorsAsync();
    if (udid) {
        return (_a = devices.find(bootedDevice => bootedDevice.udid === udid)) !== null && _a !== void 0 ? _a : null;
    }
    else {
        return (_b = devices[0]) !== null && _b !== void 0 ? _b : null;
    }
}
exports.isSimulatorBootedAsync = isSimulatorBootedAsync;
async function _getDefaultSimulatorDeviceUDIDAsync() {
    try {
        const { stdout: defaultDeviceUDID } = await spawn_async_1.default('defaults', [
            'read',
            'com.apple.iphonesimulator',
            'CurrentDeviceUDID',
        ]);
        return defaultDeviceUDID.trim();
    }
    catch (e) {
        return null;
    }
}
async function getFirstAvailableDeviceAsync() {
    const simulators = await getSelectableSimulatorsAsync();
    if (!simulators.length) {
        // TODO: Prompt to install the simulators
        throw new Error('No iPhone devices available in Simulator.');
    }
    return simulators[0];
}
async function waitForActionAsync({ action, interval = 100, maxWaitTime = 20000, }) {
    let complete;
    const start = Date.now();
    do {
        await internal_1.delayAsync(interval);
        complete = await action();
        if (Date.now() - start > maxWaitTime) {
            break;
        }
    } while (!complete);
    return complete;
}
async function waitForSimulatorAppToStart() {
    return waitForActionAsync({ action: internal_1.SimControl.isSimulatorAppRunningAsync });
}
async function waitForDeviceToBootAsync({ udid, }) {
    return waitForActionAsync({
        action: () => {
            return internal_1.SimControl.bootAsync({ udid });
        },
    });
}
async function activateSimulatorWindowAsync() {
    // TODO: Focus the individual window
    return await osascript.execAsync(`tell application "Simulator" to activate`);
}
exports.activateSimulatorWindowAsync = activateSimulatorWindowAsync;
async function closeSimulatorAppAsync() {
    return await osascript.execAsync('tell application "Simulator" to quit');
}
exports.closeSimulatorAppAsync = closeSimulatorAppAsync;
async function isExpoClientInstalledOnSimulatorAsync({ udid, }) {
    return !!(await internal_1.SimControl.getContainerPathAsync(udid, 'host.exp.Exponent'));
}
exports.isExpoClientInstalledOnSimulatorAsync = isExpoClientInstalledOnSimulatorAsync;
async function waitForExpoClientInstalledOnSimulatorAsync({ udid, }) {
    if (await isExpoClientInstalledOnSimulatorAsync({ udid })) {
        return true;
    }
    else {
        await internal_1.delayAsync(100);
        return await waitForExpoClientInstalledOnSimulatorAsync({ udid });
    }
}
exports.waitForExpoClientInstalledOnSimulatorAsync = waitForExpoClientInstalledOnSimulatorAsync;
async function waitForExpoClientUninstalledOnSimulatorAsync({ udid, }) {
    if (!(await isExpoClientInstalledOnSimulatorAsync({ udid }))) {
        return true;
    }
    else {
        await internal_1.delayAsync(100);
        return await waitForExpoClientInstalledOnSimulatorAsync({ udid });
    }
}
exports.waitForExpoClientUninstalledOnSimulatorAsync = waitForExpoClientUninstalledOnSimulatorAsync;
async function expoVersionOnSimulatorAsync({ udid, }) {
    const localPath = await internal_1.SimControl.getContainerPathAsync(udid, 'host.exp.Exponent');
    if (!localPath) {
        return null;
    }
    const regex = /Exponent-([0-9.]+).*\.app$/;
    const regexMatch = regex.exec(localPath);
    if (!regexMatch) {
        return null;
    }
    let matched = regexMatch[1];
    // If the value is matched like 1.0.0. then remove the trailing dot.
    if (matched.endsWith('.')) {
        matched = matched.substr(0, matched.length - 1);
    }
    return matched;
}
exports.expoVersionOnSimulatorAsync = expoVersionOnSimulatorAsync;
async function doesExpoClientNeedUpdatedAsync(simulator, sdkVersion) {
    var _a;
    // Test that upgrading works by returning true
    // return true;
    const versions = await internal_1.Versions.versionsAsync();
    const clientForSdk = await getClientForSDK(sdkVersion);
    const latestVersionForSdk = (_a = clientForSdk === null || clientForSdk === void 0 ? void 0 : clientForSdk.version) !== null && _a !== void 0 ? _a : versions.iosVersion;
    const installedVersion = await expoVersionOnSimulatorAsync(simulator);
    if (installedVersion && semver_1.default.lt(installedVersion, latestVersionForSdk)) {
        return true;
    }
    return false;
}
exports.doesExpoClientNeedUpdatedAsync = doesExpoClientNeedUpdatedAsync;
// If specific URL given just always download it and don't use cache
async function _downloadSimulatorAppAsync(url, downloadProgressCallback) {
    if (!url) {
        const versions = await internal_1.Versions.versionsAsync();
        url = versions.iosUrl;
    }
    const filename = path_1.default.parse(url).name;
    const dir = path_1.default.join(simulatorCacheDirectory(), `${filename}.app`);
    if (await fs_extra_1.default.pathExists(dir)) {
        const filesInDir = await fs_extra_1.default.readdir(dir);
        if (filesInDir.length > 0) {
            return dir;
        }
        else {
            fs_extra_1.default.removeSync(dir);
        }
    }
    fs_extra_1.default.mkdirpSync(dir);
    try {
        await internal_1.Api.downloadAsync(url, dir, { extract: true }, downloadProgressCallback);
    }
    catch (e) {
        fs_extra_1.default.removeSync(dir);
        throw e;
    }
    return dir;
}
exports._downloadSimulatorAppAsync = _downloadSimulatorAppAsync;
// url: Optional URL of Exponent.app tarball to download
async function installExpoOnSimulatorAsync({ url, simulator, version, }) {
    const bar = new progress_1.default(`Installing the Expo Go app on ${simulator.name} [:bar] :percent :etas`, {
        total: 100,
        width: 64,
        complete: '=',
        incomplete: ' ',
    });
    let warningTimer;
    const setWarningTimer = () => {
        if (warningTimer) {
            clearTimeout(warningTimer);
        }
        return setTimeout(() => {
            internal_1.Logger.global.info('');
            internal_1.Logger.global.info('This download is taking longer than expected. You can also try downloading the clients from the website at https://expo.io/tools');
        }, INSTALL_WARNING_TIMEOUT);
    };
    internal_1.Logger.notifications.info({ code: internal_1.NotificationCode.START_LOADING });
    warningTimer = setWarningTimer();
    const dir = await _downloadSimulatorAppAsync(url, progress => bar.tick(1, progress));
    internal_1.Logger.notifications.info({ code: internal_1.NotificationCode.STOP_LOADING });
    if (version) {
        internal_1.Logger.global.info(`Installing Expo Go ${version} on ${simulator.name}`);
    }
    else {
        internal_1.Logger.global.info(`Installing Expo Go on ${simulator.name}`);
    }
    internal_1.Logger.notifications.info({ code: internal_1.NotificationCode.START_LOADING });
    warningTimer = setWarningTimer();
    const result = await internal_1.SimControl.installAsync({ udid: simulator.udid, dir });
    internal_1.Logger.notifications.info({ code: internal_1.NotificationCode.STOP_LOADING });
    clearTimeout(warningTimer);
    return result;
}
exports.installExpoOnSimulatorAsync = installExpoOnSimulatorAsync;
async function uninstallExpoAppFromSimulatorAsync({ udid } = {}) {
    var _a;
    try {
        internal_1.Logger.global.info('Uninstalling Expo Go from iOS simulator.');
        await internal_1.SimControl.uninstallAsync({ udid, bundleIdentifier: 'host.exp.Exponent' });
    }
    catch (e) {
        if (!((_a = e.message) === null || _a === void 0 ? void 0 : _a.includes('No devices are booted.'))) {
            console.error(e);
            throw e;
        }
    }
}
exports.uninstallExpoAppFromSimulatorAsync = uninstallExpoAppFromSimulatorAsync;
function simulatorCacheDirectory() {
    const dotExpoHomeDirectory = internal_1.UserSettings.dotExpoHomeDirectory();
    const dir = path_1.default.join(dotExpoHomeDirectory, 'ios-simulator-app-cache');
    fs_extra_1.default.mkdirpSync(dir);
    return dir;
}
async function upgradeExpoAsync(options = {}) {
    if (!(await isSimulatorInstalledAsync())) {
        return false;
    }
    const simulator = await ensureSimulatorOpenAsync(options);
    await uninstallExpoAppFromSimulatorAsync(simulator);
    const installResult = await installExpoOnSimulatorAsync({
        url: options.url,
        version: options.version,
        simulator,
    });
    if (installResult.status !== 0) {
        return false;
    }
    if (_lastUrl) {
        internal_1.Logger.global.info(`Opening ${chalk_1.default.underline(_lastUrl)} in Expo`);
        await internal_1.SimControl.openURLAsync({ udid: simulator.udid, url: _lastUrl });
        _lastUrl = null;
    }
    return true;
}
exports.upgradeExpoAsync = upgradeExpoAsync;
async function openUrlInSimulatorSafeAsync({ url, udid, isDetached = false, sdkVersion, devClient = false, projectRoot, exp = config_1.getConfig(projectRoot, { skipSDKVersionRequirement: true }).exp, }) {
    if (!(await isSimulatorInstalledAsync())) {
        return {
            success: false,
            msg: 'Unable to verify Xcode and Simulator installation.',
        };
    }
    let simulator = null;
    try {
        simulator = await ensureSimulatorOpenAsync({ udid });
    }
    catch (error) {
        return {
            success: false,
            msg: error.message,
        };
    }
    let bundleIdentifier = 'host.exp.Exponent';
    try {
        if (devClient) {
            bundleIdentifier = await internal_1.BundleIdentifier.configureBundleIdentifierAsync(projectRoot, exp);
            await assertDevClientInstalledAsync(simulator, bundleIdentifier);
            // stream logs before opening the client.
            await streamLogsAsync({ udid: simulator.udid, bundleIdentifier });
        }
        else if (!isDetached) {
            await ensureExpoClientInstalledAsync(simulator, sdkVersion);
            _lastUrl = url;
        }
        internal_1.Logger.global.info(`Opening ${chalk_1.default.underline(url)} on ${chalk_1.default.bold(simulator.name)}`);
        await internal_1.SimControl.openURLAsync({ url, udid: simulator.udid });
    }
    catch (e) {
        if (e.isXDLError) {
            // Hit some internal error, don't try again.
            // This includes Xcode license errors
            internal_1.Logger.global.error(e.message);
            return {
                success: false,
                msg: `${e.toString()}`,
            };
        }
        if (isDetached) {
            internal_1.Logger.global.error(`Error running app. Have you installed the app already using Xcode? Since you are detached you must build manually. ${e.toString()}`);
        }
        else {
            internal_1.Logger.global.error(e.message);
        }
        return {
            success: false,
            msg: `${e.toString()}`,
        };
    }
    internal_1.Analytics.logEvent('Open Url on Device', {
        platform: 'ios',
    });
    return {
        success: true,
        bundleIdentifier,
    };
}
async function assertDevClientInstalledAsync(simulator, bundleIdentifier) {
    if (!(await internal_1.SimControl.getContainerPathAsync(simulator.udid, bundleIdentifier))) {
        throw new Error(`The development client (${bundleIdentifier}) for this project is not installed. ` +
            `Please build and install the client on the simulator first.\n${internal_1.learnMore('https://docs.expo.io/clients/distribution-for-ios/#building-for-ios')}`);
    }
}
// Keep a list of simulator UDIDs so we can prevent asking multiple times if a user wants to upgrade.
// This can prevent annoying interactions when they don't want to upgrade for whatever reason.
const hasPromptedToUpgrade = {};
async function ensureExpoClientInstalledAsync(simulator, sdkVersion) {
    let isInstalled = await isExpoClientInstalledOnSimulatorAsync(simulator);
    if (isInstalled) {
        if (!hasPromptedToUpgrade[simulator.udid] &&
            (await doesExpoClientNeedUpdatedAsync(simulator, sdkVersion))) {
            // Only prompt once per simulator in a single run.
            hasPromptedToUpgrade[simulator.udid] = true;
            const confirm = await internal_1.Prompts.confirmAsync({
                initial: true,
                message: `Expo Go on ${simulator.name} is outdated, would you like to upgrade?`,
            });
            if (confirm) {
                // TODO: Is there any downside to skipping the uninstall step?
                // await uninstallExpoAppFromSimulatorAsync(simulator);
                // await waitForExpoClientUninstalledOnSimulatorAsync(simulator);
                isInstalled = false;
            }
        }
    }
    // If it's still "not installed" then install it (again).
    if (!isInstalled) {
        const iosClient = await getClientForSDK(sdkVersion);
        await installExpoOnSimulatorAsync(Object.assign({ simulator }, iosClient));
        await waitForExpoClientInstalledOnSimulatorAsync(simulator);
    }
}
async function getClientForSDK(sdkVersionString) {
    if (!sdkVersionString) {
        return null;
    }
    const sdkVersion = (await internal_1.Versions.sdkVersionsAsync())[sdkVersionString];
    if (!sdkVersion) {
        return null;
    }
    return {
        url: sdkVersion.iosClientUrl,
        version: sdkVersion.iosClientVersion,
    };
}
async function openProjectAsync({ projectRoot, shouldPrompt, devClient, }) {
    const projectUrl = await internal_1.UrlUtils.constructDeepLinkAsync(projectRoot, {
        hostType: 'localhost',
    });
    const { exp } = config_1.getConfig(projectRoot, {
        skipSDKVersionRequirement: true,
    });
    let device = null;
    if (shouldPrompt) {
        const devices = await getSelectableSimulatorsAsync();
        device = await promptForSimulatorAsync(devices);
    }
    else {
        device = await ensureSimulatorOpenAsync({ udid: _lastUdid !== null && _lastUdid !== void 0 ? _lastUdid : undefined });
    }
    if (!device) {
        return { success: false, error: 'escaped' };
    }
    _lastUdid = device.udid;
    const result = await openUrlInSimulatorSafeAsync({
        udid: device.udid,
        url: projectUrl,
        sdkVersion: exp.sdkVersion,
        isDetached: !!exp.isDetached,
        devClient,
        exp,
        projectRoot,
    });
    if (result.success) {
        await activateSimulatorWindowAsync();
        return {
            success: true,
            url: projectUrl,
            udid: device.udid,
            bundleIdentifier: result.bundleIdentifier,
        };
    }
    return { success: result.success, error: result.msg };
}
exports.openProjectAsync = openProjectAsync;
async function streamLogsAsync({ bundleIdentifier, udid, }) {
    const imageName = await internal_1.SimControlLogs.getImageNameFromBundleIdentifierAsync(udid, bundleIdentifier);
    if (imageName) {
        // Attach simulator log observer
        internal_1.SimControlLogs.streamLogs({ pid: imageName, udid });
    }
}
exports.streamLogsAsync = streamLogsAsync;
async function openWebProjectAsync({ projectRoot, shouldPrompt, }) {
    const projectUrl = await internal_1.Webpack.getUrlAsync(projectRoot);
    if (projectUrl === null) {
        return {
            success: false,
            error: `The web project has not been started yet`,
        };
    }
    let device = null;
    if (shouldPrompt) {
        const devices = await getSelectableSimulatorsAsync();
        device = await promptForSimulatorAsync(devices);
    }
    else {
        device = await ensureSimulatorOpenAsync({ udid: _lastUdid !== null && _lastUdid !== void 0 ? _lastUdid : undefined });
    }
    if (!device) {
        return { success: false, error: 'escaped' };
    }
    _lastUdid = device.udid;
    const result = await openUrlInSimulatorSafeAsync({
        url: projectUrl,
        udid: device.udid,
        isDetached: true,
        projectRoot,
    });
    if (result.success) {
        await activateSimulatorWindowAsync();
        return { success: true, url: projectUrl };
    }
    return { success: result.success, error: result.msg };
}
exports.openWebProjectAsync = openWebProjectAsync;
/**
 * Sort the devices so the last simulator that was opened (user's default) is the first suggested.
 *
 * @param devices
 */
async function sortDefaultDeviceToBeginningAsync(devices) {
    var _a;
    const defaultUdid = (_a = (await _getDefaultSimulatorDeviceUDIDAsync())) !== null && _a !== void 0 ? _a : (await getFirstAvailableDeviceAsync()).udid;
    if (defaultUdid) {
        let iterations = 0;
        while (devices[0].udid !== defaultUdid && iterations < devices.length) {
            devices.push(devices.shift());
            iterations++;
        }
    }
    return devices;
}
exports.sortDefaultDeviceToBeginningAsync = sortDefaultDeviceToBeginningAsync;
async function promptForSimulatorAsync(devices) {
    devices = await sortDefaultDeviceToBeginningAsync(devices);
    // TODO: Bail on non-interactive
    const results = await promptForDeviceAsync(devices);
    return results ? devices.find(({ udid }) => results === udid) : null;
}
exports.promptForSimulatorAsync = promptForSimulatorAsync;
async function promptForDeviceAsync(devices) {
    // TODO: provide an option to add or download more simulators
    // TODO: Add support for physical devices too.
    // Pause interactions on the TerminalUI
    internal_1.Prompts.pauseInteractions();
    const { value } = await prompts_1.default({
        type: 'autocomplete',
        name: 'value',
        limit: 11,
        message: 'Select a simulator',
        choices: devices.map(item => {
            const isActive = item.state === 'Booted';
            const format = isActive ? chalk_1.default.bold : (text) => text;
            return {
                title: `${format(item.name)} ${chalk_1.default.dim(`(${item.osVersion})`)}`,
                value: item.udid,
            };
        }),
        suggest: (input, choices) => {
            const regex = new RegExp(input, 'i');
            return choices.filter((choice) => regex.test(choice.title));
        },
    });
    // Resume interactions on the TerminalUI
    internal_1.Prompts.resumeInteractions();
    return value;
}
//# sourceMappingURL=Simulator.js.map