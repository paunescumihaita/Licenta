"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const analytics_node_1 = __importDefault(require("analytics-node"));
const os_1 = __importDefault(require("os"));
const internal_1 = require("./internal");
const PLATFORM_TO_ANALYTICS_PLATFORM = {
    darwin: 'Mac',
    win32: 'Windows',
    linux: 'Linux',
};
let _userId;
let _userTraits;
class AnalyticsClient {
    constructor() {
        this.userIdentifyCalled = false;
    }
    flush() {
        if (this.segmentNodeInstance) {
            this.segmentNodeInstance.flush();
        }
    }
    setSegmentNodeKey(key) {
        // Do not wait before flushing, we want node to close immediately if the programs ends
        this.segmentNodeInstance = new analytics_node_1.default(key, { flushInterval: 300 });
    }
    setUserProperties(userId, traits) {
        _userId = userId;
        _userTraits = traits;
        this.ensureUserIdentified();
    }
    setVersionName(version) {
        this.version = version;
    }
    logEvent(name, properties = {}) {
        if (this.segmentNodeInstance && _userId) {
            this.ensureUserIdentified();
            this.segmentNodeInstance.track({
                userId: _userId,
                event: name,
                properties,
                context: this.getContext(),
            });
        }
    }
    ensureUserIdentified() {
        if (this.segmentNodeInstance && !this.userIdentifyCalled && _userId) {
            this.segmentNodeInstance.identify({
                userId: _userId,
                traits: _userTraits,
                context: this.getContext(),
            });
            this.userIdentifyCalled = true;
        }
    }
    getContext() {
        const platform = PLATFORM_TO_ANALYTICS_PLATFORM[os_1.default.platform()] || os_1.default.platform();
        const context = {
            ip: internal_1.ip.address(),
            device: {
                model: platform,
                brand: platform,
            },
            os: {
                name: platform,
                version: os_1.default.release(),
            },
            app: {},
        };
        if (this.version) {
            context.app = {
                version: this.version,
            };
        }
        return context;
    }
}
exports.AnalyticsClient = AnalyticsClient;
const defaultClient = new AnalyticsClient();
exports.default = defaultClient;
//# sourceMappingURL=Analytics.js.map