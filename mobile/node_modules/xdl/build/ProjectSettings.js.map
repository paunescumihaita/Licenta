{"version":3,"file":"ProjectSettings.js","sourceRoot":"","sources":["../src/ProjectSettings.ts"],"names":[],"mappings":"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","sourcesContent":["import { ProjectTarget } from '@expo/config';\nimport JsonFile from '@expo/json-file';\nimport fs from 'fs-extra';\nimport path from 'path';\n\ntype ProjectStatus = 'running' | 'ill' | 'exited';\n\nexport type ProjectSettings = {\n  scheme: string | null;\n  hostType: 'localhost' | 'lan' | 'tunnel';\n  lanType: 'ip' | 'hostname';\n  dev: boolean;\n  devClient: boolean;\n  minify: boolean;\n  urlRandomness: string | null;\n  https: boolean;\n};\nexport type Settings = ProjectSettings;\n\nconst projectSettingsFile = 'settings.json';\nconst projectSettingsDefaults: ProjectSettings = {\n  scheme: null,\n  hostType: 'lan',\n  lanType: 'ip',\n  devClient: false,\n  dev: true,\n  minify: false,\n  urlRandomness: null,\n  https: false,\n};\n\ntype PackagerInfo = {\n  expoServerPort?: number | null;\n  packagerPort?: number | null;\n  packagerPid?: number | null;\n  expoServerNgrokUrl?: string | null;\n  packagerNgrokUrl?: string | null;\n  ngrokPid?: number | null;\n  devToolsPort?: number | null;\n  webpackServerPort?: number | null;\n  target?: ProjectTarget;\n};\nconst packagerInfoFile = 'packager-info.json';\n\nfunction projectSettingsJsonFile(projectRoot: string): JsonFile<ProjectSettings> {\n  return new JsonFile<ProjectSettings>(\n    path.join(dotExpoProjectDirectory(projectRoot), projectSettingsFile)\n  );\n}\n\nfunction packagerInfoJsonFile(projectRoot: string): JsonFile<PackagerInfo> {\n  return new JsonFile<PackagerInfo>(\n    path.join(dotExpoProjectDirectory(projectRoot), packagerInfoFile)\n  );\n}\n\nexport async function readAsync(projectRoot: string): Promise<ProjectSettings> {\n  let projectSettings;\n  try {\n    projectSettings = await projectSettingsJsonFile(projectRoot).readAsync();\n  } catch (e) {\n    projectSettings = await projectSettingsJsonFile(projectRoot).writeAsync(\n      projectSettingsDefaults\n    );\n  }\n  migrateDeprecatedSettings(projectSettings);\n  // Set defaults for any missing fields\n  return { ...projectSettingsDefaults, ...projectSettings };\n}\n\nfunction migrateDeprecatedSettings(projectSettings: any): void {\n  if (projectSettings.hostType === 'ngrok') {\n    // 'ngrok' is deprecated\n    projectSettings.hostType = 'tunnel';\n  }\n\n  if (projectSettings.urlType) {\n    // urlType is deprecated as a project setting\n    delete projectSettings.urlType;\n  }\n\n  if ('strict' in projectSettings) {\n    // strict mode is not supported at the moment\n    delete projectSettings.strict;\n  }\n}\n\nexport async function setAsync(\n  projectRoot: string,\n  json: Partial<ProjectSettings>\n): Promise<ProjectSettings> {\n  try {\n    return await projectSettingsJsonFile(projectRoot).mergeAsync(json, {\n      cantReadFileDefault: projectSettingsDefaults,\n    });\n  } catch (e) {\n    return await projectSettingsJsonFile(projectRoot).writeAsync({\n      ...projectSettingsDefaults,\n      ...json,\n    });\n  }\n}\n\nexport async function readPackagerInfoAsync(projectRoot: string): Promise<PackagerInfo> {\n  try {\n    return await packagerInfoJsonFile(projectRoot).readAsync({\n      cantReadFileDefault: {},\n    });\n  } catch (e) {\n    return await packagerInfoJsonFile(projectRoot).writeAsync({});\n  }\n}\n\nexport async function getCurrentStatusAsync(projectRoot: string): Promise<ProjectStatus> {\n  const { packagerPort, expoServerPort } = await readPackagerInfoAsync(projectRoot);\n  if (packagerPort && expoServerPort) {\n    return 'running';\n  } else if (packagerPort || expoServerPort) {\n    return 'ill';\n  } else {\n    return 'exited';\n  }\n}\n\nexport async function setPackagerInfoAsync(\n  projectRoot: string,\n  json: Partial<PackagerInfo>\n): Promise<PackagerInfo> {\n  try {\n    return await packagerInfoJsonFile(projectRoot).mergeAsync(json, {\n      cantReadFileDefault: {},\n    });\n  } catch (e) {\n    return await packagerInfoJsonFile(projectRoot).writeAsync(json);\n  }\n}\n\nexport function dotExpoProjectDirectory(projectRoot: string): string {\n  const dirPath = path.join(projectRoot, '.expo');\n  try {\n    // move .exponent to .expo\n    const oldDirPath = path.join(projectRoot, '.exponent');\n    if (fs.statSync(oldDirPath).isDirectory()) {\n      fs.renameSync(oldDirPath, dirPath);\n    }\n  } catch (e) {\n    // no old directory, continue\n  }\n\n  fs.mkdirpSync(dirPath);\n\n  const readmeFilePath = path.resolve(dirPath, 'README.md');\n  if (!fs.existsSync(readmeFilePath)) {\n    fs.writeFileSync(\n      readmeFilePath,\n      `> Why do I have a folder named \".expo\" in my project?\n\nThe \".expo\" folder is created when an Expo project is started using \"expo start\" command.\n\n> What does the \"packager-info.json\" file contain?\n\nThe \"packager-info.json\" file contains port numbers and process PIDs that are used to serve the application to the mobile device/simulator.\n\n> What does the \"settings.json\" file contain?\n\nThe \"settings.json\" file contains the server configuration that is used to serve the application manifest.\n\n> Should I commit the \".expo\" folder?\n\nNo, you should not share the \".expo\" folder. It does not contain any information that is relevant for other developers working on the project, it is specific to your machine.\n\nUpon project creation, the \".expo\" folder is already added to your \".gitignore\" file.\n`\n    );\n  }\n  return dirPath;\n}\n\nexport function dotExpoProjectDirectoryExists(projectRoot: string): boolean {\n  const dirPath = path.join(projectRoot, '.expo');\n  try {\n    if (fs.statSync(dirPath).isDirectory()) {\n      return true;\n    }\n  } catch (e) {\n    // file doesn't exist\n  }\n\n  return false;\n}\n\nexport async function getPackagerOptsAsync(projectRoot: string): Promise<ProjectSettings> {\n  const projectSettings = await readAsync(projectRoot);\n  return projectSettings;\n}\n"]}