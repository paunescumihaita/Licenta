{"version":3,"file":"Prompts.js","sourceRoot":"","sources":["../src/Prompts.ts"],"names":[],"mappings":";;;;;AAAA,sDAA8B;AAM9B,MAAM,SAAS,GAA0B,EAAE,CAAC;AAE5C;;;;GAIG;AACH,SAAgB,sBAAsB,CAAC,QAA6B;IAClE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC3B,CAAC;AAFD,wDAEC;AAED,SAAgB,yBAAyB,CAAC,QAA6B;IACrE,MAAM,aAAa,GAAG,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,KAAK,QAAQ,CAAC,CAAC;IAC/E,IAAI,aAAa,KAAK,CAAC,CAAC,EAAE;QACxB,MAAM,IAAI,KAAK,CACb,mFAAmF,CACpF,CAAC;KACH;IACD,SAAS,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;AACrC,CAAC;AARD,8DAQC;AAED,SAAgB,iBAAiB,CAAC,UAA6C,EAAE;IAC/E,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,QAAQ,iBAAG,KAAK,EAAE,IAAI,IAAK,OAAO,EAAG,CAAC;KACvC;AACH,CAAC;AAJD,8CAIC;AAED,SAAgB,kBAAkB,CAAC,UAA6C,EAAE;IAChF,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,QAAQ,iBAAG,KAAK,EAAE,KAAK,IAAK,OAAO,EAAG,CAAC;KACxC;AACH,CAAC;AAJD,gDAIC;AAEM,KAAK,UAAU,YAAY,CAAC,OAGlC;IACC,iBAAiB,EAAE,CAAC;IACpB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,iBAAO,iBAC7B,IAAI,EAAE,SAAS,EACf,IAAI,EAAE,OAAO,IACV,OAAO,EACV,CAAC;IACH,kBAAkB,EAAE,CAAC;IACrB,OAAO,KAAK,CAAC;AACf,CAAC;AAZD,oCAYC","sourcesContent":["import prompts from 'prompts';\n\ntype InteractionOptions = { pause: boolean; canEscape?: boolean };\n\ntype InteractionCallback = (options: InteractionOptions) => void;\n\nconst listeners: InteractionCallback[] = [];\n\n/**\n * Used to pause/resume interaction observers while prompting (made for TerminalUI).\n *\n * @param callback\n */\nexport function addInteractionListener(callback: InteractionCallback) {\n  listeners.push(callback);\n}\n\nexport function removeInteractionListener(callback: InteractionCallback) {\n  const listenerIndex = listeners.findIndex(_callback => _callback === callback);\n  if (listenerIndex === -1) {\n    throw new Error(\n      'Logger.removeInteractionListener(): cannot remove an unregistered event listener.'\n    );\n  }\n  listeners.splice(listenerIndex, 1);\n}\n\nexport function pauseInteractions(options: Omit<InteractionOptions, 'pause'> = {}) {\n  for (const listener of listeners) {\n    listener({ pause: true, ...options });\n  }\n}\n\nexport function resumeInteractions(options: Omit<InteractionOptions, 'pause'> = {}) {\n  for (const listener of listeners) {\n    listener({ pause: false, ...options });\n  }\n}\n\nexport async function confirmAsync(options: {\n  initial?: boolean;\n  message: string;\n}): Promise<boolean> {\n  pauseInteractions();\n  const { value } = await prompts({\n    type: 'confirm',\n    name: 'value',\n    ...options,\n  });\n  resumeInteractions();\n  return value;\n}\n"]}