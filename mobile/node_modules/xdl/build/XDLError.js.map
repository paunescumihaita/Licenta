{"version":3,"file":"XDLError.js","sourceRoot":"","sources":["../src/XDLError.ts"],"names":[],"mappings":";;AAEA,MAAM,YAAY,GAAG,SAAS,CAAC;AAE/B,MAAqB,QAAS,SAAQ,KAAK;IAMzC,YAAY,IAAe,EAAE,OAAe;QAC1C,KAAK,CAAC,EAAE,CAAC,CAAC;QANH,SAAI,GAAG,UAAU,CAAC;QAQzB,uEAAuE;QACvE,wBAAwB;QACxB,IAAI,OAAO,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE;YACpC,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;SAClD;QAED,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IACzB,CAAC;CACF;AAnBD,2BAmBC","sourcesContent":["import { ErrorCode } from './internal';\n\nconst ERROR_PREFIX = 'Error: ';\n\nexport default class XDLError extends Error {\n  readonly name = 'XDLError';\n\n  code: string;\n  isXDLError: true;\n\n  constructor(code: ErrorCode, message: string) {\n    super('');\n\n    // If e.toString() was called to get `message` we don't want it to look\n    // like \"Error: Error:\".\n    if (message.startsWith(ERROR_PREFIX)) {\n      message = message.substring(ERROR_PREFIX.length);\n    }\n\n    this.message = message;\n    this.code = code;\n    this.isXDLError = true;\n  }\n}\n"]}