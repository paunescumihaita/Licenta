{"version":3,"file":"EmbeddedAssets.js","sourceRoot":"","sources":["../src/EmbeddedAssets.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoAppManifest, getConfig, PackageJSONConfig, ProjectTarget } from '@expo/config';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport semver from 'semver';\n\nimport {\n  ExponentTools,\n  IosPlist,\n  IosWorkspace,\n  Logger as logger,\n  StandaloneContext,\n  writeArtifactSafelyAsync,\n} from './internal';\n\nexport type EmbeddedAssetsConfiguration = {\n  projectRoot: string;\n  pkg: PackageJSONConfig;\n  exp: ExpoAppManifest;\n  releaseChannel?: string;\n  iosManifestUrl: string;\n  iosManifest: any;\n  iosBundle: string;\n  iosSourceMap: string | null;\n  androidManifestUrl: string;\n  androidManifest: any;\n  androidBundle: string;\n  androidSourceMap: string | null;\n  target: ProjectTarget;\n};\n\nexport async function configureAsync(config: EmbeddedAssetsConfiguration) {\n  await _maybeWriteArtifactsToDiskAsync(config);\n  await _maybeConfigureExpoKitEmbeddedAssetsAsync(config);\n  await _maybeConfigureExpoUpdatesEmbeddedAssetsAsync(config);\n}\n\nexport function getEmbeddedManifestPath(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: ExpoAppManifest\n): string {\n  if (platform === 'ios') {\n    return exp.ios && exp.ios.publishManifestPath\n      ? exp.ios.publishManifestPath\n      : _getDefaultEmbeddedManifestPath(platform, projectRoot, exp);\n  } else if (platform === 'android') {\n    return exp.android && exp.android.publishManifestPath\n      ? exp.android.publishManifestPath\n      : _getDefaultEmbeddedManifestPath(platform, projectRoot, exp);\n  }\n  return _getDefaultEmbeddedManifestPath(platform, projectRoot, exp);\n}\n\nfunction _getDefaultEmbeddedManifestPath(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: ExpoAppManifest\n): string {\n  return path.join(_getDefaultEmbeddedAssetDir(platform, projectRoot, exp), 'app.manifest');\n}\n\nfunction _getDefaultEmbeddedBundlePath(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: ExpoAppManifest\n): string {\n  return path.join(_getDefaultEmbeddedAssetDir(platform, projectRoot, exp), 'app.bundle');\n}\n\nfunction _getDefaultEmbeddedAssetDir(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: ExpoAppManifest\n): string {\n  if (platform === 'ios') {\n    const { iosSupportingDirectory } = getIOSPaths(projectRoot);\n    return iosSupportingDirectory;\n  } else if (platform === 'android') {\n    return path.join(projectRoot, 'android', 'app', 'src', 'main', 'assets');\n  } else {\n    throw new Error('Embedding assets is not supported for platform ' + platform);\n  }\n}\n\nexport function shouldEmbedAssetsForExpoUpdates(\n  projectRoot: string,\n  exp: ExpoAppManifest,\n  pkg: PackageJSONConfig,\n  target: ProjectTarget\n): boolean {\n  if (!pkg.dependencies?.['expo-updates'] || target !== 'bare') {\n    return false;\n  }\n\n  // semver.coerce can return null\n  const expoUpdatesVersion = semver.coerce(pkg.dependencies['expo-updates']);\n\n  // expo-updates 0.1.x relies on expo-cli automatically embedding the manifest and bundle\n  if (expoUpdatesVersion && semver.satisfies(expoUpdatesVersion, '~0.1.0')) {\n    return true;\n  }\n\n  // We also want to support developers who had expo-updates 0.1.x and upgraded but still rely on\n  // expo-cli's automatic embedding. If the files already exist we can assume we need to update them\n  if (\n    fs.existsSync(_getDefaultEmbeddedBundlePath('android', projectRoot, exp)) ||\n    fs.existsSync(_getDefaultEmbeddedManifestPath('android', projectRoot, exp)) ||\n    fs.existsSync(_getDefaultEmbeddedBundlePath('ios', projectRoot, exp)) ||\n    fs.existsSync(_getDefaultEmbeddedManifestPath('ios', projectRoot, exp))\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nasync function _maybeWriteArtifactsToDiskAsync(config: EmbeddedAssetsConfiguration) {\n  const {\n    projectRoot,\n    pkg,\n    exp,\n    iosManifest,\n    iosBundle,\n    iosSourceMap,\n    androidManifest,\n    androidBundle,\n    androidSourceMap,\n    target,\n  } = config;\n\n  let androidBundlePath;\n  let androidManifestPath;\n  let androidSourceMapPath;\n  let iosBundlePath;\n  let iosManifestPath;\n  let iosSourceMapPath;\n\n  if (shouldEmbedAssetsForExpoUpdates(projectRoot, exp, pkg, target)) {\n    const defaultAndroidDir = _getDefaultEmbeddedAssetDir('android', projectRoot, exp);\n    const defaultIosDir = _getDefaultEmbeddedAssetDir('ios', projectRoot, exp);\n\n    await fs.ensureDir(defaultIosDir);\n    await fs.ensureDir(defaultAndroidDir);\n\n    androidBundlePath = _getDefaultEmbeddedBundlePath('android', projectRoot, exp);\n    androidManifestPath = _getDefaultEmbeddedManifestPath('android', projectRoot, exp);\n    iosBundlePath = _getDefaultEmbeddedBundlePath('ios', projectRoot, exp);\n    iosManifestPath = _getDefaultEmbeddedManifestPath('ios', projectRoot, exp);\n\n    if (!fs.existsSync(iosBundlePath) || !fs.existsSync(iosManifestPath)) {\n      logger.global.warn(\n        'Creating app.manifest and app.bundle inside of your ios/<project>/Supporting directory.\\nBe sure to add these files to your Xcode project. More info at https://expo.fyi/embedded-assets'\n      );\n    }\n  }\n\n  // allow custom overrides\n  if (exp.android?.publishBundlePath) {\n    androidBundlePath = exp.android.publishBundlePath;\n  }\n  if (exp.android?.publishManifestPath) {\n    androidManifestPath = exp.android.publishManifestPath;\n  }\n  if (exp.android?.publishSourceMapPath) {\n    androidSourceMapPath = exp.android.publishSourceMapPath;\n  }\n  if (exp.ios?.publishBundlePath) {\n    iosBundlePath = exp.ios.publishBundlePath;\n  }\n  if (exp.ios?.publishManifestPath) {\n    iosManifestPath = exp.ios.publishManifestPath;\n  }\n  if (exp.ios?.publishSourceMapPath) {\n    iosSourceMapPath = exp.ios.publishSourceMapPath;\n  }\n\n  if (androidBundlePath) {\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishBundlePath',\n      androidBundlePath,\n      androidBundle\n    );\n  }\n\n  if (androidManifestPath) {\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishManifestPath',\n      androidManifestPath,\n      JSON.stringify(androidManifest)\n    );\n  }\n\n  if (androidSourceMapPath && androidSourceMap) {\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishSourceMapPath',\n      androidSourceMapPath,\n      androidSourceMap\n    );\n  }\n\n  if (iosBundlePath) {\n    await writeArtifactSafelyAsync(projectRoot, 'ios.publishBundlePath', iosBundlePath, iosBundle);\n  }\n\n  if (iosManifestPath) {\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishManifestPath',\n      iosManifestPath,\n      JSON.stringify(iosManifest)\n    );\n  }\n\n  if (iosSourceMapPath && iosSourceMap) {\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishSourceMapPath',\n      iosSourceMapPath,\n      iosSourceMap\n    );\n  }\n}\n\nasync function _maybeConfigureExpoKitEmbeddedAssetsAsync(config: EmbeddedAssetsConfiguration) {\n  const { projectRoot, exp, releaseChannel, androidManifestUrl, androidManifest } = config;\n\n  const context = StandaloneContext.createUserContext(projectRoot, exp);\n  const { supportingDirectory } = IosWorkspace.getPaths(context);\n\n  // iOS ExpoKit\n  if (releaseChannel && fs.existsSync(path.join(supportingDirectory, 'EXShell.plist'))) {\n    // This is an ExpoKit app, set properties in EXShell.plist\n    await IosPlist.modifyAsync(supportingDirectory, 'EXShell', (shellPlist: any) => {\n      shellPlist.releaseChannel = releaseChannel;\n      return shellPlist;\n    });\n  }\n\n  // Android ExpoKit\n  const constantsPath = path.join(\n    projectRoot,\n    'android',\n    'app',\n    'src',\n    'main',\n    'java',\n    'host',\n    'exp',\n    'exponent',\n    'generated',\n    'AppConstants.java'\n  );\n  if (fs.existsSync(constantsPath)) {\n    // This is an ExpoKit app\n    // We need to add EmbeddedResponse instances on Android to tell the runtime\n    // that the shell app manifest and bundle is packaged.\n    await ExponentTools.deleteLinesInFileAsync(\n      `START EMBEDDED RESPONSES`,\n      `END EMBEDDED RESPONSES`,\n      constantsPath\n    );\n    await ExponentTools.regexFileAsync(\n      '// ADD EMBEDDED RESPONSES HERE',\n      `\n      // ADD EMBEDDED RESPONSES HERE\n      // START EMBEDDED RESPONSES\n      embeddedResponses.add(new Constants.EmbeddedResponse(\"${androidManifestUrl}\", \"assets://shell-app-manifest.json\", \"application/json\"));\n      embeddedResponses.add(new Constants.EmbeddedResponse(\"${androidManifest.bundleUrl}\", \"assets://shell-app.bundle\", \"application/javascript\"));\n      // END EMBEDDED RESPONSES`,\n      constantsPath\n    );\n    if (releaseChannel) {\n      await ExponentTools.regexFileAsync(\n        /RELEASE_CHANNEL = \"[^\"]*\"/,\n        `RELEASE_CHANNEL = \"${releaseChannel}\"`,\n        constantsPath\n      );\n    }\n  }\n}\n\nasync function _maybeConfigureExpoUpdatesEmbeddedAssetsAsync(config: EmbeddedAssetsConfiguration) {\n  if (!config.pkg.dependencies?.['expo-updates'] || config.target === 'managed') {\n    return;\n  }\n\n  let isLikelyFirstPublish = false;\n\n  const { projectRoot, exp, releaseChannel, iosManifestUrl, androidManifestUrl } = config;\n\n  const { iosSupportingDirectory: supportingDirectory } = getIOSPaths(projectRoot);\n\n  // iOS expo-updates\n  if (fs.existsSync(path.join(supportingDirectory, 'Expo.plist'))) {\n    // This is an app with expo-updates installed, set properties in Expo.plist\n    await IosPlist.modifyAsync(supportingDirectory, 'Expo', (configPlist: any) => {\n      if (configPlist.EXUpdatesURL === 'YOUR-APP-URL-HERE') {\n        isLikelyFirstPublish = true;\n      }\n      configPlist.EXUpdatesURL = iosManifestUrl;\n      configPlist.EXUpdatesSDKVersion = exp.sdkVersion;\n      if (releaseChannel) {\n        configPlist.EXUpdatesReleaseChannel = releaseChannel;\n      }\n      return configPlist;\n    });\n    await IosPlist.cleanBackupAsync(supportingDirectory, 'Expo', false);\n  }\n\n  // Android expo-updates\n  const androidManifestXmlPath = path.join(\n    projectRoot,\n    'android',\n    'app',\n    'src',\n    'main',\n    'AndroidManifest.xml'\n  );\n  const androidManifestXmlFile = fs.readFileSync(androidManifestXmlPath, 'utf8');\n  const expoUpdateUrlRegex = /<meta-data[^>]+\"expo.modules.updates.EXPO_UPDATE_URL\"[^>]+\\/>/;\n  const expoSdkVersionRegex = /<meta-data[^>]+\"expo.modules.updates.EXPO_SDK_VERSION\"[^>]+\\/>/;\n  const expoReleaseChannelRegex = /<meta-data[^>]+\"expo.modules.updates.EXPO_RELEASE_CHANNEL\"[^>]+\\/>/;\n\n  const expoUpdateUrlTag = `<meta-data android:name=\"expo.modules.updates.EXPO_UPDATE_URL\" android:value=\"${androidManifestUrl}\" />`;\n  const expoSdkVersionTag = `<meta-data android:name=\"expo.modules.updates.EXPO_SDK_VERSION\" android:value=\"${exp.sdkVersion}\" />`;\n  const expoReleaseChannelTag = `<meta-data android:name=\"expo.modules.updates.EXPO_RELEASE_CHANNEL\" android:value=\"${releaseChannel}\" />`;\n\n  const tagsToInsert = [];\n  if (androidManifestXmlFile.search(expoUpdateUrlRegex) < 0) {\n    tagsToInsert.push(expoUpdateUrlTag);\n  }\n  if (androidManifestXmlFile.search(expoSdkVersionRegex) < 0) {\n    tagsToInsert.push(expoSdkVersionTag);\n  }\n  if (releaseChannel && androidManifestXmlFile.search(expoReleaseChannelRegex) < 0) {\n    tagsToInsert.push(expoReleaseChannelTag);\n  }\n  if (tagsToInsert.length) {\n    // try to insert the meta-data tags that aren't found\n    await ExponentTools.regexFileAsync(\n      /<activity\\s+android:name=\".MainActivity\"/,\n      `${tagsToInsert.join('\\n      ')}\n\n  <activity\n    android:name=\".MainActivity\"`,\n      androidManifestXmlPath\n    );\n  }\n  await ExponentTools.regexFileAsync(expoUpdateUrlRegex, expoUpdateUrlTag, androidManifestXmlPath);\n  await ExponentTools.regexFileAsync(\n    expoSdkVersionRegex,\n    expoSdkVersionTag,\n    androidManifestXmlPath\n  );\n  if (releaseChannel) {\n    await ExponentTools.regexFileAsync(\n      expoReleaseChannelRegex,\n      expoReleaseChannelTag,\n      androidManifestXmlPath\n    );\n  }\n\n  if (isLikelyFirstPublish) {\n    logger.global.warn(\n      '🚀 It looks like this your first publish for this project! ' +\n        \"We've automatically set some configuration values in Expo.plist and AndroidManifest.xml. \" +\n        \"You'll need to make a new build with these changes before you can download the update \" +\n        'you just published.'\n    );\n  }\n}\n\n/** The code below here is duplicated from expo-cli currently **/\n\n// TODO: come up with a better solution for using app.json expo.name in various places\nfunction sanitizedName(name: string) {\n  return name\n    .replace(/[\\W_]+/g, '')\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '');\n}\n\n// TODO: it's silly and kind of fragile that we look at app config to determine\n// the ios project paths. Overall this function needs to be revamped, just a\n// placeholder for now! Make this more robust when we support applying config\n// at any time (currently it's only applied on eject).\nexport function getIOSPaths(projectRoot: string) {\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  const projectName = exp.name;\n  if (!projectName) {\n    throw new Error('Your project needs a name in app.json/app.config.js.');\n  }\n\n  const iosProjectDirectory = path.join(projectRoot, 'ios', sanitizedName(projectName));\n  const iosSupportingDirectory = path.join(\n    projectRoot,\n    'ios',\n    sanitizedName(projectName),\n    'Supporting'\n  );\n  const iconPath = path.join(iosProjectDirectory, 'Assets.xcassets', 'AppIcon.appiconset');\n\n  return {\n    projectName,\n    iosProjectDirectory,\n    iosSupportingDirectory,\n    iconPath,\n  };\n}\n"]}