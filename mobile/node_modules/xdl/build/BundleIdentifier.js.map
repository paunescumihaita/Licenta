{"version":3,"file":"BundleIdentifier.js","sourceRoot":"","sources":["../src/BundleIdentifier.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * BundleIdentifier.ts\n *\n * NOTE:\n * The code in this module originates from eas-cli and the canonical version of\n * it is in\n * https://github.com/expo/eas-cli/blob/6a0a9bbaaad03b053b5930f7d14bde35b4d0a9f0/packages/eas-cli/src/build/ios/bundleIdentifer.ts#L36\n * Any changes to this code should be applied to eas-cli as well!\n *\n * TODO: move the code for configuring and validating the bundle identifier\n * to a shared package that can be used for both eas-cli and expo-cli.\n */\nimport { ExpoConfig, getConfigFilePaths, getProjectConfigDescription } from '@expo/config';\nimport { IOSConfig } from '@expo/config-plugins';\nimport JsonFile from '@expo/json-file';\nimport assert from 'assert';\nimport chalk from 'chalk';\nimport { prompt } from 'prompts';\n\nimport { ProjectUtils } from './internal';\n\nconst { logInfo, logWarning } = ProjectUtils;\n\nenum BundleIdentiferSource {\n  XcodeProject,\n  AppJson,\n}\n\nexport async function configureBundleIdentifierAsync(\n  projectRoot: string,\n  exp: ExpoConfig\n): Promise<string> {\n  const configDescription = getProjectConfigDescription(projectRoot);\n  const bundleIdentifierFromPbxproj = IOSConfig.BundleIdentifier.getBundleIdentifierFromPbxproj(\n    projectRoot\n  );\n  const bundleIdentifierFromConfig = IOSConfig.BundleIdentifier.getBundleIdentifier(exp);\n  if (bundleIdentifierFromPbxproj && bundleIdentifierFromConfig) {\n    if (bundleIdentifierFromPbxproj === bundleIdentifierFromConfig) {\n      return bundleIdentifierFromConfig;\n    } else {\n      logWarning(\n        projectRoot,\n        'expo',\n        `We detected that your Xcode project is configured with a different bundle identifier than the one defined in ${configDescription}.`\n      );\n      const hasBundleIdentifierInStaticConfig = await hasBundleIdentifierInStaticConfigAsync(\n        projectRoot,\n        exp\n      );\n      if (!hasBundleIdentifierInStaticConfig) {\n        logInfo(\n          projectRoot,\n          'expo',\n          `If you choose the one defined in ${configDescription} we'll automatically configure your Xcode project with it.\nHowever, if you choose the one defined in the Xcode project you'll have to update ${configDescription} on your own.`\n        );\n      }\n      const { bundleIdentifierSource } = await prompt({\n        type: 'select',\n        name: 'bundleIdentifierSource',\n        message: 'Which bundle identifier should we use?',\n        choices: [\n          {\n            title: `${chalk.bold(bundleIdentifierFromPbxproj)} - In Xcode project`,\n            value: BundleIdentiferSource.XcodeProject,\n          },\n          {\n            title: `${chalk.bold(bundleIdentifierFromConfig)} - In your ${configDescription}`,\n            value: BundleIdentiferSource.AppJson,\n          },\n        ],\n      });\n      if (bundleIdentifierSource === BundleIdentiferSource.XcodeProject) {\n        IOSConfig.BundleIdentifier.setBundleIdentifierForPbxproj(\n          projectRoot,\n          bundleIdentifierFromConfig\n        );\n        return bundleIdentifierFromConfig;\n      } else {\n        if (hasBundleIdentifierInStaticConfig) {\n          await updateAppJsonConfigAsync(projectRoot, exp, bundleIdentifierFromPbxproj);\n        } else {\n          throw new Error(missingBundleIdentifierMessage(configDescription));\n        }\n        return bundleIdentifierFromPbxproj;\n      }\n    }\n  } else if (bundleIdentifierFromPbxproj && !bundleIdentifierFromConfig) {\n    if (getConfigFilePaths(projectRoot).staticConfigPath) {\n      await updateAppJsonConfigAsync(projectRoot, exp, bundleIdentifierFromPbxproj);\n      return bundleIdentifierFromPbxproj;\n    } else {\n      throw new Error(missingBundleIdentifierMessage(configDescription));\n    }\n  } else if (!bundleIdentifierFromPbxproj && bundleIdentifierFromConfig) {\n    IOSConfig.BundleIdentifier.setBundleIdentifierForPbxproj(\n      projectRoot,\n      bundleIdentifierFromConfig\n    );\n    return bundleIdentifierFromConfig;\n  } else {\n    throw new Error(missingBundleIdentifierMessage(configDescription));\n  }\n}\n\nfunction missingBundleIdentifierMessage(configDescription: string): string {\n  return `Please define \"ios.bundleIdentifier\" in ${configDescription}.`;\n}\n\nasync function updateAppJsonConfigAsync(\n  projectRoot: string,\n  exp: ExpoConfig,\n  newBundleIdentifier: string\n): Promise<void> {\n  const paths = getConfigFilePaths(projectRoot);\n  assert(paths.staticConfigPath, \"Can't update dynamic configs\");\n\n  const rawStaticConfig = (await JsonFile.readAsync(paths.staticConfigPath)) as any;\n  rawStaticConfig.expo = {\n    ...rawStaticConfig.expo,\n    ios: { ...rawStaticConfig.expo?.ios, bundleIdentifier: newBundleIdentifier },\n  };\n  await JsonFile.writeAsync(paths.staticConfigPath, rawStaticConfig);\n\n  exp.ios = { ...exp.ios, bundleIdentifier: newBundleIdentifier };\n}\n\n/**\n * Check if static config exists and if ios.bundleIdentifier is defined there.\n * It will return false if the value in static config is different than \"ios.bundleIdentifier\" in ExpoConfig\n */\nasync function hasBundleIdentifierInStaticConfigAsync(\n  projectRoot: string,\n  exp: ExpoConfig\n): Promise<boolean> {\n  if (!exp.ios?.bundleIdentifier) {\n    return false;\n  }\n  const paths = getConfigFilePaths(projectRoot);\n  if (!paths.staticConfigPath) {\n    return false;\n  }\n  const rawStaticConfig = JsonFile.read(paths.staticConfigPath) as any;\n  return rawStaticConfig?.expo?.ios?.bundleIdentifier === exp.ios.bundleIdentifier;\n}\n"]}