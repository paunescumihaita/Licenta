import { Failure, Parser } from './Parser';
declare function format(command: string, argumentText?: string, success?: boolean): string;
declare function formatBreadCrumb(fileName: string, target?: string, project?: string): string;
export declare class Formatter {
    props: {
        projectRoot: string;
    };
    static format: typeof format;
    static formatBreadCrumb: typeof formatBreadCrumb;
    parser: Parser;
    errors: string[];
    warnings: string[];
    constructor(props: {
        projectRoot: string;
    });
    pipe(data: string): string[];
    private dimConfiguration;
    formatAnalyze(fileName: string, filePath: string, target?: string, project?: string): string;
    formatBuildTarget(target: string, project: string, configuration: string): string;
    formatAggregateTarget(target: string, project: string, configuration: string): string;
    formatAnalyzeTarget(target: string, project: string, configuration: string): string;
    formatClean(project: string, target: string, configuration: string): string;
    formatCleanTarget(target: string, project: string, configuration: string): string;
    formatCompile(fileName: string, filePath: string, target?: string, project?: string): string;
    formatCompileCommand(compilerCommand: string, filePath: string): string;
    formatCompileStoryboard(fileName: string, filePath: string, target?: string, project?: string): string;
    formatCompileXib(fileName: string, filePath: string, target?: string, project?: string): string;
    formatCopyHeaderFile(source: string, target: string): string;
    formatCopyPlistFile(source: string, target: string): string;
    formatCopyStringsFile(filePath: string, target?: string, project?: string): string;
    formatCpresource(filePath: string): string;
    formatGenerateDsym(dsym: string, target?: string, project?: string): string;
    formatLinking(file: string, targetName: string, arch?: string, target?: string, project?: string): string;
    formatLibtool(library: string, target?: string, project?: string): string;
    formatPendingTest(suite: string, test: string): string;
    formatPassingTest(suite: string, test: string, time: string): string;
    formatMeasuringTest(suite: string, test: string, time: string): string;
    formatFailingTest(suite: string, test: string, reason: string, filePath: string): string;
    formatProcessPch(fileName: string, filePath: string, target?: string, project?: string): string;
    formatProcessPchCommand(filePath: string): string;
    formatPhaseSuccess(phaseName: string): string;
    formatPhaseScriptExecution(scriptName: string, target?: string, project?: string): string;
    formatProcessInfoPlist(fileName: string, filePath: string, target?: string, project?: string): string;
    formatCodesign(fileName: string, filePath: string, target?: string, project?: string): string;
    formatPreprocess(file: string): string;
    formatPbxcp(file: string): string;
    formatShellCommand(command: string, args: string): string;
    formatTestRunFinished(name: string, time: string): string;
    formatTouch(filePath: string, fileName: string): string;
    formatTestRunStarted(name: string): string;
    formatTestSuiteStarted(name: string): string;
    formatTiffutil(file: string): string;
    formatWriteFile(file: string): string;
    formatOther(text: string): string;
    formatCheckDependencies(text: string): string;
    formatCleanRemove(msg: string): string;
    formatWriteAuxiliaryFiles(text: string): string;
    formatWillNotBeCodeSigned(message: string): string;
    /**
     *
     * @param fileName 'SampleTest.m',
     * @param filePathAndLocation '/Users/foo/bar.m:12:59',
     * @param reason 'expected identifier',
     * @param line '                [[thread should] equal:thread.];',
     * @param cursor '                                           ^'
     */
    formatCompileError(fileName: string, filePathAndLocation: string, reason: string, line: string, cursor: string): string;
    formatError(message: string): string;
    formatFileMissingError(reason: string, filePath: string): string;
    formatLdWarning(reason: string): string;
    formatUndefinedSymbols(message: string, symbol: string, reference: string): string;
    formatDuplicateSymbols(message: string, filePaths: string[], isWarning: boolean): string;
    /**
     * In: `The iOS Simulator deployment target 'IPHONEOS_DEPLOYMENT_TARGET' is set to 8.0, but the range of supported deployment target versions is 9.0 to 14.3.99. (in target 'boost-for-react-native' from project 'Pods')`
     * Out: `⚠️ Pods/boost-for-react-native: iOS@8.0 version mismatch. Expected >= 9.0 < 14.3.99`
     *
     * @param os iOS
     * @param deploymentTarget IPHONEOS_DEPLOYMENT_TARGET
     * @param version 8.0
     * @param minVersion 9.0
     * @param maxVersion 14.3.99
     * @param target boost-for-react-native
     * @param project Pods
     */
    formatVersionMismatchWarning(os: string, deploymentTarget: string, version: string, minVersion: string, maxVersion: string, target: string, project: string): string;
    /**
     * In: `Skipping duplicate build file in Compile Sources build phase: /Users/evanbacon/Documents/GitHub/expo/ios/Exponent/Kernel/ReactAppManager/EXReactAppManager.mm (in target 'Exponent' from project 'Exponent')`
     * Out:
     * `⚠️ Skipping duplicate file: Exponent/Kernel/ReactAppManager/EXReactAppManager.mm:
     *    Remove: Exponent » Exponent » Build Phases » Compile Sources » EXReactAppManager.mm`
     *
     * @param filePath
     * @param buildPhase 'Compile Sources'
     * @param target Exponent-watch-app
     * @param project Exponent
     */
    formatDuplicateFileCompilerWarning(filePath: string, buildPhase: string, target: string, project: string): string;
    /**
     * In: `The Copy Bundle Resources build phase contains this target's Info.plist file '/Users/evanbacon/Documents/GitHub/expo/ios/Exponent/Supporting/Info.plist'. (in target 'Exponent' from project 'Exponent')`
     * Out:
     * `⚠️ Target's Info.plist file is incorrectly linked: Exponent/Supporting/Info.plist:
     *    Remove: Exponent » Exponent » Build Phases » Copy Bundle Resources » Info.plist`
     *
     * @param filePath
     * @param reservedFileDescription 'entitlements'
     * @param target Exponent-watch-app
     * @param project Exponent
     */
    formatReservedFileInCopyBundleResourcesCompilerWarning(filePath: string, reservedFileDescription: string, target: string, project: string): string;
    formatMissingFileCompilerWarning(filePath: string): string;
    formatGenericWarning(message: string): string;
    formatWarning(message: string): string;
    formatCompileWarning(fileName: string, filePathAndLocation: string, reason: string, line: string, cursor: string): string;
    shouldShowCompileWarning(filePath: string, lineNumber?: string, columnNumber?: string): boolean;
    finish(): void;
    prettyFormat(text: string): string | void;
    optionalNewline(): string;
    formatTestSummary(executedMessage: string, failuresPerSuite: Record<string, Failure[]>): string;
    formatFailures(failuresPerSuite: Record<string, Failure[]>): string;
    formatFailure(f: Failure): string;
}
export {};
